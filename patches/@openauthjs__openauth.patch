diff --git a/dist/esm/client.js b/dist/esm/client.js
index 3cd7f7020c9fe913c44efa50575e88e8a1333da0..a1202b433d1d8398489eecb543ec6405e432d146 100644
--- a/dist/esm/client.js
+++ b/dist/esm/client.js
@@ -23,7 +23,7 @@ function createClient(input) {
     const cached = issuerCache.get(issuer);
     if (cached)
       return cached;
-    const wellKnown = await (f || fetch)(`${issuer}/.well-known/oauth-authorization-server`).then((r) => r.json());
+    const wellKnown = await (f || fetch)(new URL("/.well-known/oauth-authorization-server", issuer).toString()).then((r) => r.json());
     issuerCache.set(issuer, wellKnown);
     return wellKnown;
   }
diff --git a/dist/esm/issuer.js b/dist/esm/issuer.js
index 1b18009bfeaa09f2222e9df760dde0e4eb1d4326..dc6c2040dc2c7acae004bc1deb2c3d33fb6068a2 100644
--- a/dist/esm/issuer.js
+++ b/dist/esm/issuer.js
@@ -8,7 +8,7 @@ import {
   UnauthorizedClientError,
   UnknownStateError
 } from "./error.js";
-import { compactDecrypt, CompactEncrypt, SignJWT } from "jose";
+import { compactDecrypt, CompactEncrypt, jwtVerify, SignJWT } from "jose";
 import { Storage } from "./storage/storage.js";
 import { encryptionKeys, legacySigningKeys, signingKeys } from "./keys.js";
 import { validatePKCE } from "./pkce.js";
@@ -18,9 +18,12 @@ import { getRelativeUrl, isDomainMatch, lazy } from "./util.js";
 import { DynamoStorage } from "./storage/dynamo.js";
 import { MemoryStorage } from "./storage/memory.js";
 import { cors } from "hono/cors";
-import { logger } from "hono/logger";
+import { createMiddleware } from "hono/factory";
 var aws = awsHandle;
+var basePath = undefined;
 function issuer(input) {
+  basePath = input.basePath;
+  basePath = basePath?.replace(/\/$/, "");
   const error = input.error ?? function(err) {
     return new Response(err.message, {
       status: 400,
@@ -195,9 +198,28 @@ function issuer(input) {
     return JSON.parse(new TextDecoder().decode(await compactDecrypt(value, await encryptionKey().then((v) => v.private)).then((value2) => value2.plaintext)));
   }
   function issuer2(ctx) {
-    return new URL(getRelativeUrl(ctx, "/")).origin;
+    const host = new URL(getRelativeUrl(ctx, "/")).origin;
+    if (!basePath)
+      return host;
+    const url = new URL(host);
+    url.pathname = basePath;
+    return url.toString();
+  }
+  const app = new Hono;
+  if (basePath) {
+    app.use(createMiddleware(async (c, next) => {
+      await next();
+      if (basePath) {
+        const bp = basePath.replace(/^\/+|\/+$/g, "");
+        const loc = c.res.headers.get("Location");
+        if (loc && loc.startsWith("/")) {
+          const newLoc = `/${bp}${loc}`;
+          c.res.headers.set("Location", newLoc);
+        }
+      }
+      return c.res;
+    }));
   }
-  const app = new Hono().use(logger());
   for (const [name, value] of Object.entries(input.providers)) {
     const route = new Hono;
     route.use(async (c, next) => {
@@ -236,7 +258,7 @@ function issuer(input) {
       issuer: iss,
       authorization_endpoint: `${iss}/authorize`,
       token_endpoint: `${iss}/token`,
-      jwks_uri: `${iss}/.well-known/jwks.json`,
+      jwks_uri: new URL("/.well-known/jwks.json", iss).toString(),
       response_types_supported: ["code", "token"]
     });
   });
@@ -263,7 +285,6 @@ function issuer(input) {
           error_description: "Authorization code has been used or expired"
         }, 400);
       }
-      await Storage.remove(storage, key);
       if (payload.redirectURI !== form.get("redirect_uri")) {
         return c.json({
           error: "invalid_redirect_uri",
@@ -291,6 +312,7 @@ function issuer(input) {
         }
       }
       const tokens = await generateTokens(c, payload);
+      await Storage.remove(storage, key);
       return c.json({
         access_token: tokens.access,
         expires_in: tokens.expiresIn,
@@ -431,6 +453,39 @@ function issuer(input) {
       value.type
     ])), c.req.raw));
   });
+  app.get("/userinfo", async (c) => {
+    const header = c.req.header("Authorization");
+    if (!header) {
+      return c.json({
+        error: "invalid_request",
+        error_description: "Missing Authorization header"
+      }, 400);
+    }
+    const [type, token] = header.split(" ");
+    if (type !== "Bearer") {
+      return c.json({
+        error: "invalid_request",
+        error_description: "Missing or invalid Authorization header"
+      }, 400);
+    }
+    if (!token) {
+      return c.json({
+        error: "invalid_request",
+        error_description: "Missing token"
+      }, 400);
+    }
+    const result = await jwtVerify(token, () => signingKey().then((item) => item.public), {
+      issuer: issuer2(c)
+    });
+    const validated = await input.subjects[result.payload.type]["~standard"].validate(result.payload.properties);
+    if (!validated.issues && result.payload.mode === "access") {
+      return c.json(validated.value);
+    }
+    return c.json({
+      error: "invalid_token",
+      error_description: "Invalid token"
+    });
+  });
   app.onError(async (err, c) => {
     console.error(err);
     if (err instanceof UnknownStateError) {
@@ -447,5 +502,6 @@ function issuer(input) {
 }
 export {
   issuer,
+  basePath,
   aws
 };
diff --git a/dist/esm/provider/apple.js b/dist/esm/provider/apple.js
index fd8aba72a6c74f419880899fdc812c06bb47b6cf..cdd24fb0ff52e7479c2cc2bf54102ddda97cce5e 100644
--- a/dist/esm/provider/apple.js
+++ b/dist/esm/provider/apple.js
@@ -2,13 +2,17 @@
 import { Oauth2Provider } from "./oauth2.js";
 import { OidcProvider } from "./oidc.js";
 function AppleProvider(config) {
+  const { responseMode, ...restConfig } = config;
+  const additionalQuery = responseMode === "form_post" ? { response_mode: "form_post", ...config.query } : config.query || {};
   return Oauth2Provider({
-    ...config,
+    ...restConfig,
     type: "apple",
     endpoint: {
       authorization: "https://appleid.apple.com/auth/authorize",
-      token: "https://appleid.apple.com/auth/token"
-    }
+      token: "https://appleid.apple.com/auth/token",
+      jwks: "https://appleid.apple.com/auth/keys"
+    },
+    query: additionalQuery
   });
 }
 function AppleOidcProvider(config) {
diff --git a/dist/esm/provider/google.js b/dist/esm/provider/google.js
index 28cc16ff04573eac1606292c8f7322db63cf98b2..c89ab5064c640bbae1a5fb6c1d97daacdc7bba2a 100644
--- a/dist/esm/provider/google.js
+++ b/dist/esm/provider/google.js
@@ -7,7 +7,8 @@ function GoogleProvider(config) {
     type: "google",
     endpoint: {
       authorization: "https://accounts.google.com/o/oauth2/v2/auth",
-      token: "https://oauth2.googleapis.com/token"
+      token: "https://oauth2.googleapis.com/token",
+      jwks: "https://www.googleapis.com/oauth2/v3/certs"
     }
   });
 }
diff --git a/dist/esm/provider/linkedin.js b/dist/esm/provider/linkedin.js
new file mode 100644
index 0000000000000000000000000000000000000000..44973a89632738b02ee8d1ff982a3f0803bff29f
--- /dev/null
+++ b/dist/esm/provider/linkedin.js
@@ -0,0 +1,15 @@
+// src/provider/linkedin.ts
+import { Oauth2Provider } from "./oauth2.js";
+function LinkedInAdapter(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "linkedin",
+    endpoint: {
+      authorization: "https://www.linkedin.com/oauth/v2/authorization",
+      token: "https://www.linkedin.com/oauth/v2/accessToken"
+    }
+  });
+}
+export {
+  LinkedInAdapter
+};
diff --git a/dist/esm/provider/oauth2.js b/dist/esm/provider/oauth2.js
index 166bab82f608bcd230e5fc976cb19a0da7f5a307..f9c214890d9041a5121151898c5a8c5327592809 100644
--- a/dist/esm/provider/oauth2.js
+++ b/dist/esm/provider/oauth2.js
@@ -1,9 +1,65 @@
 // src/provider/oauth2.ts
+import { createRemoteJWKSet, jwtVerify } from "jose";
 import { OauthError } from "../error.js";
 import { generatePKCE } from "../pkce.js";
 import { getRelativeUrl } from "../util.js";
 function Oauth2Provider(config) {
   const query = config.query || {};
+  async function handleCallbackLogic(c, ctx, provider, code) {
+    if (!provider || !code) {
+      return c.redirect(getRelativeUrl(c, "./authorize"));
+    }
+    const body = new URLSearchParams({
+      client_id: config.clientID,
+      client_secret: config.clientSecret,
+      code,
+      grant_type: "authorization_code",
+      redirect_uri: provider.redirect,
+      ...provider.codeVerifier ? { code_verifier: provider.codeVerifier } : {}
+    });
+    const json = await fetch(config.endpoint.token, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-www-form-urlencoded",
+        Accept: "application/json"
+      },
+      body: body.toString()
+    }).then((r) => r.json());
+    if ("error" in json) {
+      throw new OauthError(json.error, json.error_description);
+    }
+    let idTokenPayload = null;
+    if (config.endpoint.jwks) {
+      const jwksEndpoint = new URL(config.endpoint.jwks);
+      const jwks = createRemoteJWKSet(jwksEndpoint);
+      const { payload } = await jwtVerify(json.id_token, jwks, {
+        audience: config.clientID
+      });
+      idTokenPayload = payload;
+    }
+    return ctx.success(c, {
+      clientID: config.clientID,
+      tokenset: {
+        get access() {
+          return json.access_token;
+        },
+        get refresh() {
+          return json.refresh_token;
+        },
+        get expiry() {
+          return json.expires_in;
+        },
+        get id() {
+          if (!idTokenPayload)
+            return null;
+          return idTokenPayload;
+        },
+        get raw() {
+          return json;
+        }
+      }
+    });
+  }
   return {
     type: config.type || "oauth2",
     init(routes, ctx) {
@@ -37,43 +93,23 @@ function Oauth2Provider(config) {
         const error = c.req.query("error");
         if (error)
           throw new OauthError(error.toString(), c.req.query("error_description")?.toString() || "");
-        if (!provider || !code || provider.state && state !== provider.state)
+        if (!provider || !code || provider.state && state !== provider.state) {
           return c.redirect(getRelativeUrl(c, "./authorize"));
-        const body = new URLSearchParams({
-          client_id: config.clientID,
-          client_secret: config.clientSecret,
-          code,
-          grant_type: "authorization_code",
-          redirect_uri: provider.redirect,
-          ...provider.codeVerifier ? { code_verifier: provider.codeVerifier } : {}
-        });
-        const json = await fetch(config.endpoint.token, {
-          method: "POST",
-          headers: {
-            "Content-Type": "application/x-www-form-urlencoded",
-            Accept: "application/json"
-          },
-          body: body.toString()
-        }).then((r) => r.json());
-        if ("error" in json)
-          throw new OauthError(json.error, json.error_description);
-        return ctx.success(c, {
-          clientID: config.clientID,
-          tokenset: {
-            get access() {
-              return json.access_token;
-            },
-            get refresh() {
-              return json.refresh_token;
-            },
-            get expiry() {
-              return json.expires_in;
-            },
-            get raw() {
-              return json;
-            }
-          }
-        });
+        }
+        return handleCallbackLogic(c, ctx, provider, code);
+      });
+      routes.post("/callback", async (c) => {
+        const provider = await ctx.get(c, "provider");
+        const formData = await c.req.formData();
+        const code = formData.get("code")?.toString();
+        const state = formData.get("state")?.toString();
+        const error = formData.get("error")?.toString();
+        if (error)
+          throw new OauthError(error, formData.get("error_description")?.toString() || "");
+        if (!provider || !code || provider.state && state !== provider.state) {
+          return c.redirect(getRelativeUrl(c, "./authorize"));
+        }
+        return handleCallbackLogic(c, ctx, provider, code);
       });
     }
   };
diff --git a/dist/esm/storage/cloudflare.js b/dist/esm/storage/cloudflare.js
index da1680f81e1718274d1856be33de6492e7790f89..6240e7aa07d7057623d82dd5be8f198e3c4abc07 100644
--- a/dist/esm/storage/cloudflare.js
+++ b/dist/esm/storage/cloudflare.js
@@ -10,7 +10,7 @@ function CloudflareStorage(options) {
     },
     async set(key, value, expiry) {
       await options.namespace.put(joinKey(key), JSON.stringify(value), {
-        expirationTtl: expiry ? Math.floor((expiry.getTime() - Date.now()) / 1000) : undefined
+        expirationTtl: expiry ? Math.max(Math.floor((expiry.getTime() - Date.now()) / 1000), 60) : undefined
       });
     },
     async remove(key) {
diff --git a/dist/esm/ui/icon.js b/dist/esm/ui/icon.js
index be7340a71553ff7e33dc503d2ddcff10b6c7b324..d454d73a0da8fee5f7f0455d884685aea368591f 100644
--- a/dist/esm/ui/icon.js
+++ b/dist/esm/ui/icon.js
@@ -1,26 +1,41 @@
 // src/ui/icon.tsx
 import { jsxDEV } from "hono/jsx/jsx-dev-runtime";
-var ICON_GITHUB = (/* @__PURE__ */ jsxDEV("svg", {
-  viewBox: "0 0 15 15",
-  fill: "none",
+var ICON_GITHUB = /* @__PURE__ */ jsxDEV("svg", {
+  viewBox: "0 0 256 250",
+  width: "256",
+  height: "250",
+  fill: "currentColor",
   xmlns: "http://www.w3.org/2000/svg",
+  preserveAspectRatio: "xMidYMid",
   children: /* @__PURE__ */ jsxDEV("path", {
-    d: "M7.49933 0.25C3.49635 0.25 0.25 3.49593 0.25 7.50024C0.25 10.703 2.32715 13.4206 5.2081 14.3797C5.57084 14.446 5.70302 14.2222 5.70302 14.0299C5.70302 13.8576 5.69679 13.4019 5.69323 12.797C3.67661 13.235 3.25112 11.825 3.25112 11.825C2.92132 10.9874 2.44599 10.7644 2.44599 10.7644C1.78773 10.3149 2.49584 10.3238 2.49584 10.3238C3.22353 10.375 3.60629 11.0711 3.60629 11.0711C4.25298 12.1788 5.30335 11.8588 5.71638 11.6732C5.78225 11.205 5.96962 10.8854 6.17658 10.7043C4.56675 10.5209 2.87415 9.89918 2.87415 7.12104C2.87415 6.32925 3.15677 5.68257 3.62053 5.17563C3.54576 4.99226 3.29697 4.25521 3.69174 3.25691C3.69174 3.25691 4.30015 3.06196 5.68522 3.99973C6.26337 3.83906 6.8838 3.75895 7.50022 3.75583C8.1162 3.75895 8.73619 3.83906 9.31523 3.99973C10.6994 3.06196 11.3069 3.25691 11.3069 3.25691C11.7026 4.25521 11.4538 4.99226 11.3795 5.17563C11.8441 5.68257 12.1245 6.32925 12.1245 7.12104C12.1245 9.9063 10.4292 10.5192 8.81452 10.6985C9.07444 10.9224 9.30633 11.3648 9.30633 12.0413C9.30633 13.0102 9.29742 13.7922 9.29742 14.0299C9.29742 14.2239 9.42828 14.4496 9.79591 14.3788C12.6746 13.4179 14.75 10.7025 14.75 7.50024C14.75 3.49593 11.5036 0.25 7.49933 0.25Z",
-    fill: "currentColor",
-    "fill-rule": "evenodd",
-    "clip-rule": "evenodd"
+    d: "M128.001 0C57.317 0 0 57.307 0 128.001c0 56.554 36.676 104.535 87.535 121.46 6.397 1.185 8.746-2.777 8.746-6.158 0-3.052-.12-13.135-.174-23.83-35.61 7.742-43.124-15.103-43.124-15.103-5.823-14.795-14.213-18.73-14.213-18.73-11.613-7.944.876-7.78.876-7.78 12.853.902 19.621 13.19 19.621 13.19 11.417 19.568 29.945 13.911 37.249 10.64 1.149-8.272 4.466-13.92 8.127-17.116-28.431-3.236-58.318-14.212-58.318-63.258 0-13.975 5-25.394 13.188-34.358-1.329-3.224-5.71-16.242 1.24-33.874 0 0 10.749-3.44 35.21 13.121 10.21-2.836 21.16-4.258 32.038-4.307 10.878.049 21.837 1.47 32.066 4.307 24.431-16.56 35.165-13.12 35.165-13.12 6.967 17.63 2.584 30.65 1.255 33.873 8.207 8.964 13.173 20.383 13.173 34.358 0 49.163-29.944 59.988-58.447 63.157 4.591 3.972 8.682 11.762 8.682 23.704 0 17.126-.148 30.91-.148 35.126 0 3.407 2.304 7.398 8.792 6.14C219.37 232.5 256 184.537 256 128.002 256 57.307 198.691 0 128.001 0Zm-80.06 182.34c-.282.636-1.283.827-2.194.39-.929-.417-1.45-1.284-1.15-1.922.276-.655 1.279-.838 2.205-.399.93.418 1.46 1.293 1.139 1.931Zm6.296 5.618c-.61.566-1.804.303-2.614-.591-.837-.892-.994-2.086-.375-2.66.63-.566 1.787-.301 2.626.591.838.903 1 2.088.363 2.66Zm4.32 7.188c-.785.545-2.067.034-2.86-1.104-.784-1.138-.784-2.503.017-3.05.795-.547 2.058-.055 2.861 1.075.782 1.157.782 2.522-.019 3.08Zm7.304 8.325c-.701.774-2.196.566-3.29-.49-1.119-1.032-1.43-2.496-.726-3.27.71-.776 2.213-.558 3.315.49 1.11 1.03 1.45 2.505.701 3.27Zm9.442 2.81c-.31 1.003-1.75 1.459-3.199 1.033-1.448-.439-2.395-1.613-2.103-2.626.301-1.01 1.747-1.484 3.207-1.028 1.446.436 2.396 1.602 2.095 2.622Zm10.744 1.193c.036 1.055-1.193 1.93-2.715 1.95-1.53.034-2.769-.82-2.786-1.86 0-1.065 1.202-1.932 2.733-1.958 1.522-.03 2.768.818 2.768 1.868Zm10.555-.405c.182 1.03-.875 2.088-2.387 2.37-1.485.271-2.861-.365-3.05-1.386-.184-1.056.893-2.114 2.376-2.387 1.514-.263 2.868.356 3.061 1.403Z"
   }, undefined, false, undefined, this)
-}, undefined, false, undefined, this)).toString();
+}, undefined, false, undefined, this);
 var ICON_GOOGLE = /* @__PURE__ */ jsxDEV("svg", {
+  width: "256",
+  height: "262",
+  viewBox: "0 0 256 262",
   xmlns: "http://www.w3.org/2000/svg",
-  width: "24",
-  height: "24",
-  viewBox: "0 0 24 24",
-  children: /* @__PURE__ */ jsxDEV("path", {
-    fill: "currentColor",
-    d: "M11.99 13.9v-3.72h9.36c.14.63.25 1.22.25 2.05c0 5.71-3.83 9.77-9.6 9.77c-5.52 0-10-4.48-10-10S6.48 2 12 2c2.7 0 4.96.99 6.69 2.61l-2.84 2.76c-.72-.68-1.98-1.48-3.85-1.48c-3.31 0-6.01 2.75-6.01 6.12s2.7 6.12 6.01 6.12c3.83 0 5.24-2.65 5.5-4.22h-5.51z"
-  }, undefined, false, undefined, this)
-}, undefined, false, undefined, this);
+  preserveAspectRatio: "xMidYMid",
+  children: [
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027",
+      fill: "#4285F4"
+    }, undefined, false, undefined, this),
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1",
+      fill: "#34A853"
+    }, undefined, false, undefined, this),
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782",
+      fill: "#FBBC05"
+    }, undefined, false, undefined, this),
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251",
+      fill: "#EB4335"
+    }, undefined, false, undefined, this)
+  ]
+}, undefined, true, undefined, this);
 var ICON_EMAIL = /* @__PURE__ */ jsxDEV("svg", {
   xmlns: "http://www.w3.org/2000/svg",
   fill: "none",
diff --git a/dist/esm/ui/select.js b/dist/esm/ui/select.js
index 35cf467b740150dbf8d1b6c325b2c9a0261ed313..945ed53b5eb4fd3831fa21712974827f574bc82d 100644
--- a/dist/esm/ui/select.js
+++ b/dist/esm/ui/select.js
@@ -1,5 +1,7 @@
 // src/ui/select.tsx
+import { basePath } from "../issuer.js";
 import { Layout } from "./base.js";
+import { ICON_GITHUB, ICON_GOOGLE } from "./icon.js";
 import { jsxDEV } from "hono/jsx/jsx-dev-runtime";
 function Select(props) {
   return async (providers, _req) => {
@@ -12,7 +14,7 @@ function Select(props) {
             return;
           const icon = ICON[key];
           return /* @__PURE__ */ jsxDEV("a", {
-            href: `/${key}/authorize`,
+            href: `${basePath ? basePath : ""}/${key}/authorize`,
             "data-component": "button",
             "data-color": "ghost",
             children: [
@@ -74,24 +76,8 @@ var ICON = {
       d: "M40.1 32L10 108.9v314.3h107V480h60.2l56.8-56.8h87l117-117V32H40.1zm357.8 254.1L331 353H224l-56.8 56.8V353H76.9V72.1h321v214zM331 149v116.9h-40.1V149H331zm-107 0v116.9h-40.1V149H224z"
     }, undefined, false, undefined, this)
   }, undefined, false, undefined, this),
-  google: /* @__PURE__ */ jsxDEV("svg", {
-    role: "img",
-    xmlns: "http://www.w3.org/2000/svg",
-    viewBox: "0 0 488 512",
-    children: /* @__PURE__ */ jsxDEV("path", {
-      fill: "currentColor",
-      d: "M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z"
-    }, undefined, false, undefined, this)
-  }, undefined, false, undefined, this),
-  github: /* @__PURE__ */ jsxDEV("svg", {
-    role: "img",
-    xmlns: "http://www.w3.org/2000/svg",
-    viewBox: "0 0 496 512",
-    children: /* @__PURE__ */ jsxDEV("path", {
-      fill: "currentColor",
-      d: "M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
-    }, undefined, false, undefined, this)
-  }, undefined, false, undefined, this),
+  google: ICON_GOOGLE,
+  github: ICON_GITHUB,
   apple: /* @__PURE__ */ jsxDEV("svg", {
     role: "img",
     xmlns: "http://www.w3.org/2000/svg",
diff --git a/dist/types/issuer.d.ts b/dist/types/issuer.d.ts
index 904bb5a4c84e7ebd410cdcfd2fb43bb30aa93549..284af9808df41938d033adc4be7226c6ec81c637 100644
--- a/dist/types/issuer.d.ts
+++ b/dist/types/issuer.d.ts
@@ -126,6 +126,7 @@
  */
 import { Provider } from "./provider/provider.js";
 import { SubjectPayload, SubjectSchema } from "./subject.js";
+import { Hono } from "hono/tiny";
 /**
  * Sets the subject payload in the JWT token and returns the response.
  *
@@ -180,11 +181,44 @@ import { StorageAdapter } from "./storage/storage.js";
 import { Theme } from "./ui/theme.js";
 /** @internal */
 export declare const aws: <E extends import("hono").Env = import("hono").Env, S extends import("hono").Schema = {}, BasePath extends string = "/">(app: import("hono").Hono<E, S, BasePath>) => ((event: import("hono/aws-lambda").LambdaEvent, lambdaContext?: import("hono/aws-lambda").LambdaContext) => Promise<import("hono/aws-lambda").APIGatewayProxyResult>);
+/**
+ * @internal
+ */
+export declare let basePath: string | undefined;
 export interface IssuerInput<Providers extends Record<string, Provider<any>>, Subjects extends SubjectSchema, Result = {
     [key in keyof Providers]: Prettify<{
         provider: key;
     } & (Providers[key] extends Provider<infer T> ? T : {})>;
 }[keyof Providers]> {
+    /**
+     * With `basePath`, OpenAuth can be mounted on any sub-path of a domain.
+     * This means OpenAuth can be nested in a larger app.
+     *
+     * :::caution
+     * The Well-Known endpoints still need to be at the root of the domain.
+     * You need to perform a proxy pass to the OpenAuth server for `/.well-known/oauth-authorization-server` and `/.well-known/jwks.json`.
+     *
+     * **Example:**<br/>
+     * If you mount OpenAuth at `/auth`, `/.well-known/oauth-authorization-server` and `/.well-known/jwks.json` need to be proxied to `/auth/.well-known/oauth-authorization-server` and `/auth/.well-known/jwks.json`.
+     * :::
+     *
+     * @example
+     * ```ts title="issuer.ts"
+     * issuer({
+     *   basePath: "/auth",
+     *   // ...
+     * })
+     * ```
+     *
+     * The base path needs to be reflected in the issuer url for the client:
+     * ```ts title="client.ts"
+     * const client = createClient({
+     *   issuer: "https://example.com/auth", // if OpenAuth is mounted at `/authpath`
+     *   clientID: "123",
+     * })
+     * ```
+     */
+    basePath?: string;
     /**
      * The shape of the subjects that you want to return.
      *
@@ -405,7 +439,7 @@ export declare function issuer<Providers extends Record<string, Provider<any>>,
     [key in keyof Providers]: Prettify<{
         provider: key;
     } & (Providers[key] extends Provider<infer T> ? T : {})>;
-}[keyof Providers]>(input: IssuerInput<Providers, Subjects, Result>): import("hono/hono-base").HonoBase<{
+}[keyof Providers]>(input: IssuerInput<Providers, Subjects, Result>): Hono<{
     Variables: {
         authorization: AuthorizationState;
     };
diff --git a/dist/types/issuer.d.ts.map b/dist/types/issuer.d.ts.map
index e72cc33edc482b42e58aa0319004430833c97740..f35d2d35827328e0c4df711d11d5c54f9f5bb19c 100644
--- a/dist/types/issuer.d.ts.map
+++ b/dist/types/issuer.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"issuer.d.ts","sourceRoot":"","sources":["../../src/issuer.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"issuer.d.ts","sourceRoot":"","sources":["../../src/issuer.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types/provider/apple.d.ts b/dist/types/provider/apple.d.ts
index 69b1c7b7e71f465c018911f20053ec06a6d47d16..cf74297b85992f4d618e49df77c7396996a32d1c 100644
--- a/dist/types/provider/apple.d.ts
+++ b/dist/types/provider/apple.d.ts
@@ -16,6 +16,24 @@
  * })
  * ```
  *
+ * #### Using OAuth with form_post response mode
+ *
+ * When requesting name or email scopes from Apple, you must use form_post response mode:
+ *
+ * ```ts {5-9}
+ * import { AppleProvider } from "@openauthjs/openauth/provider/apple"
+ *
+ * export default issuer({
+ *   providers: {
+ *     apple: AppleProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321",
+ *       responseMode: "form_post"
+ *     })
+ *   }
+ * })
+ * ```
+ *
  * #### Using OIDC
  *
  * ```ts {5-7}
@@ -35,6 +53,12 @@
 import { Oauth2WrappedConfig } from "./oauth2.js";
 import { OidcWrappedConfig } from "./oidc.js";
 export interface AppleConfig extends Oauth2WrappedConfig {
+    /**
+     * The response mode to use for the authorization request.
+     * Apple requires 'form_post' response mode when requesting name or email scopes.
+     * @default "query"
+     */
+    responseMode?: "query" | "form_post";
 }
 export interface AppleOidcConfig extends OidcWrappedConfig {
 }
@@ -44,10 +68,20 @@ export interface AppleOidcConfig extends OidcWrappedConfig {
  * @param config - The config for the provider.
  * @example
  * ```ts
+ * // Using default query response mode (GET callback)
  * AppleProvider({
  *   clientID: "1234567890",
  *   clientSecret: "0987654321"
  * })
+ *
+ * // Using form_post response mode (POST callback)
+ * // Required when requesting name or email scope
+ * AppleProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321",
+ *   responseMode: "form_post",
+ *   scopes: ["name", "email"]
+ * })
  * ```
  */
 export declare function AppleProvider(config: AppleConfig): import("./provider.js").Provider<{
diff --git a/dist/types/provider/apple.d.ts.map b/dist/types/provider/apple.d.ts.map
index d3bcad06aa6dca8fd9777edf83bb04243fe51da0..391b0f240024b77e75550f6173c1b7b0b8e30e25 100644
--- a/dist/types/provider/apple.d.ts.map
+++ b/dist/types/provider/apple.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"apple.d.ts","sourceRoot":"","sources":["../../../src/provider/apple.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,WAAY,SAAQ,mBAAmB;CAAG;AAC3D,MAAM,WAAW,eAAgB,SAAQ,iBAAiB;CAAG;AAE7D;;;;;;;;;;;GAWG;AACH,wBAAgB,aAAa,CAAC,MAAM,EAAE,WAAW;;;GAShD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,iBAAiB,CAAC,MAAM,EAAE,eAAe;;;GAMxD"}
\ No newline at end of file
+{"version":3,"file":"apple.d.ts","sourceRoot":"","sources":["../../../src/provider/apple.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmDG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,WAAY,SAAQ,mBAAmB;IACtD;;;;OAIG;IACH,YAAY,CAAC,EAAE,OAAO,GAAG,WAAW,CAAA;CACrC;AACD,MAAM,WAAW,eAAgB,SAAQ,iBAAiB;CAAG;AAE7D;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,wBAAgB,aAAa,CAAC,MAAM,EAAE,WAAW;;;GAiBhD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,iBAAiB,CAAC,MAAM,EAAE,eAAe;;;GAMxD"}
\ No newline at end of file
diff --git a/dist/types/provider/google.d.ts.map b/dist/types/provider/google.d.ts.map
index c1b57994294005a5900f00723436f4b49a3a64b3..4adcb6816a7f959fccecaee1494d716ffbfd4db5 100644
--- a/dist/types/provider/google.d.ts.map
+++ b/dist/types/provider/google.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"google.d.ts","sourceRoot":"","sources":["../../../src/provider/google.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,YAAa,SAAQ,mBAAmB;CAAG;AAC5D,MAAM,WAAW,gBAAiB,SAAQ,iBAAiB;CAAG;AAE9D;;;;;;;;;;;GAWG;AACH,wBAAgB,cAAc,CAAC,MAAM,EAAE,YAAY;;;GASlD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,kBAAkB,CAAC,MAAM,EAAE,gBAAgB;;;GAM1D"}
\ No newline at end of file
+{"version":3,"file":"google.d.ts","sourceRoot":"","sources":["../../../src/provider/google.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,YAAa,SAAQ,mBAAmB;CAAG;AAC5D,MAAM,WAAW,gBAAiB,SAAQ,iBAAiB;CAAG;AAE9D;;;;;;;;;;;GAWG;AACH,wBAAgB,cAAc,CAAC,MAAM,EAAE,YAAY;;;GAUlD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,kBAAkB,CAAC,MAAM,EAAE,gBAAgB;;;GAM1D"}
\ No newline at end of file
diff --git a/dist/types/provider/linkedin.d.ts b/dist/types/provider/linkedin.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f3399b6acf367c5d2cad4364bb829b85a9ea7d1d
--- /dev/null
+++ b/dist/types/provider/linkedin.d.ts
@@ -0,0 +1,6 @@
+import { type Oauth2WrappedConfig } from "./oauth2.js";
+export declare function LinkedInAdapter(config: Oauth2WrappedConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=linkedin.d.ts.map
\ No newline at end of file
diff --git a/dist/types/provider/linkedin.d.ts.map b/dist/types/provider/linkedin.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..af8398ed914e582fa37f01f8fe8b8f2663b2acee
--- /dev/null
+++ b/dist/types/provider/linkedin.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"linkedin.d.ts","sourceRoot":"","sources":["../../../src/provider/linkedin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,KAAK,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEtE,wBAAgB,eAAe,CAAC,MAAM,EAAE,mBAAmB;;;GAS1D"}
\ No newline at end of file
diff --git a/dist/types/provider/oauth2.d.ts b/dist/types/provider/oauth2.d.ts
index 58fd4130e4bca42951bf40c2e87c1a32a5a1c768..d7ca8f47cf8621a646a64fe9e971c2281dc855a5 100644
--- a/dist/types/provider/oauth2.d.ts
+++ b/dist/types/provider/oauth2.d.ts
@@ -61,7 +61,8 @@ export interface Oauth2Config {
      * {
      *   endpoint: {
      *     authorization: "https://auth.myserver.com/authorize",
-     *     token: "https://auth.myserver.com/token"
+     *     token: "https://auth.myserver.com/token",
+     *     jwks: "https://auth.myserver.com/auth/keys"
      *   }
      * }
      * ```
@@ -75,6 +76,10 @@ export interface Oauth2Config {
          * The URL of the token endpoint.
          */
         token: string;
+        /**
+         * The URL of the JWKS endpoint.
+         */
+        jwks?: string;
     };
     /**
      * A list of OAuth scopes that you want to request.
@@ -118,6 +123,7 @@ export interface Oauth2Token {
     access: string;
     refresh: string;
     expiry: number;
+    id?: Record<string, any>;
     raw: Record<string, any>;
 }
 export declare function Oauth2Provider(config: Oauth2Config): Provider<{
diff --git a/dist/types/provider/oauth2.d.ts.map b/dist/types/provider/oauth2.d.ts.map
index 0ece4f9e266edc67b3f2c47982115cfd2bfc40cd..0f0a5ea258ca6cc8ba12a113e21f5ef2440da29f 100644
--- a/dist/types/provider/oauth2.d.ts.map
+++ b/dist/types/provider/oauth2.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"oauth2.d.ts","sourceRoot":"","sources":["../../../src/provider/oauth2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAKH,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAExC,MAAM,WAAW,YAAY;IAC3B;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAA;IACb;;;;;;;;;;;OAWG;IACH,QAAQ,EAAE,MAAM,CAAA;IAChB;;;;;;;;;;;OAWG;IACH,YAAY,EAAE,MAAM,CAAA;IACpB;;;;;;;;;;;;OAYG;IACH,QAAQ,EAAE;QACR;;WAEG;QACH,aAAa,EAAE,MAAM,CAAA;QACrB;;WAEG;QACH,KAAK,EAAE,MAAM,CAAA;KACd,CAAA;IACD;;;;;;;;;OASG;IACH,MAAM,EAAE,MAAM,EAAE,CAAA;IAChB;;;;OAIG;IACH,IAAI,CAAC,EAAE,OAAO,CAAA;IACd;;;;;;;;;;;OAWG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;CAC/B;AAED;;GAEG;AACH,MAAM,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,EAAE,UAAU,GAAG,MAAM,CAAC,CAAA;AAEzE;;GAEG;AACH,MAAM,WAAW,WAAW;IAC1B,MAAM,EAAE,MAAM,CAAA;IACd,OAAO,EAAE,MAAM,CAAA;IACf,MAAM,EAAE,MAAM,CAAA;IACd,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;CACzB;AAQD,wBAAgB,cAAc,CAC5B,MAAM,EAAE,YAAY,GACnB,QAAQ,CAAC;IAAE,QAAQ,EAAE,WAAW,CAAC;IAAC,QAAQ,EAAE,MAAM,CAAA;CAAE,CAAC,CAoFvD"}
\ No newline at end of file
+{"version":3,"file":"oauth2.d.ts","sourceRoot":"","sources":["../../../src/provider/oauth2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAMH,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAExC,MAAM,WAAW,YAAY;IAC3B;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAA;IACb;;;;;;;;;;;OAWG;IACH,QAAQ,EAAE,MAAM,CAAA;IAChB;;;;;;;;;;;OAWG;IACH,YAAY,EAAE,MAAM,CAAA;IACpB;;;;;;;;;;;;;OAaG;IACH,QAAQ,EAAE;QACR;;WAEG;QACH,aAAa,EAAE,MAAM,CAAA;QACrB;;WAEG;QACH,KAAK,EAAE,MAAM,CAAA;QACb;;WAEG;QACH,IAAI,CAAC,EAAE,MAAM,CAAA;KACd,CAAA;IACD;;;;;;;;;OASG;IACH,MAAM,EAAE,MAAM,EAAE,CAAA;IAChB;;;;OAIG;IACH,IAAI,CAAC,EAAE,OAAO,CAAA;IACd;;;;;;;;;;;OAWG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;CAC/B;AAED;;GAEG;AACH,MAAM,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,EAAE,UAAU,GAAG,MAAM,CAAC,CAAA;AAEzE;;GAEG;AACH,MAAM,WAAW,WAAW;IAC1B,MAAM,EAAE,MAAM,CAAA;IACd,OAAO,EAAE,MAAM,CAAA;IACf,MAAM,EAAE,MAAM,CAAA;IACd,EAAE,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;IACxB,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;CACzB;AAQD,wBAAgB,cAAc,CAC5B,MAAM,EAAE,YAAY,GACnB,QAAQ,CAAC;IAAE,QAAQ,EAAE,WAAW,CAAC;IAAC,QAAQ,EAAE,MAAM,CAAA;CAAE,CAAC,CAuJvD"}
\ No newline at end of file
diff --git a/dist/types/ui/icon.d.ts b/dist/types/ui/icon.d.ts
index f59fe9576139e2376d09adc9d851aae420393e67..14fe2717ffc71221a71541062c135e403cc1283b 100644
--- a/dist/types/ui/icon.d.ts
+++ b/dist/types/ui/icon.d.ts
@@ -1,5 +1,5 @@
 /** @jsxImportSource hono/jsx */
-export declare const ICON_GITHUB: string;
+export declare const ICON_GITHUB: import("hono/jsx/jsx-dev-runtime").JSX.Element;
 export declare const ICON_GOOGLE: import("hono/jsx/jsx-dev-runtime").JSX.Element;
 export declare const ICON_EMAIL: import("hono/jsx/jsx-dev-runtime").JSX.Element;
 export declare const ICON_SLACK: import("hono/jsx/jsx-dev-runtime").JSX.Element;
diff --git a/dist/types/ui/icon.d.ts.map b/dist/types/ui/icon.d.ts.map
index b253c690ad90067be60f2649538339c4b2a52404..2795a64ad3b2171e02f1e082028aa78260c3a1d7 100644
--- a/dist/types/ui/icon.d.ts.map
+++ b/dist/types/ui/icon.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"icon.d.ts","sourceRoot":"","sources":["../../../src/ui/icon.tsx"],"names":[],"mappings":"AAAA,gCAAgC;AAEhC,eAAO,MAAM,WAAW,QASZ,CAAA;AAEZ,eAAO,MAAM,WAAW,gDAYvB,CAAA;AAED,eAAO,MAAM,UAAU,gDAetB,CAAA;AAED,eAAO,MAAM,UAAU,gDAmCtB,CAAA"}
\ No newline at end of file
+{"version":3,"file":"icon.d.ts","sourceRoot":"","sources":["../../../src/ui/icon.tsx"],"names":[],"mappings":"AAAA,gCAAgC;AAEhC,eAAO,MAAM,WAAW,gDAWvB,CAAA;AAED,eAAO,MAAM,WAAW,gDAyBvB,CAAA;AAED,eAAO,MAAM,UAAU,gDAetB,CAAA;AAED,eAAO,MAAM,UAAU,gDAmCtB,CAAA"}
\ No newline at end of file
diff --git a/dist/types/ui/select.d.ts.map b/dist/types/ui/select.d.ts.map
index 78c4aa2b2ca89bc6b1b7d0e7849dddb9da27409e..a742fd84960aa7c4dc844665e03b2e9c932c456b 100644
--- a/dist/types/ui/select.d.ts.map
+++ b/dist/types/ui/select.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"select.d.ts","sourceRoot":"","sources":["../../../src/ui/select.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,gCAAgC;AAIhC,MAAM,WAAW,WAAW;IAC1B;;;;;;;;;;;;;;OAcG;IACH,SAAS,CAAC,EAAE,MAAM,CAChB,MAAM,EACN;QACE;;;WAGG;QACH,IAAI,CAAC,EAAE,OAAO,CAAA;QACd;;WAEG;QACH,OAAO,CAAC,EAAE,MAAM,CAAA;KACjB,CACF,CAAA;CACF;AAED,wBAAgB,MAAM,CAAC,KAAK,CAAC,EAAE,WAAW,eAE3B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,QAC3B,OAAO,KACZ,OAAO,CAAC,QAAQ,CAAC,CA6BrB"}
\ No newline at end of file
+{"version":3,"file":"select.d.ts","sourceRoot":"","sources":["../../../src/ui/select.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,gCAAgC;AAMhC,MAAM,WAAW,WAAW;IAC1B;;;;;;;;;;;;;;OAcG;IACH,SAAS,CAAC,EAAE,MAAM,CAChB,MAAM,EACN;QACE;;;WAGG;QACH,IAAI,CAAC,EAAE,OAAO,CAAA;QACd;;WAEG;QACH,OAAO,CAAC,EAAE,MAAM,CAAA;KACjB,CACF,CAAA;CACF;AAED,wBAAgB,MAAM,CAAC,KAAK,CAAC,EAAE,WAAW,eAE3B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,QAC3B,OAAO,KACZ,OAAO,CAAC,QAAQ,CAAC,CA6BrB"}
\ No newline at end of file
diff --git a/src/client.ts b/src/client.ts
index c4e282a3cb963a1200ba0fc6e9b98df469ecc0f6..7ef8ee9d33440e80edecaf8f4d1b914986b62166 100644
--- a/src/client.ts
+++ b/src/client.ts
@@ -555,7 +555,7 @@ export function createClient(input: ClientInput): Client {
     const cached = issuerCache.get(issuer!)
     if (cached) return cached
     const wellKnown = (await (f || fetch)(
-      `${issuer}/.well-known/oauth-authorization-server`,
+      new URL("/.well-known/oauth-authorization-server", issuer).toString(),
     ).then((r) => r.json())) as WellKnown
     issuerCache.set(issuer!, wellKnown)
     return wellKnown
diff --git a/src/dist/esm/client.js b/src/dist/esm/client.js
new file mode 100644
index 0000000000000000000000000000000000000000..a1202b433d1d8398489eecb543ec6405e432d146
--- /dev/null
+++ b/src/dist/esm/client.js
@@ -0,0 +1,186 @@
+// src/client.ts
+import {
+  createLocalJWKSet,
+  errors,
+  jwtVerify,
+  decodeJwt
+} from "jose";
+import {
+  InvalidAccessTokenError,
+  InvalidAuthorizationCodeError,
+  InvalidRefreshTokenError,
+  InvalidSubjectError
+} from "./error.js";
+import { generatePKCE } from "./pkce.js";
+function createClient(input) {
+  const jwksCache = new Map;
+  const issuerCache = new Map;
+  const issuer = input.issuer || process.env.OPENAUTH_ISSUER;
+  if (!issuer)
+    throw new Error("No issuer");
+  const f = input.fetch ?? fetch;
+  async function getIssuer() {
+    const cached = issuerCache.get(issuer);
+    if (cached)
+      return cached;
+    const wellKnown = await (f || fetch)(new URL("/.well-known/oauth-authorization-server", issuer).toString()).then((r) => r.json());
+    issuerCache.set(issuer, wellKnown);
+    return wellKnown;
+  }
+  async function getJWKS() {
+    const wk = await getIssuer();
+    const cached = jwksCache.get(issuer);
+    if (cached)
+      return cached;
+    const keyset = await (f || fetch)(wk.jwks_uri).then((r) => r.json());
+    const result2 = createLocalJWKSet(keyset);
+    jwksCache.set(issuer, result2);
+    return result2;
+  }
+  const result = {
+    async authorize(redirectURI, response, opts) {
+      const result2 = new URL(issuer + "/authorize");
+      const challenge = {
+        state: crypto.randomUUID()
+      };
+      result2.searchParams.set("client_id", input.clientID);
+      result2.searchParams.set("redirect_uri", redirectURI);
+      result2.searchParams.set("response_type", response);
+      result2.searchParams.set("state", challenge.state);
+      if (opts?.provider)
+        result2.searchParams.set("provider", opts.provider);
+      if (opts?.pkce && response === "code") {
+        const pkce = await generatePKCE();
+        result2.searchParams.set("code_challenge_method", "S256");
+        result2.searchParams.set("code_challenge", pkce.challenge);
+        challenge.verifier = pkce.verifier;
+      }
+      return {
+        challenge,
+        url: result2.toString()
+      };
+    },
+    async pkce(redirectURI, opts) {
+      const result2 = new URL(issuer + "/authorize");
+      if (opts?.provider)
+        result2.searchParams.set("provider", opts.provider);
+      result2.searchParams.set("client_id", input.clientID);
+      result2.searchParams.set("redirect_uri", redirectURI);
+      result2.searchParams.set("response_type", "code");
+      const pkce = await generatePKCE();
+      result2.searchParams.set("code_challenge_method", "S256");
+      result2.searchParams.set("code_challenge", pkce.challenge);
+      return [pkce.verifier, result2.toString()];
+    },
+    async exchange(code, redirectURI, verifier) {
+      const tokens = await f(issuer + "/token", {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/x-www-form-urlencoded"
+        },
+        body: new URLSearchParams({
+          code,
+          redirect_uri: redirectURI,
+          grant_type: "authorization_code",
+          client_id: input.clientID,
+          code_verifier: verifier || ""
+        }).toString()
+      });
+      const json = await tokens.json();
+      if (!tokens.ok) {
+        return {
+          err: new InvalidAuthorizationCodeError
+        };
+      }
+      return {
+        err: false,
+        tokens: {
+          access: json.access_token,
+          refresh: json.refresh_token,
+          expiresIn: json.expires_in
+        }
+      };
+    },
+    async refresh(refresh, opts) {
+      if (opts && opts.access) {
+        const decoded = decodeJwt(opts.access);
+        if (!decoded) {
+          return {
+            err: new InvalidAccessTokenError
+          };
+        }
+        if ((decoded.exp || 0) > Date.now() / 1000 + 30) {
+          return {
+            err: false
+          };
+        }
+      }
+      const tokens = await f(issuer + "/token", {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/x-www-form-urlencoded"
+        },
+        body: new URLSearchParams({
+          grant_type: "refresh_token",
+          refresh_token: refresh
+        }).toString()
+      });
+      const json = await tokens.json();
+      if (!tokens.ok) {
+        return {
+          err: new InvalidRefreshTokenError
+        };
+      }
+      return {
+        err: false,
+        tokens: {
+          access: json.access_token,
+          refresh: json.refresh_token,
+          expiresIn: json.expires_in
+        }
+      };
+    },
+    async verify(subjects, token, options) {
+      const jwks = await getJWKS();
+      try {
+        const result2 = await jwtVerify(token, jwks, {
+          issuer
+        });
+        const validated = await subjects[result2.payload.type]["~standard"].validate(result2.payload.properties);
+        if (!validated.issues && result2.payload.mode === "access")
+          return {
+            aud: result2.payload.aud,
+            subject: {
+              type: result2.payload.type,
+              properties: validated.value
+            }
+          };
+        return {
+          err: new InvalidSubjectError
+        };
+      } catch (e) {
+        if (e instanceof errors.JWTExpired && options?.refresh) {
+          const refreshed = await this.refresh(options.refresh);
+          if (refreshed.err)
+            return refreshed;
+          const verified = await result.verify(subjects, refreshed.tokens.access, {
+            refresh: refreshed.tokens.refresh,
+            issuer,
+            fetch: options?.fetch
+          });
+          if (verified.err)
+            return verified;
+          verified.tokens = refreshed.tokens;
+          return verified;
+        }
+        return {
+          err: new InvalidAccessTokenError
+        };
+      }
+    }
+  };
+  return result;
+}
+export {
+  createClient
+};
diff --git a/src/dist/esm/css.d.js b/src/dist/esm/css.d.js
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/src/dist/esm/error.js b/src/dist/esm/error.js
new file mode 100644
index 0000000000000000000000000000000000000000..36b906805c3be47df29453901cd830077ee7f18c
--- /dev/null
+++ b/src/dist/esm/error.js
@@ -0,0 +1,73 @@
+// src/error.ts
+class OauthError extends Error {
+  error;
+  description;
+  constructor(error, description) {
+    super(error + " - " + description);
+    this.error = error;
+    this.description = description;
+  }
+}
+
+class MissingProviderError extends OauthError {
+  constructor() {
+    super("invalid_request", "Must specify `provider` query parameter if `select` callback on issuer is not specified");
+  }
+}
+
+class MissingParameterError extends OauthError {
+  parameter;
+  constructor(parameter) {
+    super("invalid_request", "Missing parameter: " + parameter);
+    this.parameter = parameter;
+  }
+}
+
+class UnauthorizedClientError extends OauthError {
+  clientID;
+  constructor(clientID, redirectURI) {
+    super("unauthorized_client", `Client ${clientID} is not authorized to use this redirect_uri: ${redirectURI}`);
+    this.clientID = clientID;
+  }
+}
+
+class UnknownStateError extends Error {
+  constructor() {
+    super("The browser was in an unknown state. This could be because certain cookies expired or the browser was switched in the middle of an authentication flow.");
+  }
+}
+
+class InvalidSubjectError extends Error {
+  constructor() {
+    super("Invalid subject");
+  }
+}
+
+class InvalidRefreshTokenError extends Error {
+  constructor() {
+    super("Invalid refresh token");
+  }
+}
+
+class InvalidAccessTokenError extends Error {
+  constructor() {
+    super("Invalid access token");
+  }
+}
+
+class InvalidAuthorizationCodeError extends Error {
+  constructor() {
+    super("Invalid authorization code");
+  }
+}
+export {
+  UnknownStateError,
+  UnauthorizedClientError,
+  OauthError,
+  MissingProviderError,
+  MissingParameterError,
+  InvalidSubjectError,
+  InvalidRefreshTokenError,
+  InvalidAuthorizationCodeError,
+  InvalidAccessTokenError
+};
diff --git a/src/dist/esm/index.js b/src/dist/esm/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..0aea78214b56d7e1900c1d82c81b33f601e3c728
--- /dev/null
+++ b/src/dist/esm/index.js
@@ -0,0 +1,14 @@
+// src/index.ts
+import {
+  createClient
+} from "./client.js";
+import {
+  createSubjects
+} from "./subject.js";
+import { issuer } from "./issuer.js";
+export {
+  issuer,
+  createSubjects,
+  createClient,
+  issuer as authorizer
+};
diff --git a/src/dist/esm/issuer.js b/src/dist/esm/issuer.js
new file mode 100644
index 0000000000000000000000000000000000000000..dc6c2040dc2c7acae004bc1deb2c3d33fb6068a2
--- /dev/null
+++ b/src/dist/esm/issuer.js
@@ -0,0 +1,507 @@
+// src/issuer.ts
+import { Hono } from "hono/tiny";
+import { handle as awsHandle } from "hono/aws-lambda";
+import { deleteCookie, getCookie, setCookie } from "hono/cookie";
+import {
+  MissingParameterError,
+  OauthError,
+  UnauthorizedClientError,
+  UnknownStateError
+} from "./error.js";
+import { compactDecrypt, CompactEncrypt, jwtVerify, SignJWT } from "jose";
+import { Storage } from "./storage/storage.js";
+import { encryptionKeys, legacySigningKeys, signingKeys } from "./keys.js";
+import { validatePKCE } from "./pkce.js";
+import { Select } from "./ui/select.js";
+import { setTheme } from "./ui/theme.js";
+import { getRelativeUrl, isDomainMatch, lazy } from "./util.js";
+import { DynamoStorage } from "./storage/dynamo.js";
+import { MemoryStorage } from "./storage/memory.js";
+import { cors } from "hono/cors";
+import { createMiddleware } from "hono/factory";
+var aws = awsHandle;
+var basePath = undefined;
+function issuer(input) {
+  basePath = input.basePath;
+  basePath = basePath?.replace(/\/$/, "");
+  const error = input.error ?? function(err) {
+    return new Response(err.message, {
+      status: 400,
+      headers: {
+        "Content-Type": "text/plain"
+      }
+    });
+  };
+  const ttlAccess = input.ttl?.access ?? 60 * 60 * 24 * 30;
+  const ttlRefresh = input.ttl?.refresh ?? 60 * 60 * 24 * 365;
+  const ttlRefreshReuse = input.ttl?.reuse ?? 60;
+  const ttlRefreshRetention = input.ttl?.retention ?? 0;
+  if (input.theme) {
+    setTheme(input.theme);
+  }
+  const select = lazy(() => input.select ?? Select());
+  const allow = lazy(() => input.allow ?? (async (input2, req) => {
+    const redir = new URL(input2.redirectURI).hostname;
+    if (redir === "localhost" || redir === "127.0.0.1") {
+      return true;
+    }
+    const forwarded = req.headers.get("x-forwarded-host");
+    const host = forwarded ? new URL(`https://${forwarded}`).hostname : new URL(req.url).hostname;
+    return isDomainMatch(redir, host);
+  }));
+  let storage = input.storage;
+  if (process.env.OPENAUTH_STORAGE) {
+    const parsed = JSON.parse(process.env.OPENAUTH_STORAGE);
+    if (parsed.type === "dynamo")
+      storage = DynamoStorage(parsed.options);
+    if (parsed.type === "memory")
+      storage = MemoryStorage();
+    if (parsed.type === "cloudflare")
+      throw new Error("Cloudflare storage cannot be configured through env because it requires bindings.");
+  }
+  if (!storage)
+    throw new Error("Store is not configured. Either set the `storage` option or set `OPENAUTH_STORAGE` environment variable.");
+  const allSigning = lazy(() => Promise.all([signingKeys(storage), legacySigningKeys(storage)]).then(([a, b]) => [...a, ...b]));
+  const allEncryption = lazy(() => encryptionKeys(storage));
+  const signingKey = lazy(() => allSigning().then((all) => all[0]));
+  const encryptionKey = lazy(() => allEncryption().then((all) => all[0]));
+  const auth = {
+    async success(ctx, properties, successOpts) {
+      return await input.success({
+        async subject(type, properties2, subjectOpts) {
+          const authorization = await getAuthorization(ctx);
+          const subject = subjectOpts?.subject ? subjectOpts.subject : await resolveSubject(type, properties2);
+          await successOpts?.invalidate?.(await resolveSubject(type, properties2));
+          if (authorization.response_type === "token") {
+            const location = new URL(authorization.redirect_uri);
+            const tokens = await generateTokens(ctx, {
+              subject,
+              type,
+              properties: properties2,
+              clientID: authorization.client_id,
+              ttl: {
+                access: subjectOpts?.ttl?.access ?? ttlAccess,
+                refresh: subjectOpts?.ttl?.refresh ?? ttlRefresh
+              }
+            });
+            location.hash = new URLSearchParams({
+              access_token: tokens.access,
+              refresh_token: tokens.refresh,
+              state: authorization.state || ""
+            }).toString();
+            await auth.unset(ctx, "authorization");
+            return ctx.redirect(location.toString(), 302);
+          }
+          if (authorization.response_type === "code") {
+            const code = crypto.randomUUID();
+            await Storage.set(storage, ["oauth:code", code], {
+              type,
+              properties: properties2,
+              subject,
+              redirectURI: authorization.redirect_uri,
+              clientID: authorization.client_id,
+              pkce: authorization.pkce,
+              ttl: {
+                access: subjectOpts?.ttl?.access ?? ttlAccess,
+                refresh: subjectOpts?.ttl?.refresh ?? ttlRefresh
+              }
+            }, 60);
+            const location = new URL(authorization.redirect_uri);
+            location.searchParams.set("code", code);
+            location.searchParams.set("state", authorization.state || "");
+            await auth.unset(ctx, "authorization");
+            return ctx.redirect(location.toString(), 302);
+          }
+          throw new OauthError("invalid_request", `Unsupported response_type: ${authorization.response_type}`);
+        }
+      }, {
+        provider: ctx.get("provider"),
+        ...properties
+      }, ctx.req.raw);
+    },
+    forward(ctx, response) {
+      return ctx.newResponse(response.body, response.status, Object.fromEntries(response.headers.entries()));
+    },
+    async set(ctx, key, maxAge, value) {
+      setCookie(ctx, key, await encrypt(value), {
+        maxAge,
+        httpOnly: true,
+        ...ctx.req.url.startsWith("https://") ? { secure: true, sameSite: "None" } : {}
+      });
+    },
+    async get(ctx, key) {
+      const raw = getCookie(ctx, key);
+      if (!raw)
+        return;
+      return decrypt(raw).catch((ex) => {
+        console.error("failed to decrypt", key, ex);
+      });
+    },
+    async unset(ctx, key) {
+      deleteCookie(ctx, key);
+    },
+    async invalidate(subject) {
+      const keys = await Array.fromAsync(Storage.scan(this.storage, ["oauth:refresh", subject]));
+      for (const [key] of keys) {
+        await Storage.remove(this.storage, key);
+      }
+    },
+    storage
+  };
+  async function getAuthorization(ctx) {
+    const match = await auth.get(ctx, "authorization") || ctx.get("authorization");
+    if (!match)
+      throw new UnknownStateError;
+    return match;
+  }
+  async function encrypt(value) {
+    return await new CompactEncrypt(new TextEncoder().encode(JSON.stringify(value))).setProtectedHeader({ alg: "RSA-OAEP-512", enc: "A256GCM" }).encrypt(await encryptionKey().then((k) => k.public));
+  }
+  async function resolveSubject(type, properties) {
+    const jsonString = JSON.stringify(properties);
+    const encoder = new TextEncoder;
+    const data = encoder.encode(jsonString);
+    const hashBuffer = await crypto.subtle.digest("SHA-1", data);
+    const hashArray = Array.from(new Uint8Array(hashBuffer));
+    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
+    return `${type}:${hashHex.slice(0, 16)}`;
+  }
+  async function generateTokens(ctx, value, opts) {
+    const refreshToken = value.nextToken ?? crypto.randomUUID();
+    if (opts?.generateRefreshToken ?? true) {
+      const refreshValue = {
+        ...value,
+        nextToken: crypto.randomUUID()
+      };
+      delete refreshValue.timeUsed;
+      await Storage.set(storage, ["oauth:refresh", value.subject, refreshToken], refreshValue, value.ttl.refresh);
+    }
+    const accessTimeUsed = Math.floor((value.timeUsed ?? Date.now()) / 1000);
+    return {
+      access: await new SignJWT({
+        mode: "access",
+        type: value.type,
+        properties: value.properties,
+        aud: value.clientID,
+        iss: issuer2(ctx),
+        sub: value.subject
+      }).setExpirationTime(Math.floor(accessTimeUsed + value.ttl.access)).setProtectedHeader(await signingKey().then((k) => ({
+        alg: k.alg,
+        kid: k.id,
+        typ: "JWT"
+      }))).sign(await signingKey().then((item) => item.private)),
+      expiresIn: Math.floor(accessTimeUsed + value.ttl.access - Date.now() / 1000),
+      refresh: [value.subject, refreshToken].join(":")
+    };
+  }
+  async function decrypt(value) {
+    return JSON.parse(new TextDecoder().decode(await compactDecrypt(value, await encryptionKey().then((v) => v.private)).then((value2) => value2.plaintext)));
+  }
+  function issuer2(ctx) {
+    const host = new URL(getRelativeUrl(ctx, "/")).origin;
+    if (!basePath)
+      return host;
+    const url = new URL(host);
+    url.pathname = basePath;
+    return url.toString();
+  }
+  const app = new Hono;
+  if (basePath) {
+    app.use(createMiddleware(async (c, next) => {
+      await next();
+      if (basePath) {
+        const bp = basePath.replace(/^\/+|\/+$/g, "");
+        const loc = c.res.headers.get("Location");
+        if (loc && loc.startsWith("/")) {
+          const newLoc = `/${bp}${loc}`;
+          c.res.headers.set("Location", newLoc);
+        }
+      }
+      return c.res;
+    }));
+  }
+  for (const [name, value] of Object.entries(input.providers)) {
+    const route = new Hono;
+    route.use(async (c, next) => {
+      c.set("provider", name);
+      await next();
+    });
+    value.init(route, {
+      name,
+      ...auth
+    });
+    app.route(`/${name}`, route);
+  }
+  app.get("/.well-known/jwks.json", cors({
+    origin: "*",
+    allowHeaders: ["*"],
+    allowMethods: ["GET"],
+    credentials: false
+  }), async (c) => {
+    const all = await allSigning();
+    return c.json({
+      keys: all.map((item) => ({
+        ...item.jwk,
+        alg: item.alg,
+        exp: item.expired ? Math.floor(item.expired.getTime() / 1000) : undefined
+      }))
+    });
+  });
+  app.get("/.well-known/oauth-authorization-server", cors({
+    origin: "*",
+    allowHeaders: ["*"],
+    allowMethods: ["GET"],
+    credentials: false
+  }), async (c) => {
+    const iss = issuer2(c);
+    return c.json({
+      issuer: iss,
+      authorization_endpoint: `${iss}/authorize`,
+      token_endpoint: `${iss}/token`,
+      jwks_uri: new URL("/.well-known/jwks.json", iss).toString(),
+      response_types_supported: ["code", "token"]
+    });
+  });
+  app.post("/token", cors({
+    origin: "*",
+    allowHeaders: ["*"],
+    allowMethods: ["POST"],
+    credentials: false
+  }), async (c) => {
+    const form = await c.req.formData();
+    const grantType = form.get("grant_type");
+    if (grantType === "authorization_code") {
+      const code = form.get("code");
+      if (!code)
+        return c.json({
+          error: "invalid_request",
+          error_description: "Missing code"
+        }, 400);
+      const key = ["oauth:code", code.toString()];
+      const payload = await Storage.get(storage, key);
+      if (!payload) {
+        return c.json({
+          error: "invalid_grant",
+          error_description: "Authorization code has been used or expired"
+        }, 400);
+      }
+      if (payload.redirectURI !== form.get("redirect_uri")) {
+        return c.json({
+          error: "invalid_redirect_uri",
+          error_description: "Redirect URI mismatch"
+        }, 400);
+      }
+      if (payload.clientID !== form.get("client_id")) {
+        return c.json({
+          error: "unauthorized_client",
+          error_description: "Client is not authorized to use this authorization code"
+        }, 403);
+      }
+      if (payload.pkce) {
+        const codeVerifier = form.get("code_verifier")?.toString();
+        if (!codeVerifier)
+          return c.json({
+            error: "invalid_grant",
+            error_description: "Missing code_verifier"
+          }, 400);
+        if (!await validatePKCE(codeVerifier, payload.pkce.challenge, payload.pkce.method)) {
+          return c.json({
+            error: "invalid_grant",
+            error_description: "Code verifier does not match"
+          }, 400);
+        }
+      }
+      const tokens = await generateTokens(c, payload);
+      await Storage.remove(storage, key);
+      return c.json({
+        access_token: tokens.access,
+        expires_in: tokens.expiresIn,
+        refresh_token: tokens.refresh
+      });
+    }
+    if (grantType === "refresh_token") {
+      const refreshToken = form.get("refresh_token");
+      if (!refreshToken)
+        return c.json({
+          error: "invalid_request",
+          error_description: "Missing refresh_token"
+        }, 400);
+      const splits = refreshToken.toString().split(":");
+      const token = splits.pop();
+      const subject = splits.join(":");
+      const key = ["oauth:refresh", subject, token];
+      const payload = await Storage.get(storage, key);
+      if (!payload) {
+        return c.json({
+          error: "invalid_grant",
+          error_description: "Refresh token has been used or expired"
+        }, 400);
+      }
+      const generateRefreshToken = !payload.timeUsed;
+      if (ttlRefreshReuse <= 0) {
+        await Storage.remove(storage, key);
+      } else if (!payload.timeUsed) {
+        payload.timeUsed = Date.now();
+        await Storage.set(storage, key, payload, ttlRefreshReuse + ttlRefreshRetention);
+      } else if (Date.now() > payload.timeUsed + ttlRefreshReuse * 1000) {
+        await auth.invalidate(subject);
+        return c.json({
+          error: "invalid_grant",
+          error_description: "Refresh token has been used or expired"
+        }, 400);
+      }
+      const tokens = await generateTokens(c, payload, {
+        generateRefreshToken
+      });
+      return c.json({
+        access_token: tokens.access,
+        refresh_token: tokens.refresh,
+        expires_in: tokens.expiresIn
+      });
+    }
+    if (grantType === "client_credentials") {
+      const provider = form.get("provider");
+      if (!provider)
+        return c.json({ error: "missing `provider` form value" }, 400);
+      const match = input.providers[provider.toString()];
+      if (!match)
+        return c.json({ error: "invalid `provider` query parameter" }, 400);
+      if (!match.client)
+        return c.json({ error: "this provider does not support client_credentials" }, 400);
+      const clientID = form.get("client_id");
+      const clientSecret = form.get("client_secret");
+      if (!clientID)
+        return c.json({ error: "missing `client_id` form value" }, 400);
+      if (!clientSecret)
+        return c.json({ error: "missing `client_secret` form value" }, 400);
+      const response = await match.client({
+        clientID: clientID.toString(),
+        clientSecret: clientSecret.toString(),
+        params: Object.fromEntries(form)
+      });
+      return input.success({
+        async subject(type, properties, opts) {
+          const tokens = await generateTokens(c, {
+            type,
+            subject: opts?.subject || await resolveSubject(type, properties),
+            properties,
+            clientID: clientID.toString(),
+            ttl: {
+              access: opts?.ttl?.access ?? ttlAccess,
+              refresh: opts?.ttl?.refresh ?? ttlRefresh
+            }
+          });
+          return c.json({
+            access_token: tokens.access,
+            refresh_token: tokens.refresh
+          });
+        }
+      }, {
+        provider: provider.toString(),
+        ...response
+      }, c.req.raw);
+    }
+    throw new Error("Invalid grant_type");
+  });
+  app.get("/authorize", async (c) => {
+    const provider = c.req.query("provider");
+    const response_type = c.req.query("response_type");
+    const redirect_uri = c.req.query("redirect_uri");
+    const state = c.req.query("state");
+    const client_id = c.req.query("client_id");
+    const audience = c.req.query("audience");
+    const code_challenge = c.req.query("code_challenge");
+    const code_challenge_method = c.req.query("code_challenge_method");
+    const authorization = {
+      response_type,
+      redirect_uri,
+      state,
+      client_id,
+      audience,
+      pkce: code_challenge && code_challenge_method ? {
+        challenge: code_challenge,
+        method: code_challenge_method
+      } : undefined
+    };
+    c.set("authorization", authorization);
+    if (!redirect_uri) {
+      return c.text("Missing redirect_uri", { status: 400 });
+    }
+    if (!response_type) {
+      throw new MissingParameterError("response_type");
+    }
+    if (!client_id) {
+      throw new MissingParameterError("client_id");
+    }
+    if (input.start) {
+      await input.start(c.req.raw);
+    }
+    if (!await allow()({
+      clientID: client_id,
+      redirectURI: redirect_uri,
+      audience
+    }, c.req.raw))
+      throw new UnauthorizedClientError(client_id, redirect_uri);
+    await auth.set(c, "authorization", 60 * 60 * 24, authorization);
+    if (provider)
+      return c.redirect(`/${provider}/authorize`);
+    const providers = Object.keys(input.providers);
+    if (providers.length === 1)
+      return c.redirect(`/${providers[0]}/authorize`);
+    return auth.forward(c, await select()(Object.fromEntries(Object.entries(input.providers).map(([key, value]) => [
+      key,
+      value.type
+    ])), c.req.raw));
+  });
+  app.get("/userinfo", async (c) => {
+    const header = c.req.header("Authorization");
+    if (!header) {
+      return c.json({
+        error: "invalid_request",
+        error_description: "Missing Authorization header"
+      }, 400);
+    }
+    const [type, token] = header.split(" ");
+    if (type !== "Bearer") {
+      return c.json({
+        error: "invalid_request",
+        error_description: "Missing or invalid Authorization header"
+      }, 400);
+    }
+    if (!token) {
+      return c.json({
+        error: "invalid_request",
+        error_description: "Missing token"
+      }, 400);
+    }
+    const result = await jwtVerify(token, () => signingKey().then((item) => item.public), {
+      issuer: issuer2(c)
+    });
+    const validated = await input.subjects[result.payload.type]["~standard"].validate(result.payload.properties);
+    if (!validated.issues && result.payload.mode === "access") {
+      return c.json(validated.value);
+    }
+    return c.json({
+      error: "invalid_token",
+      error_description: "Invalid token"
+    });
+  });
+  app.onError(async (err, c) => {
+    console.error(err);
+    if (err instanceof UnknownStateError) {
+      return auth.forward(c, await error(err, c.req.raw));
+    }
+    const authorization = await getAuthorization(c);
+    const url = new URL(authorization.redirect_uri);
+    const oauth = err instanceof OauthError ? err : new OauthError("server_error", err.message);
+    url.searchParams.set("error", oauth.error);
+    url.searchParams.set("error_description", oauth.description);
+    return c.redirect(url.toString());
+  });
+  return app;
+}
+export {
+  issuer,
+  basePath,
+  aws
+};
diff --git a/src/dist/esm/jwt.js b/src/dist/esm/jwt.js
new file mode 100644
index 0000000000000000000000000000000000000000..7a66eb91427c2e6315574d29e24b6ce014181e09
--- /dev/null
+++ b/src/dist/esm/jwt.js
@@ -0,0 +1,16 @@
+// src/jwt.ts
+import { jwtVerify, SignJWT } from "jose";
+var jwt;
+((jwt) => {
+  function create(payload, algorithm, privateKey) {
+    return new SignJWT(payload).setProtectedHeader({ alg: algorithm, typ: "JWT", kid: "sst" }).sign(privateKey);
+  }
+  jwt.create = create;
+  function verify(token, publicKey) {
+    return jwtVerify(token, publicKey);
+  }
+  jwt.verify = verify;
+})(jwt ||= {});
+export {
+  jwt
+};
diff --git a/src/dist/esm/keys.js b/src/dist/esm/keys.js
new file mode 100644
index 0000000000000000000000000000000000000000..ae78568953e36dfee196ce268fb1d1324f312d6d
--- /dev/null
+++ b/src/dist/esm/keys.js
@@ -0,0 +1,113 @@
+// src/keys.ts
+import {
+  exportJWK,
+  exportPKCS8,
+  exportSPKI,
+  generateKeyPair,
+  importPKCS8,
+  importSPKI
+} from "jose";
+import { Storage } from "./storage/storage.js";
+var signingAlg = "ES256";
+var encryptionAlg = "RSA-OAEP-512";
+async function legacySigningKeys(storage) {
+  const alg = "RS512";
+  const results = [];
+  const scanner = Storage.scan(storage, ["oauth:key"]);
+  for await (const [_key, value] of scanner) {
+    const publicKey = await importSPKI(value.publicKey, alg, {
+      extractable: true
+    });
+    const privateKey = await importPKCS8(value.privateKey, alg);
+    const jwk = await exportJWK(publicKey);
+    jwk.kid = value.id;
+    results.push({
+      id: value.id,
+      alg,
+      created: new Date(value.created),
+      public: publicKey,
+      private: privateKey,
+      expired: new Date(1735858114000),
+      jwk
+    });
+  }
+  return results;
+}
+async function signingKeys(storage) {
+  const results = [];
+  const scanner = Storage.scan(storage, ["signing:key"]);
+  for await (const [_key, value] of scanner) {
+    const publicKey = await importSPKI(value.publicKey, value.alg, {
+      extractable: true
+    });
+    const privateKey = await importPKCS8(value.privateKey, value.alg);
+    const jwk = await exportJWK(publicKey);
+    jwk.kid = value.id;
+    jwk.use = "sig";
+    results.push({
+      id: value.id,
+      alg: signingAlg,
+      created: new Date(value.created),
+      expired: value.expired ? new Date(value.expired) : undefined,
+      public: publicKey,
+      private: privateKey,
+      jwk
+    });
+  }
+  results.sort((a, b) => b.created.getTime() - a.created.getTime());
+  if (results.filter((item) => !item.expired).length)
+    return results;
+  const key = await generateKeyPair(signingAlg, {
+    extractable: true
+  });
+  const serialized = {
+    id: crypto.randomUUID(),
+    publicKey: await exportSPKI(key.publicKey),
+    privateKey: await exportPKCS8(key.privateKey),
+    created: Date.now(),
+    alg: signingAlg
+  };
+  await Storage.set(storage, ["signing:key", serialized.id], serialized);
+  return signingKeys(storage);
+}
+async function encryptionKeys(storage) {
+  const results = [];
+  const scanner = Storage.scan(storage, ["encryption:key"]);
+  for await (const [_key, value] of scanner) {
+    const publicKey = await importSPKI(value.publicKey, value.alg, {
+      extractable: true
+    });
+    const privateKey = await importPKCS8(value.privateKey, value.alg);
+    const jwk = await exportJWK(publicKey);
+    jwk.kid = value.id;
+    results.push({
+      id: value.id,
+      alg: encryptionAlg,
+      created: new Date(value.created),
+      expired: value.expired ? new Date(value.expired) : undefined,
+      public: publicKey,
+      private: privateKey,
+      jwk
+    });
+  }
+  results.sort((a, b) => b.created.getTime() - a.created.getTime());
+  if (results.filter((item) => !item.expired).length)
+    return results;
+  const key = await generateKeyPair(encryptionAlg, {
+    extractable: true
+  });
+  const serialized = {
+    id: crypto.randomUUID(),
+    publicKey: await exportSPKI(key.publicKey),
+    privateKey: await exportPKCS8(key.privateKey),
+    created: Date.now(),
+    alg: encryptionAlg
+  };
+  await Storage.set(storage, ["encryption:key", serialized.id], serialized);
+  return encryptionKeys(storage);
+}
+export {
+  signingKeys,
+  legacySigningKeys,
+  encryptionKeys
+};
diff --git a/src/dist/esm/pkce.js b/src/dist/esm/pkce.js
new file mode 100644
index 0000000000000000000000000000000000000000..8fbaeb7d503ed391a6397b995a48c7c83add1dde
--- /dev/null
+++ b/src/dist/esm/pkce.js
@@ -0,0 +1,35 @@
+// src/pkce.ts
+import { base64url } from "jose";
+function generateVerifier(length) {
+  const buffer = new Uint8Array(length);
+  crypto.getRandomValues(buffer);
+  return base64url.encode(buffer);
+}
+async function generateChallenge(verifier, method) {
+  if (method === "plain")
+    return verifier;
+  const encoder = new TextEncoder;
+  const data = encoder.encode(verifier);
+  const hash = await crypto.subtle.digest("SHA-256", data);
+  return base64url.encode(new Uint8Array(hash));
+}
+async function generatePKCE(length = 64) {
+  if (length < 43 || length > 128) {
+    throw new Error("Code verifier length must be between 43 and 128 characters");
+  }
+  const verifier = generateVerifier(length);
+  const challenge = await generateChallenge(verifier, "S256");
+  return {
+    verifier,
+    challenge,
+    method: "S256"
+  };
+}
+async function validatePKCE(verifier, challenge, method = "S256") {
+  const generatedChallenge = await generateChallenge(verifier, method);
+  return generatedChallenge === challenge;
+}
+export {
+  validatePKCE,
+  generatePKCE
+};
diff --git a/src/dist/esm/provider/apple.js b/src/dist/esm/provider/apple.js
new file mode 100644
index 0000000000000000000000000000000000000000..cdd24fb0ff52e7479c2cc2bf54102ddda97cce5e
--- /dev/null
+++ b/src/dist/esm/provider/apple.js
@@ -0,0 +1,28 @@
+// src/provider/apple.ts
+import { Oauth2Provider } from "./oauth2.js";
+import { OidcProvider } from "./oidc.js";
+function AppleProvider(config) {
+  const { responseMode, ...restConfig } = config;
+  const additionalQuery = responseMode === "form_post" ? { response_mode: "form_post", ...config.query } : config.query || {};
+  return Oauth2Provider({
+    ...restConfig,
+    type: "apple",
+    endpoint: {
+      authorization: "https://appleid.apple.com/auth/authorize",
+      token: "https://appleid.apple.com/auth/token",
+      jwks: "https://appleid.apple.com/auth/keys"
+    },
+    query: additionalQuery
+  });
+}
+function AppleOidcProvider(config) {
+  return OidcProvider({
+    ...config,
+    type: "apple",
+    issuer: "https://appleid.apple.com"
+  });
+}
+export {
+  AppleProvider,
+  AppleOidcProvider
+};
diff --git a/src/dist/esm/provider/arctic.js b/src/dist/esm/provider/arctic.js
new file mode 100644
index 0000000000000000000000000000000000000000..25b415b93cb47d1ea4e580d5e55e71cf1350d7f8
--- /dev/null
+++ b/src/dist/esm/provider/arctic.js
@@ -0,0 +1,43 @@
+// src/provider/arctic.ts
+import { OauthError } from "../error.js";
+import { getRelativeUrl } from "../util.js";
+function ArcticProvider(provider, config) {
+  function getClient(c) {
+    const callback = new URL(c.req.url);
+    const pathname = callback.pathname.replace(/authorize.*$/, "callback");
+    const url = getRelativeUrl(c, pathname);
+    return new provider(config.clientID, config.clientSecret, url);
+  }
+  return {
+    type: "arctic",
+    init(routes, ctx) {
+      routes.get("/authorize", async (c) => {
+        const client = getClient(c);
+        const state = crypto.randomUUID();
+        await ctx.set(c, "provider", 60 * 10, {
+          state
+        });
+        return c.redirect(client.createAuthorizationURL(state, config.scopes));
+      });
+      routes.get("/callback", async (c) => {
+        const client = getClient(c);
+        const provider2 = await ctx.get(c, "provider");
+        if (!provider2)
+          return c.redirect("../authorize");
+        const code = c.req.query("code");
+        const state = c.req.query("state");
+        if (!code)
+          throw new Error("Missing code");
+        if (state !== provider2.state)
+          throw new OauthError("invalid_request", "Invalid state");
+        const tokens = await client.validateAuthorizationCode(code);
+        return ctx.success(c, {
+          tokenset: tokens
+        });
+      });
+    }
+  };
+}
+export {
+  ArcticProvider
+};
diff --git a/src/dist/esm/provider/code.js b/src/dist/esm/provider/code.js
new file mode 100644
index 0000000000000000000000000000000000000000..7cee307550b3d50b49bd3054b517da0d9bd037f8
--- /dev/null
+++ b/src/dist/esm/provider/code.js
@@ -0,0 +1,58 @@
+// src/provider/code.ts
+import { generateUnbiasedDigits, timingSafeCompare } from "../random.js";
+function CodeProvider(config) {
+  const length = config.length || 6;
+  function generate() {
+    return generateUnbiasedDigits(length);
+  }
+  return {
+    type: "code",
+    init(routes, ctx) {
+      async function transition(c, next, fd, err) {
+        await ctx.set(c, "provider", 60 * 60 * 24, next);
+        const resp = ctx.forward(c, await config.request(c.req.raw, next, fd, err));
+        return resp;
+      }
+      routes.get("/authorize", async (c) => {
+        const resp = await transition(c, {
+          type: "start"
+        });
+        return resp;
+      });
+      routes.post("/authorize", async (c) => {
+        const code = generate();
+        const fd = await c.req.formData();
+        const state = await ctx.get(c, "provider");
+        const action = fd.get("action")?.toString();
+        if (action === "request" || action === "resend") {
+          const claims = Object.fromEntries(fd);
+          delete claims.action;
+          const err = await config.sendCode(claims, code);
+          if (err)
+            return transition(c, { type: "start" }, fd, err);
+          return transition(c, {
+            type: "code",
+            resend: action === "resend",
+            claims,
+            code
+          }, fd);
+        }
+        if (fd.get("action")?.toString() === "verify" && state.type === "code") {
+          const fd2 = await c.req.formData();
+          const compare = fd2.get("code")?.toString();
+          if (!state.code || !compare || !timingSafeCompare(state.code, compare)) {
+            return transition(c, {
+              ...state,
+              resend: false
+            }, fd2, { type: "invalid_code" });
+          }
+          await ctx.unset(c, "provider");
+          return ctx.forward(c, await ctx.success(c, { claims: state.claims }));
+        }
+      });
+    }
+  };
+}
+export {
+  CodeProvider
+};
diff --git a/src/dist/esm/provider/cognito.js b/src/dist/esm/provider/cognito.js
new file mode 100644
index 0000000000000000000000000000000000000000..d4b1a5f39b8f512871197c31edf94f3e9f115282
--- /dev/null
+++ b/src/dist/esm/provider/cognito.js
@@ -0,0 +1,16 @@
+// src/provider/cognito.ts
+import { Oauth2Provider } from "./oauth2.js";
+function CognitoProvider(config) {
+  const domain = `${config.domain}.auth.${config.region}.amazoncognito.com`;
+  return Oauth2Provider({
+    type: "cognito",
+    ...config,
+    endpoint: {
+      authorization: `https://${domain}/oauth2/authorize`,
+      token: `https://${domain}/oauth2/token`
+    }
+  });
+}
+export {
+  CognitoProvider
+};
diff --git a/src/dist/esm/provider/discord.js b/src/dist/esm/provider/discord.js
new file mode 100644
index 0000000000000000000000000000000000000000..e3045a308207f6144a8b12fa48ed67b498e652b1
--- /dev/null
+++ b/src/dist/esm/provider/discord.js
@@ -0,0 +1,15 @@
+// src/provider/discord.ts
+import { Oauth2Provider } from "./oauth2.js";
+function DiscordProvider(config) {
+  return Oauth2Provider({
+    type: "discord",
+    ...config,
+    endpoint: {
+      authorization: "https://discord.com/oauth2/authorize",
+      token: "https://discord.com/api/oauth2/token"
+    }
+  });
+}
+export {
+  DiscordProvider
+};
diff --git a/src/dist/esm/provider/facebook.js b/src/dist/esm/provider/facebook.js
new file mode 100644
index 0000000000000000000000000000000000000000..f15ad0e75ce63b2619ab7032a81865654b27aa4e
--- /dev/null
+++ b/src/dist/esm/provider/facebook.js
@@ -0,0 +1,24 @@
+// src/provider/facebook.ts
+import { Oauth2Provider } from "./oauth2.js";
+import { OidcProvider } from "./oidc.js";
+function FacebookProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "facebook",
+    endpoint: {
+      authorization: "https://www.facebook.com/v12.0/dialog/oauth",
+      token: "https://graph.facebook.com/v12.0/oauth/access_token"
+    }
+  });
+}
+function FacebookOidcProvider(config) {
+  return OidcProvider({
+    ...config,
+    type: "facebook",
+    issuer: "https://graph.facebook.com"
+  });
+}
+export {
+  FacebookProvider,
+  FacebookOidcProvider
+};
diff --git a/src/dist/esm/provider/github.js b/src/dist/esm/provider/github.js
new file mode 100644
index 0000000000000000000000000000000000000000..de250d6d2062b3543947f2e520000ae196a270da
--- /dev/null
+++ b/src/dist/esm/provider/github.js
@@ -0,0 +1,15 @@
+// src/provider/github.ts
+import { Oauth2Provider } from "./oauth2.js";
+function GithubProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "github",
+    endpoint: {
+      authorization: "https://github.com/login/oauth/authorize",
+      token: "https://github.com/login/oauth/access_token"
+    }
+  });
+}
+export {
+  GithubProvider
+};
diff --git a/src/dist/esm/provider/google.js b/src/dist/esm/provider/google.js
new file mode 100644
index 0000000000000000000000000000000000000000..c89ab5064c640bbae1a5fb6c1d97daacdc7bba2a
--- /dev/null
+++ b/src/dist/esm/provider/google.js
@@ -0,0 +1,25 @@
+// src/provider/google.ts
+import { Oauth2Provider } from "./oauth2.js";
+import { OidcProvider } from "./oidc.js";
+function GoogleProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "google",
+    endpoint: {
+      authorization: "https://accounts.google.com/o/oauth2/v2/auth",
+      token: "https://oauth2.googleapis.com/token",
+      jwks: "https://www.googleapis.com/oauth2/v3/certs"
+    }
+  });
+}
+function GoogleOidcProvider(config) {
+  return OidcProvider({
+    ...config,
+    type: "google",
+    issuer: "https://accounts.google.com"
+  });
+}
+export {
+  GoogleProvider,
+  GoogleOidcProvider
+};
diff --git a/src/dist/esm/provider/index.js b/src/dist/esm/provider/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..526580eb19c1170e92cd36b2a0adee579999a8f3
--- /dev/null
+++ b/src/dist/esm/provider/index.js
@@ -0,0 +1,3 @@
+// src/provider/index.ts
+export * from "./code.js";
+export * from "./spotify.js";
diff --git a/src/dist/esm/provider/jumpcloud.js b/src/dist/esm/provider/jumpcloud.js
new file mode 100644
index 0000000000000000000000000000000000000000..bb1baf99d20abe7a951d21457eb5960982ac07a1
--- /dev/null
+++ b/src/dist/esm/provider/jumpcloud.js
@@ -0,0 +1,15 @@
+// src/provider/jumpcloud.ts
+import { Oauth2Provider } from "./oauth2.js";
+function JumpCloudProvider(config) {
+  return Oauth2Provider({
+    type: "jumpcloud",
+    ...config,
+    endpoint: {
+      authorization: "https://oauth.id.jumpcloud.com/oauth2/auth",
+      token: "https://oauth.id.jumpcloud.com/oauth2/token"
+    }
+  });
+}
+export {
+  JumpCloudProvider
+};
diff --git a/src/dist/esm/provider/keycloak.js b/src/dist/esm/provider/keycloak.js
new file mode 100644
index 0000000000000000000000000000000000000000..fcf242dd9a40066ecef5c80a422be54a1212f899
--- /dev/null
+++ b/src/dist/esm/provider/keycloak.js
@@ -0,0 +1,15 @@
+// src/provider/keycloak.ts
+import { Oauth2Provider } from "./oauth2.js";
+function KeycloakProvider(config) {
+  const baseConfig = {
+    ...config,
+    endpoint: {
+      authorization: `${config.baseUrl}/realms/${config.realm}/protocol/openid-connect/auth`,
+      token: `${config.baseUrl}/realms/${config.realm}/protocol/openid-connect/token`
+    }
+  };
+  return Oauth2Provider(baseConfig);
+}
+export {
+  KeycloakProvider
+};
diff --git a/src/dist/esm/provider/linkedin.js b/src/dist/esm/provider/linkedin.js
new file mode 100644
index 0000000000000000000000000000000000000000..44973a89632738b02ee8d1ff982a3f0803bff29f
--- /dev/null
+++ b/src/dist/esm/provider/linkedin.js
@@ -0,0 +1,15 @@
+// src/provider/linkedin.ts
+import { Oauth2Provider } from "./oauth2.js";
+function LinkedInAdapter(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "linkedin",
+    endpoint: {
+      authorization: "https://www.linkedin.com/oauth/v2/authorization",
+      token: "https://www.linkedin.com/oauth/v2/accessToken"
+    }
+  });
+}
+export {
+  LinkedInAdapter
+};
diff --git a/src/dist/esm/provider/microsoft.js b/src/dist/esm/provider/microsoft.js
new file mode 100644
index 0000000000000000000000000000000000000000..d53defafc33fbed4003875e0cf7c417f5cdeef36
--- /dev/null
+++ b/src/dist/esm/provider/microsoft.js
@@ -0,0 +1,24 @@
+// src/provider/microsoft.ts
+import { Oauth2Provider } from "./oauth2.js";
+import { OidcProvider } from "./oidc.js";
+function MicrosoftProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "microsoft",
+    endpoint: {
+      authorization: `https://login.microsoftonline.com/${config?.tenant}/oauth2/v2.0/authorize`,
+      token: `https://login.microsoftonline.com/${config?.tenant}/oauth2/v2.0/token`
+    }
+  });
+}
+function MicrosoftOidcProvider(config) {
+  return OidcProvider({
+    ...config,
+    type: "microsoft",
+    issuer: "https://graph.microsoft.com/oidc/userinfo"
+  });
+}
+export {
+  MicrosoftProvider,
+  MicrosoftOidcProvider
+};
diff --git a/src/dist/esm/provider/oauth2.js b/src/dist/esm/provider/oauth2.js
new file mode 100644
index 0000000000000000000000000000000000000000..f9c214890d9041a5121151898c5a8c5327592809
--- /dev/null
+++ b/src/dist/esm/provider/oauth2.js
@@ -0,0 +1,119 @@
+// src/provider/oauth2.ts
+import { createRemoteJWKSet, jwtVerify } from "jose";
+import { OauthError } from "../error.js";
+import { generatePKCE } from "../pkce.js";
+import { getRelativeUrl } from "../util.js";
+function Oauth2Provider(config) {
+  const query = config.query || {};
+  async function handleCallbackLogic(c, ctx, provider, code) {
+    if (!provider || !code) {
+      return c.redirect(getRelativeUrl(c, "./authorize"));
+    }
+    const body = new URLSearchParams({
+      client_id: config.clientID,
+      client_secret: config.clientSecret,
+      code,
+      grant_type: "authorization_code",
+      redirect_uri: provider.redirect,
+      ...provider.codeVerifier ? { code_verifier: provider.codeVerifier } : {}
+    });
+    const json = await fetch(config.endpoint.token, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-www-form-urlencoded",
+        Accept: "application/json"
+      },
+      body: body.toString()
+    }).then((r) => r.json());
+    if ("error" in json) {
+      throw new OauthError(json.error, json.error_description);
+    }
+    let idTokenPayload = null;
+    if (config.endpoint.jwks) {
+      const jwksEndpoint = new URL(config.endpoint.jwks);
+      const jwks = createRemoteJWKSet(jwksEndpoint);
+      const { payload } = await jwtVerify(json.id_token, jwks, {
+        audience: config.clientID
+      });
+      idTokenPayload = payload;
+    }
+    return ctx.success(c, {
+      clientID: config.clientID,
+      tokenset: {
+        get access() {
+          return json.access_token;
+        },
+        get refresh() {
+          return json.refresh_token;
+        },
+        get expiry() {
+          return json.expires_in;
+        },
+        get id() {
+          if (!idTokenPayload)
+            return null;
+          return idTokenPayload;
+        },
+        get raw() {
+          return json;
+        }
+      }
+    });
+  }
+  return {
+    type: config.type || "oauth2",
+    init(routes, ctx) {
+      routes.get("/authorize", async (c) => {
+        const state = crypto.randomUUID();
+        const pkce = config.pkce ? await generatePKCE() : undefined;
+        await ctx.set(c, "provider", 60 * 10, {
+          state,
+          redirect: getRelativeUrl(c, "./callback"),
+          codeVerifier: pkce?.verifier
+        });
+        const authorization = new URL(config.endpoint.authorization);
+        authorization.searchParams.set("client_id", config.clientID);
+        authorization.searchParams.set("redirect_uri", getRelativeUrl(c, "./callback"));
+        authorization.searchParams.set("response_type", "code");
+        authorization.searchParams.set("state", state);
+        authorization.searchParams.set("scope", config.scopes.join(" "));
+        if (pkce) {
+          authorization.searchParams.set("code_challenge", pkce.challenge);
+          authorization.searchParams.set("code_challenge_method", pkce.method);
+        }
+        for (const [key, value] of Object.entries(query)) {
+          authorization.searchParams.set(key, value);
+        }
+        return c.redirect(authorization.toString());
+      });
+      routes.get("/callback", async (c) => {
+        const provider = await ctx.get(c, "provider");
+        const code = c.req.query("code");
+        const state = c.req.query("state");
+        const error = c.req.query("error");
+        if (error)
+          throw new OauthError(error.toString(), c.req.query("error_description")?.toString() || "");
+        if (!provider || !code || provider.state && state !== provider.state) {
+          return c.redirect(getRelativeUrl(c, "./authorize"));
+        }
+        return handleCallbackLogic(c, ctx, provider, code);
+      });
+      routes.post("/callback", async (c) => {
+        const provider = await ctx.get(c, "provider");
+        const formData = await c.req.formData();
+        const code = formData.get("code")?.toString();
+        const state = formData.get("state")?.toString();
+        const error = formData.get("error")?.toString();
+        if (error)
+          throw new OauthError(error, formData.get("error_description")?.toString() || "");
+        if (!provider || !code || provider.state && state !== provider.state) {
+          return c.redirect(getRelativeUrl(c, "./authorize"));
+        }
+        return handleCallbackLogic(c, ctx, provider, code);
+      });
+    }
+  };
+}
+export {
+  Oauth2Provider
+};
diff --git a/src/dist/esm/provider/oidc.js b/src/dist/esm/provider/oidc.js
new file mode 100644
index 0000000000000000000000000000000000000000..1ae89f6ae3050c194cefd4667cf9d58c892144bd
--- /dev/null
+++ b/src/dist/esm/provider/oidc.js
@@ -0,0 +1,69 @@
+// src/provider/oidc.ts
+import { createLocalJWKSet, jwtVerify } from "jose";
+import { OauthError } from "../error.js";
+import { getRelativeUrl, lazy } from "../util.js";
+function OidcProvider(config) {
+  const query = config.query || {};
+  const scopes = config.scopes || [];
+  const wk = lazy(() => fetch(config.issuer + "/.well-known/openid-configuration").then(async (r) => {
+    if (!r.ok)
+      throw new Error(await r.text());
+    return r.json();
+  }));
+  const jwks = lazy(() => wk().then((r) => r.jwks_uri).then(async (uri) => {
+    const r = await fetch(uri);
+    if (!r.ok)
+      throw new Error(await r.text());
+    return createLocalJWKSet(await r.json());
+  }));
+  return {
+    type: config.type || "oidc",
+    init(routes, ctx) {
+      routes.get("/authorize", async (c) => {
+        const provider = {
+          state: crypto.randomUUID(),
+          nonce: crypto.randomUUID(),
+          redirect: getRelativeUrl(c, "./callback")
+        };
+        await ctx.set(c, "provider", 60 * 10, provider);
+        const authorization = new URL(await wk().then((r) => r.authorization_endpoint));
+        authorization.searchParams.set("client_id", config.clientID);
+        authorization.searchParams.set("response_type", "id_token");
+        authorization.searchParams.set("response_mode", "form_post");
+        authorization.searchParams.set("state", provider.state);
+        authorization.searchParams.set("nonce", provider.nonce);
+        authorization.searchParams.set("redirect_uri", provider.redirect);
+        authorization.searchParams.set("scope", ["openid", ...scopes].join(" "));
+        for (const [key, value] of Object.entries(query)) {
+          authorization.searchParams.set(key, value);
+        }
+        return c.redirect(authorization.toString());
+      });
+      routes.post("/callback", async (c) => {
+        const provider = await ctx.get(c, "provider");
+        if (!provider)
+          return c.redirect(getRelativeUrl(c, "./authorize"));
+        const body = await c.req.formData();
+        const error = body.get("error");
+        if (error)
+          throw new OauthError(error.toString(), body.get("error_description")?.toString() || "");
+        const idToken = body.get("id_token");
+        if (!idToken)
+          throw new OauthError("invalid_request", "Missing id_token");
+        const result = await jwtVerify(idToken.toString(), await jwks(), {
+          audience: config.clientID
+        });
+        if (result.payload.nonce !== provider.nonce) {
+          throw new OauthError("invalid_request", "Invalid nonce");
+        }
+        return ctx.success(c, {
+          id: result.payload,
+          clientID: config.clientID
+        });
+      });
+    }
+  };
+}
+export {
+  OidcProvider
+};
diff --git a/src/dist/esm/provider/password.js b/src/dist/esm/provider/password.js
new file mode 100644
index 0000000000000000000000000000000000000000..b4ddc22343c8ab7a8808808c00f367c2504fcceb
--- /dev/null
+++ b/src/dist/esm/provider/password.js
@@ -0,0 +1,306 @@
+// src/provider/password.ts
+import { UnknownStateError } from "../error.js";
+import { Storage } from "../storage/storage.js";
+import { generateUnbiasedDigits, timingSafeCompare } from "../random.js";
+import * as jose from "jose";
+import { TextEncoder } from "node:util";
+import { timingSafeEqual, randomBytes, scrypt } from "node:crypto";
+import { getRelativeUrl } from "../util.js";
+function PasswordProvider(config) {
+  const hasher = config.hasher ?? ScryptHasher();
+  function generate() {
+    return generateUnbiasedDigits(6);
+  }
+  return {
+    type: "password",
+    init(routes, ctx) {
+      routes.get("/authorize", async (c) => ctx.forward(c, await config.login(c.req.raw)));
+      routes.post("/authorize", async (c) => {
+        const fd = await c.req.formData();
+        async function error(err) {
+          return ctx.forward(c, await config.login(c.req.raw, fd, err));
+        }
+        const email = fd.get("email")?.toString()?.toLowerCase();
+        if (!email)
+          return error({ type: "invalid_email" });
+        const hash = await Storage.get(ctx.storage, [
+          "email",
+          email,
+          "password"
+        ]);
+        const password = fd.get("password")?.toString();
+        if (!password || !hash || !await hasher.verify(password, hash))
+          return error({ type: "invalid_password" });
+        return ctx.success(c, {
+          email
+        }, {
+          invalidate: async (subject) => {
+            await Storage.set(ctx.storage, ["email", email, "subject"], subject);
+          }
+        });
+      });
+      routes.get("/register", async (c) => {
+        const state = {
+          type: "start"
+        };
+        await ctx.set(c, "provider", 60 * 60 * 24, state);
+        return ctx.forward(c, await config.register(c.req.raw, state));
+      });
+      routes.post("/register", async (c) => {
+        const fd = await c.req.formData();
+        const email = fd.get("email")?.toString()?.toLowerCase();
+        const action = fd.get("action")?.toString();
+        const provider = await ctx.get(c, "provider");
+        async function transition(next, err) {
+          await ctx.set(c, "provider", 60 * 60 * 24, next);
+          return ctx.forward(c, await config.register(c.req.raw, next, fd, err));
+        }
+        if (action === "register" && provider.type === "start") {
+          const password = fd.get("password")?.toString();
+          const repeat = fd.get("repeat")?.toString();
+          if (!email)
+            return transition(provider, { type: "invalid_email" });
+          if (!password)
+            return transition(provider, { type: "invalid_password" });
+          if (password !== repeat)
+            return transition(provider, { type: "password_mismatch" });
+          if (config.validatePassword) {
+            let validationError;
+            try {
+              if (typeof config.validatePassword === "function") {
+                validationError = await config.validatePassword(password);
+              } else {
+                const res = await config.validatePassword["~standard"].validate(password);
+                if (res.issues?.length) {
+                  throw new Error(res.issues.map((issue) => issue.message).join(", "));
+                }
+              }
+            } catch (error) {
+              validationError = error instanceof Error ? error.message : undefined;
+            }
+            if (validationError)
+              return transition(provider, {
+                type: "validation_error",
+                message: validationError
+              });
+          }
+          const existing = await Storage.get(ctx.storage, [
+            "email",
+            email,
+            "password"
+          ]);
+          if (existing)
+            return transition(provider, { type: "email_taken" });
+          const code = generate();
+          await config.sendCode(email, code);
+          return transition({
+            type: "code",
+            code,
+            password: await hasher.hash(password),
+            email
+          });
+        }
+        if (action === "register" && provider.type === "code") {
+          const code = generate();
+          await config.sendCode(provider.email, code);
+          return transition({
+            type: "code",
+            code,
+            password: provider.password,
+            email: provider.email
+          });
+        }
+        if (action === "verify" && provider.type === "code") {
+          const code = fd.get("code")?.toString();
+          if (!code || !timingSafeCompare(code, provider.code))
+            return transition(provider, { type: "invalid_code" });
+          const existing = await Storage.get(ctx.storage, [
+            "email",
+            provider.email,
+            "password"
+          ]);
+          if (existing)
+            return transition({ type: "start" }, { type: "email_taken" });
+          await Storage.set(ctx.storage, ["email", provider.email, "password"], provider.password);
+          return ctx.success(c, {
+            email: provider.email
+          });
+        }
+        return transition({ type: "start" });
+      });
+      routes.get("/change", async (c) => {
+        let redirect = c.req.query("redirect_uri") || getRelativeUrl(c, "./authorize");
+        const state = {
+          type: "start",
+          redirect
+        };
+        await ctx.set(c, "provider", 60 * 60 * 24, state);
+        return ctx.forward(c, await config.change(c.req.raw, state));
+      });
+      routes.post("/change", async (c) => {
+        const fd = await c.req.formData();
+        const action = fd.get("action")?.toString();
+        const provider = await ctx.get(c, "provider");
+        if (!provider)
+          throw new UnknownStateError;
+        async function transition(next, err) {
+          await ctx.set(c, "provider", 60 * 60 * 24, next);
+          return ctx.forward(c, await config.change(c.req.raw, next, fd, err));
+        }
+        if (action === "code") {
+          const email = fd.get("email")?.toString()?.toLowerCase();
+          if (!email)
+            return transition({ type: "start", redirect: provider.redirect }, { type: "invalid_email" });
+          const code = generate();
+          await config.sendCode(email, code);
+          return transition({
+            type: "code",
+            code,
+            email,
+            redirect: provider.redirect
+          });
+        }
+        if (action === "verify" && provider.type === "code") {
+          const code = fd.get("code")?.toString();
+          if (!code || !timingSafeCompare(code, provider.code))
+            return transition(provider, { type: "invalid_code" });
+          return transition({
+            type: "update",
+            email: provider.email,
+            redirect: provider.redirect
+          });
+        }
+        if (action === "update" && provider.type === "update") {
+          const existing = await Storage.get(ctx.storage, [
+            "email",
+            provider.email,
+            "password"
+          ]);
+          if (!existing)
+            return c.redirect(provider.redirect, 302);
+          const password = fd.get("password")?.toString();
+          const repeat = fd.get("repeat")?.toString();
+          if (!password)
+            return transition(provider, { type: "invalid_password" });
+          if (password !== repeat)
+            return transition(provider, { type: "password_mismatch" });
+          if (config.validatePassword) {
+            let validationError;
+            try {
+              if (typeof config.validatePassword === "function") {
+                validationError = await config.validatePassword(password);
+              } else {
+                const res = await config.validatePassword["~standard"].validate(password);
+                if (res.issues?.length) {
+                  throw new Error(res.issues.map((issue) => issue.message).join(", "));
+                }
+              }
+            } catch (error) {
+              validationError = error instanceof Error ? error.message : undefined;
+            }
+            if (validationError)
+              return transition(provider, {
+                type: "validation_error",
+                message: validationError
+              });
+          }
+          await Storage.set(ctx.storage, ["email", provider.email, "password"], await hasher.hash(password));
+          const subject = await Storage.get(ctx.storage, [
+            "email",
+            provider.email,
+            "subject"
+          ]);
+          if (subject)
+            await ctx.invalidate(subject);
+          return c.redirect(provider.redirect, 302);
+        }
+        return transition({ type: "start", redirect: provider.redirect });
+      });
+    }
+  };
+}
+function PBKDF2Hasher(opts) {
+  const iterations = opts?.iterations ?? 600000;
+  return {
+    async hash(password) {
+      const encoder = new TextEncoder;
+      const bytes = encoder.encode(password);
+      const salt = crypto.getRandomValues(new Uint8Array(16));
+      const keyMaterial = await crypto.subtle.importKey("raw", bytes, "PBKDF2", false, ["deriveBits"]);
+      const hash = await crypto.subtle.deriveBits({
+        name: "PBKDF2",
+        hash: "SHA-256",
+        salt,
+        iterations
+      }, keyMaterial, 256);
+      const hashBase64 = jose.base64url.encode(new Uint8Array(hash));
+      const saltBase64 = jose.base64url.encode(salt);
+      return {
+        hash: hashBase64,
+        salt: saltBase64,
+        iterations
+      };
+    },
+    async verify(password, compare) {
+      const encoder = new TextEncoder;
+      const passwordBytes = encoder.encode(password);
+      const salt = jose.base64url.decode(compare.salt);
+      const params = {
+        name: "PBKDF2",
+        hash: "SHA-256",
+        salt,
+        iterations: compare.iterations
+      };
+      const keyMaterial = await crypto.subtle.importKey("raw", passwordBytes, "PBKDF2", false, ["deriveBits"]);
+      const hash = await crypto.subtle.deriveBits(params, keyMaterial, 256);
+      const hashBase64 = jose.base64url.encode(new Uint8Array(hash));
+      return hashBase64 === compare.hash;
+    }
+  };
+}
+function ScryptHasher(opts) {
+  const N = opts?.N ?? 16384;
+  const r = opts?.r ?? 8;
+  const p = opts?.p ?? 1;
+  return {
+    async hash(password) {
+      const salt = randomBytes(16);
+      const keyLength = 32;
+      const derivedKey = await new Promise((resolve, reject) => {
+        scrypt(password, salt, keyLength, { N, r, p }, (err, derivedKey2) => {
+          if (err)
+            reject(err);
+          else
+            resolve(derivedKey2);
+        });
+      });
+      const hashBase64 = derivedKey.toString("base64");
+      const saltBase64 = salt.toString("base64");
+      return {
+        hash: hashBase64,
+        salt: saltBase64,
+        N,
+        r,
+        p
+      };
+    },
+    async verify(password, compare) {
+      const salt = Buffer.from(compare.salt, "base64");
+      const keyLength = 32;
+      const derivedKey = await new Promise((resolve, reject) => {
+        scrypt(password, salt, keyLength, { N: compare.N, r: compare.r, p: compare.p }, (err, derivedKey2) => {
+          if (err)
+            reject(err);
+          else
+            resolve(derivedKey2);
+        });
+      });
+      return timingSafeEqual(derivedKey, Buffer.from(compare.hash, "base64"));
+    }
+  };
+}
+export {
+  ScryptHasher,
+  PasswordProvider,
+  PBKDF2Hasher
+};
diff --git a/src/dist/esm/provider/provider.js b/src/dist/esm/provider/provider.js
new file mode 100644
index 0000000000000000000000000000000000000000..653298dd89f8e54976e0442c72b2e1fed6ec370c
--- /dev/null
+++ b/src/dist/esm/provider/provider.js
@@ -0,0 +1,10 @@
+// src/provider/provider.ts
+class ProviderError extends Error {
+}
+
+class ProviderUnknownError extends ProviderError {
+}
+export {
+  ProviderUnknownError,
+  ProviderError
+};
diff --git a/src/dist/esm/provider/slack.js b/src/dist/esm/provider/slack.js
new file mode 100644
index 0000000000000000000000000000000000000000..c5f5a529bc2250270c1deb26ab8a6576f3fe1ff0
--- /dev/null
+++ b/src/dist/esm/provider/slack.js
@@ -0,0 +1,15 @@
+// src/provider/slack.ts
+import { Oauth2Provider } from "./oauth2.js";
+function SlackProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "slack",
+    endpoint: {
+      authorization: "https://slack.com/openid/connect/authorize",
+      token: "https://slack.com/api/openid.connect.token"
+    }
+  });
+}
+export {
+  SlackProvider
+};
diff --git a/src/dist/esm/provider/spotify.js b/src/dist/esm/provider/spotify.js
new file mode 100644
index 0000000000000000000000000000000000000000..51e330e3d210107778f8d48f65aace8cf55c47ee
--- /dev/null
+++ b/src/dist/esm/provider/spotify.js
@@ -0,0 +1,15 @@
+// src/provider/spotify.ts
+import { Oauth2Provider } from "./oauth2.js";
+function SpotifyProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "spotify",
+    endpoint: {
+      authorization: "https://accounts.spotify.com/authorize",
+      token: "https://accounts.spotify.com/api/token"
+    }
+  });
+}
+export {
+  SpotifyProvider
+};
diff --git a/src/dist/esm/provider/twitch.js b/src/dist/esm/provider/twitch.js
new file mode 100644
index 0000000000000000000000000000000000000000..f8e254725b7e45f5eda38f9baddfa3ad933f7876
--- /dev/null
+++ b/src/dist/esm/provider/twitch.js
@@ -0,0 +1,15 @@
+// src/provider/twitch.ts
+import { Oauth2Provider } from "./oauth2.js";
+function TwitchProvider(config) {
+  return Oauth2Provider({
+    type: "twitch",
+    ...config,
+    endpoint: {
+      authorization: "https://id.twitch.tv/oauth2/authorize",
+      token: "https://id.twitch.tv/oauth2/token"
+    }
+  });
+}
+export {
+  TwitchProvider
+};
diff --git a/src/dist/esm/provider/x.js b/src/dist/esm/provider/x.js
new file mode 100644
index 0000000000000000000000000000000000000000..403818b4be69f2c61527908b58bd809eff8d978e
--- /dev/null
+++ b/src/dist/esm/provider/x.js
@@ -0,0 +1,16 @@
+// src/provider/x.ts
+import { Oauth2Provider } from "./oauth2.js";
+function XProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "x",
+    endpoint: {
+      authorization: "https://twitter.com/i/oauth2/authorize",
+      token: "https://api.x.com/2/oauth2/token"
+    },
+    pkce: true
+  });
+}
+export {
+  XProvider
+};
diff --git a/src/dist/esm/provider/yahoo.js b/src/dist/esm/provider/yahoo.js
new file mode 100644
index 0000000000000000000000000000000000000000..165fe58bd0701d32680218846f99b550b48b7407
--- /dev/null
+++ b/src/dist/esm/provider/yahoo.js
@@ -0,0 +1,15 @@
+// src/provider/yahoo.ts
+import { Oauth2Provider } from "./oauth2.js";
+function YahooProvider(config) {
+  return Oauth2Provider({
+    ...config,
+    type: "yahoo",
+    endpoint: {
+      authorization: "https://api.login.yahoo.com/oauth2/request_auth",
+      token: "https://api.login.yahoo.com/oauth2/get_token"
+    }
+  });
+}
+export {
+  YahooProvider
+};
diff --git a/src/dist/esm/random.js b/src/dist/esm/random.js
new file mode 100644
index 0000000000000000000000000000000000000000..66b31b55aade66b1844ca2087a9fa6bf66c5c9e7
--- /dev/null
+++ b/src/dist/esm/random.js
@@ -0,0 +1,27 @@
+// src/random.ts
+import { timingSafeEqual } from "node:crypto";
+function generateUnbiasedDigits(length) {
+  const result = [];
+  while (result.length < length) {
+    const buffer = crypto.getRandomValues(new Uint8Array(length * 2));
+    for (const byte of buffer) {
+      if (byte < 250 && result.length < length) {
+        result.push(byte % 10);
+      }
+    }
+  }
+  return result.join("");
+}
+function timingSafeCompare(a, b) {
+  if (typeof a !== "string" || typeof b !== "string") {
+    return false;
+  }
+  if (a.length !== b.length) {
+    return false;
+  }
+  return timingSafeEqual(Buffer.from(a), Buffer.from(b));
+}
+export {
+  timingSafeCompare,
+  generateUnbiasedDigits
+};
diff --git a/src/dist/esm/storage/aws.js b/src/dist/esm/storage/aws.js
new file mode 100644
index 0000000000000000000000000000000000000000..b6ffdb0fa033422c67080ae285d5876fe620dfd8
--- /dev/null
+++ b/src/dist/esm/storage/aws.js
@@ -0,0 +1,39 @@
+// src/storage/aws.ts
+import { AwsClient } from "aws4fetch";
+var cachedCredentials = null;
+async function getCredentials(url) {
+  if (cachedCredentials) {
+    const currentTime = new Date;
+    const fiveMinutesFromNow = new Date(currentTime.getTime() + 5 * 60000);
+    const expirationTime = new Date(cachedCredentials.Expiration);
+    if (expirationTime > fiveMinutesFromNow) {
+      return cachedCredentials;
+    }
+  }
+  const credentials = await fetch(url).then((res) => res.json());
+  cachedCredentials = credentials;
+  return credentials;
+}
+async function client() {
+  if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY) {
+    return new AwsClient({
+      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
+      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
+      sessionToken: process.env.AWS_SESSION_TOKEN,
+      region: process.env.AWS_REGION
+    });
+  }
+  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {
+    const credentials = await getCredentials("http://169.254.170.2" + process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI);
+    return new AwsClient({
+      accessKeyId: credentials.AccessKeyId,
+      secretAccessKey: credentials.SecretAccessKey,
+      sessionToken: credentials.Token,
+      region: process.env.AWS_REGION
+    });
+  }
+  throw new Error("No AWS credentials found");
+}
+export {
+  client
+};
diff --git a/src/dist/esm/storage/cloudflare.js b/src/dist/esm/storage/cloudflare.js
new file mode 100644
index 0000000000000000000000000000000000000000..6240e7aa07d7057623d82dd5be8f198e3c4abc07
--- /dev/null
+++ b/src/dist/esm/storage/cloudflare.js
@@ -0,0 +1,42 @@
+// src/storage/cloudflare.ts
+import { joinKey, splitKey } from "./storage.js";
+function CloudflareStorage(options) {
+  return {
+    async get(key) {
+      const value = await options.namespace.get(joinKey(key), "json");
+      if (!value)
+        return;
+      return value;
+    },
+    async set(key, value, expiry) {
+      await options.namespace.put(joinKey(key), JSON.stringify(value), {
+        expirationTtl: expiry ? Math.max(Math.floor((expiry.getTime() - Date.now()) / 1000), 60) : undefined
+      });
+    },
+    async remove(key) {
+      await options.namespace.delete(joinKey(key));
+    },
+    async* scan(prefix) {
+      let cursor;
+      while (true) {
+        const result = await options.namespace.list({
+          prefix: joinKey([...prefix, ""]),
+          cursor
+        });
+        for (const key of result.keys) {
+          const value = await options.namespace.get(key.name, "json");
+          if (value !== null) {
+            yield [splitKey(key.name), value];
+          }
+        }
+        if (result.list_complete) {
+          break;
+        }
+        cursor = result.cursor;
+      }
+    }
+  };
+}
+export {
+  CloudflareStorage
+};
diff --git a/src/dist/esm/storage/dynamo.js b/src/dist/esm/storage/dynamo.js
new file mode 100644
index 0000000000000000000000000000000000000000..3b7a2bbf3f248780743949c1535e43ac2c05b63f
--- /dev/null
+++ b/src/dist/esm/storage/dynamo.js
@@ -0,0 +1,116 @@
+// src/storage/dynamo.ts
+import { client } from "./aws.js";
+import { joinKey } from "./storage.js";
+function DynamoStorage(options) {
+  const pk = options.pk || "pk";
+  const sk = options.sk || "sk";
+  const ttl = options.ttl || "expiry";
+  const tableName = options.table;
+  function parseKey(key) {
+    if (key.length === 2) {
+      return {
+        pk: key[0],
+        sk: key[1]
+      };
+    }
+    return {
+      pk: joinKey(key.slice(0, 2)),
+      sk: joinKey(key.slice(2))
+    };
+  }
+  async function dynamo(action, payload) {
+    const c = await client();
+    const endpoint = options.endpoint || `https://dynamodb.${c.region}.amazonaws.com`;
+    const response = await c.fetch(endpoint, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-amz-json-1.0",
+        "X-Amz-Target": `DynamoDB_20120810.${action}`
+      },
+      body: JSON.stringify(payload)
+    });
+    if (!response.ok) {
+      throw new Error(`DynamoDB request failed: ${response.statusText}`);
+    }
+    return response.json();
+  }
+  return {
+    async get(key) {
+      const { pk: keyPk, sk: keySk } = parseKey(key);
+      const params = {
+        TableName: tableName,
+        Key: {
+          [pk]: { S: keyPk },
+          [sk]: { S: keySk }
+        }
+      };
+      const result = await dynamo("GetItem", params);
+      if (!result.Item)
+        return;
+      if (result.Item[ttl] && result.Item[ttl].N < Date.now() / 1000) {
+        return;
+      }
+      return JSON.parse(result.Item.value.S);
+    },
+    async set(key, value, expiry) {
+      const parsed = parseKey(key);
+      const params = {
+        TableName: tableName,
+        Item: {
+          [pk]: { S: parsed.pk },
+          [sk]: { S: parsed.sk },
+          ...expiry ? {
+            [ttl]: { N: Math.floor(expiry.getTime() / 1000).toString() }
+          } : {},
+          value: { S: JSON.stringify(value) }
+        }
+      };
+      await dynamo("PutItem", params);
+    },
+    async remove(key) {
+      const { pk: keyPk, sk: keySk } = parseKey(key);
+      const params = {
+        TableName: tableName,
+        Key: {
+          [pk]: { S: keyPk },
+          [sk]: { S: keySk }
+        }
+      };
+      await dynamo("DeleteItem", params);
+    },
+    async* scan(prefix) {
+      const prefixPk = prefix.length >= 2 ? joinKey(prefix.slice(0, 2)) : prefix[0];
+      const prefixSk = prefix.length > 2 ? joinKey(prefix.slice(2)) : "";
+      let lastEvaluatedKey = undefined;
+      const now = Date.now() / 1000;
+      while (true) {
+        const params = {
+          TableName: tableName,
+          ExclusiveStartKey: lastEvaluatedKey,
+          KeyConditionExpression: prefixSk ? `#pk = :pk AND begins_with(#sk, :sk)` : `#pk = :pk`,
+          ExpressionAttributeNames: {
+            "#pk": pk,
+            ...prefixSk && { "#sk": sk }
+          },
+          ExpressionAttributeValues: {
+            ":pk": { S: prefixPk },
+            ...prefixSk && { ":sk": { S: prefixSk } }
+          }
+        };
+        const result = await dynamo("Query", params);
+        for (const item of result.Items || []) {
+          if (item[ttl] && item[ttl].N < now) {
+            continue;
+          }
+          yield [[item[pk].S, item[sk].S], JSON.parse(item.value.S)];
+        }
+        if (!result.LastEvaluatedKey)
+          break;
+        lastEvaluatedKey = result.LastEvaluatedKey;
+      }
+    }
+  };
+}
+export {
+  DynamoStorage
+};
diff --git a/src/dist/esm/storage/memory.js b/src/dist/esm/storage/memory.js
new file mode 100644
index 0000000000000000000000000000000000000000..4017390a80ddfd2868337ef51a72e6df136452ca
--- /dev/null
+++ b/src/dist/esm/storage/memory.js
@@ -0,0 +1,88 @@
+// src/storage/memory.ts
+import { joinKey, splitKey } from "./storage.js";
+import { existsSync, readFileSync } from "node:fs";
+import { writeFile } from "node:fs/promises";
+function MemoryStorage(input) {
+  const store = [];
+  if (input?.persist) {
+    if (existsSync(input.persist)) {
+      const file = readFileSync(input?.persist);
+      store.push(...JSON.parse(file.toString()));
+    }
+  }
+  async function save() {
+    if (!input?.persist)
+      return;
+    const file = JSON.stringify(store);
+    await writeFile(input.persist, file);
+  }
+  function search(key) {
+    let left = 0;
+    let right = store.length - 1;
+    while (left <= right) {
+      const mid = Math.floor((left + right) / 2);
+      const comparison = key.localeCompare(store[mid][0]);
+      if (comparison === 0) {
+        return { found: true, index: mid };
+      } else if (comparison < 0) {
+        right = mid - 1;
+      } else {
+        left = mid + 1;
+      }
+    }
+    return { found: false, index: left };
+  }
+  return {
+    async get(key) {
+      const match = search(joinKey(key));
+      if (!match.found)
+        return;
+      const entry = store[match.index][1];
+      if (entry.expiry && Date.now() >= entry.expiry) {
+        store.splice(match.index, 1);
+        await save();
+        return;
+      }
+      return entry.value;
+    },
+    async set(key, value, expiry) {
+      const joined = joinKey(key);
+      const match = search(joined);
+      const entry = [
+        joined,
+        {
+          value,
+          expiry: expiry ? expiry.getTime() : expiry
+        }
+      ];
+      if (!match.found) {
+        store.splice(match.index, 0, entry);
+      } else {
+        store[match.index] = entry;
+      }
+      await save();
+    },
+    async remove(key) {
+      const joined = joinKey(key);
+      const match = search(joined);
+      if (match.found) {
+        store.splice(match.index, 1);
+        await save();
+      }
+    },
+    async* scan(prefix) {
+      const now = Date.now();
+      const prefixStr = joinKey(prefix);
+      for (const [key, entry] of store) {
+        if (!key.startsWith(prefixStr))
+          continue;
+        if (entry.expiry && now >= entry.expiry)
+          continue;
+        yield [splitKey(key), entry.value];
+      }
+    }
+  };
+}
+export {
+  MemoryStorage
+};
diff --git a/src/dist/esm/storage/storage.js b/src/dist/esm/storage/storage.js
new file mode 100644
index 0000000000000000000000000000000000000000..84f125dcad424beaf271142a53e313469a591e4e
--- /dev/null
+++ b/src/dist/esm/storage/storage.js
@@ -0,0 +1,36 @@
+// src/storage/storage.ts
+var SEPERATOR = String.fromCharCode(31);
+function joinKey(key) {
+  return key.join(SEPERATOR);
+}
+function splitKey(key) {
+  return key.split(SEPERATOR);
+}
+var Storage;
+((Storage) => {
+  function encode(key) {
+    return key.map((k) => k.replaceAll(SEPERATOR, ""));
+  }
+  function get(adapter, key) {
+    return adapter.get(encode(key));
+  }
+  Storage.get = get;
+  function set(adapter, key, value, ttl) {
+    const expiry = ttl ? new Date(Date.now() + ttl * 1000) : undefined;
+    return adapter.set(encode(key), value, expiry);
+  }
+  Storage.set = set;
+  function remove(adapter, key) {
+    return adapter.remove(encode(key));
+  }
+  Storage.remove = remove;
+  function scan(adapter, key) {
+    return adapter.scan(encode(key));
+  }
+  Storage.scan = scan;
+})(Storage ||= {});
+export {
+  splitKey,
+  joinKey,
+  Storage
+};
diff --git a/src/dist/esm/subject.js b/src/dist/esm/subject.js
new file mode 100644
index 0000000000000000000000000000000000000000..ec650b79e807b6da62408317dc31abf3f44df10c
--- /dev/null
+++ b/src/dist/esm/subject.js
@@ -0,0 +1,7 @@
+// src/subject.ts
+function createSubjects(types) {
+  return { ...types };
+}
+export {
+  createSubjects
+};
diff --git a/src/dist/esm/ui/base.js b/src/dist/esm/ui/base.js
new file mode 100644
index 0000000000000000000000000000000000000000..ce4b3f50c0f2dc087537b7c11e28f1dd31d779a6
--- /dev/null
+++ b/src/dist/esm/ui/base.js
@@ -0,0 +1,407 @@
+// src/ui/ui.css
+var ui_default = `@import url("https://unpkg.com/tailwindcss@3.4.15/src/css/preflight.css");
+
+:root {
+  --color-background-dark: #0e0e11;
+  --color-background-light: #ffffff;
+  --color-primary-dark: #6772e5;
+  --color-primary-light: #6772e5;
+
+  --color-background-success-dark: oklch(0.3 0.04 172);
+  --color-background-success-light: oklch(from var(--color-background-success-dark) 0.83 c h);
+  --color-success-dark: oklch(from var(--color-background-success-dark) 0.92 c h);
+  --color-success-light: oklch(from var(--color-background-success-dark) 0.25 c h);
+
+  --color-background-error-dark: oklch(0.32 0.07 15);
+  --color-background-error-light: oklch(from var(--color-background-error-dark) 0.92 c h);
+  --color-error-dark: oklch(from var(--color-background-error-dark) 0.92 c h);
+  --color-error-light: oklch(from var(--color-background-error-dark) 0.25 c h);
+
+  --border-radius: 0;
+
+  --color-background: var(--color-background-dark);
+  --color-primary: var(--color-primary-dark);
+
+  --color-background-success: var(--color-background-success-dark);
+  --color-success: var(--color-success-dark);
+  --color-background-error: var(--color-background-error-dark);
+  --color-error: var(--color-error-dark);
+
+  @media (prefers-color-scheme: light) {
+    --color-background: var(--color-background-light);
+    --color-primary: var(--color-primary-light);
+
+    --color-background-success: var(--color-background-success-light);
+    --color-success: var(--color-success-light);
+    --color-background-error: var(--color-background-error-light);
+    --color-error: var(--color-error-light);
+  }
+
+  --color-high: oklch(
+    from var(--color-background) clamp(0, calc((l - 0.714) * -1000), 1) 0 0
+  );
+  --color-low: oklch(from var(--color-background) clamp(0, calc((l - 0.714) * 1000), 1) 0 0);
+  --lightness-high: color-mix(
+    in oklch,
+    var(--color-high) 0%,
+    oklch(var(--color-high) 0 0)
+  );
+  --lightness-low: color-mix(
+    in oklch,
+    var(--color-low) 0%,
+    oklch(var(--color-low) 0 0)
+  );
+  --font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
+    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
+  --font-scale: 1;
+
+  --font-size-xs: calc(0.75rem * var(--font-scale));
+  --font-size-sm: calc(0.875rem * var(--font-scale));
+  --font-size-md: calc(1rem * var(--font-scale));
+  --font-size-lg: calc(1.125rem * var(--font-scale));
+  --font-size-xl: calc(1.25rem * var(--font-scale));
+  --font-size-2xl: calc(1.5rem * var(--font-scale));
+}
+
+[data-component="root"] {
+  font-family: var(--font-family);
+  background-color: var(--color-background);
+  padding: 1rem;
+  color: white;
+  position: absolute;
+  inset: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  flex-direction: column;
+  user-select: none;
+  color: var(--color-high);
+}
+
+[data-component="center"] {
+  width: 380px;
+  display: flex;
+  flex-direction: column;
+  gap: 1.5rem;
+
+  &[data-size="small"] {
+    width: 300px;
+  }
+}
+
+[data-component="link"] {
+  text-decoration: underline;
+  text-underline-offset: 0.125rem;
+  font-weight: 600;
+}
+
+[data-component="label"] {
+  display: flex;
+  gap: 0.75rem;
+  flex-direction: column;
+  font-size: var(--font-size-xs);
+}
+
+[data-component="logo"] {
+  margin: 0 auto;
+  height: 2.5rem;
+  width: auto;
+  display: none;
+
+  @media (prefers-color-scheme: light) {
+    &[data-mode="light"] {
+      display: block;
+    }
+  }
+
+  @media (prefers-color-scheme: dark) {
+    &[data-mode="dark"] {
+      display: block;
+    }
+  }
+}
+
+[data-component="logo-default"] {
+  margin: 0 auto;
+  height: 2.5rem;
+  width: auto;
+
+  @media (prefers-color-scheme: light) {
+    color: var(--color-high);
+  }
+
+  @media (prefers-color-scheme: dark) {
+    color: var(--color-high);
+  }
+}
+
+[data-component="input"] {
+  width: 100%;
+  height: 2.5rem;
+  padding: 0 1rem;
+  border: 1px solid transparent;
+  --background: oklch(
+    from var(--color-background) calc(l + (-0.06 * clamp(0, calc((l - 0.714) * 1000), 1) + 0.03)) c h
+
+  );
+  background: var(--background);
+  border-color: oklch(
+    from var(--color-background)
+      calc(clamp(0.22, l + (-0.12 * clamp(0, calc((l - 0.714) * 1000), 1) + 0.06), 0.88)) c h
+  );
+  border-radius: calc(var(--border-radius) * 0.25rem);
+  font-size: var(--font-size-sm);
+  outline: none;
+
+  &:focus {
+    border-color: oklch(
+      from var(--color-background)
+        calc(clamp(0.3, l + (-0.2 * clamp(0, calc((l - 0.714) * 1000), 1) + 0.1), 0.7)) c h
+    );
+  }
+
+  &:user-invalid:not(:focus) {
+    border-color: oklch(0.4 0.09 7.91);
+  }
+}
+
+[data-component="button"] {
+  height: 2.5rem;
+  cursor: pointer;
+  border: 0;
+  font-weight: 500;
+  font-size: var(--font-size-sm);
+  border-radius: calc(var(--border-radius) * 0.25rem);
+  display: flex;
+  gap: 0.75rem;
+  align-items: center;
+  justify-content: center;
+  background: var(--color-primary);
+  color: oklch(from var(--color-primary) clamp(0, calc((l - 0.714) * -1000), 1) 0 0);
+
+  &[data-color="ghost"] {
+    background: transparent;
+    color: var(--color-high);
+    border: 1px solid
+      oklch(
+        from var(--color-background)
+          calc(clamp(0.22, l + (-0.12 * clamp(0, calc((l - 0.714) * 1000), 1) + 0.06), 0.88)) c h
+      );
+  }
+
+  [data-slot="icon"] {
+    width: 16px;
+    height: 16px;
+
+    svg {
+      width: 100%;
+      height: 100%;
+    }
+  }
+}
+
+[data-component="form"] {
+  max-width: 100%;
+  display: flex;
+  flex-direction: column;
+  gap: 1rem;
+  margin: 0;
+}
+
+[data-component="form-alert"] {
+  height: 2.5rem;
+  display: flex;
+  align-items: center;
+  padding: 0 1rem;
+  border-radius: calc(var(--border-radius) * 0.25rem);
+  background: var(--color-background-error);
+  color: var(--color-error);
+  text-align: left;
+  font-size: 0.75rem;
+  gap: 0.5rem;
+
+  &[data-color="success"] {
+    background: var(--color-background-success);
+    color: var(--color-success);
+
+    [data-slot="icon-success"] { display: block; }
+    [data-slot="icon-danger"] { display: none; }
+  }
+
+  &:has([data-slot="message"]:empty) {
+    display: none;
+  }
+
+  [data-slot="icon-success"],
+  [data-slot="icon-danger"] {
+    width: 1rem;
+    height: 1rem;
+  }
+  [data-slot="icon-success"] { display: none; }
+}
+
+[data-component="form-footer"] {
+  display: flex;
+  gap: 1rem;
+  font-size: 0.75rem;
+  align-items: center;
+  justify-content: center;
+
+  &:has(> :nth-child(2)) {
+    justify-content: space-between;
+  }
+}
+`;
+
+// src/ui/theme.ts
+var THEME_OPENAUTH = {
+  title: "OpenAuth",
+  radius: "none",
+  background: {
+    dark: "black",
+    light: "white"
+  },
+  primary: {
+    dark: "white",
+    light: "black"
+  },
+  font: {
+    family: "IBM Plex Sans, sans-serif"
+  },
+  css: `
+    @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@100;200;300;400;500;600;700&display=swap');
+  `
+};
+function getTheme() {
+  return globalThis.OPENAUTH_THEME || THEME_OPENAUTH;
+}
+
+// src/ui/base.tsx
+import { jsxDEV, Fragment } from "hono/jsx/jsx-dev-runtime";
+function Layout(props) {
+  const theme = getTheme();
+  function get(key, mode) {
+    if (!theme)
+      return;
+    if (!theme[key])
+      return;
+    if (typeof theme[key] === "string")
+      return theme[key];
+    return theme[key][mode];
+  }
+  const radius = (() => {
+    if (theme?.radius === "none")
+      return "0";
+    if (theme?.radius === "sm")
+      return "1";
+    if (theme?.radius === "md")
+      return "1.25";
+    if (theme?.radius === "lg")
+      return "1.5";
+    if (theme?.radius === "full")
+      return "1000000000001";
+    return "1";
+  })();
+  const hasLogo = get("logo", "light") && get("logo", "dark");
+  return /* @__PURE__ */ jsxDEV("html", {
+    style: {
+      "--color-background-light": get("background", "light"),
+      "--color-background-dark": get("background", "dark"),
+      "--color-primary-light": get("primary", "light"),
+      "--color-primary-dark": get("primary", "dark"),
+      "--font-family": theme?.font?.family,
+      "--font-scale": theme?.font?.scale,
+      "--border-radius": radius
+    },
+    children: [
+      /* @__PURE__ */ jsxDEV("head", {
+        children: [
+          /* @__PURE__ */ jsxDEV("title", {
+            children: theme?.title || "OpenAuthJS"
+          }, undefined, false, undefined, this),
+          /* @__PURE__ */ jsxDEV("meta", {
+            charset: "utf-8"
+          }, undefined, false, undefined, this),
+          /* @__PURE__ */ jsxDEV("meta", {
+            name: "viewport",
+            content: "width=device-width, initial-scale=1"
+          }, undefined, false, undefined, this),
+          theme?.favicon ? /* @__PURE__ */ jsxDEV("link", {
+            rel: "icon",
+            href: theme?.favicon
+          }, undefined, false, undefined, this) : /* @__PURE__ */ jsxDEV(Fragment, {
+            children: [
+              /* @__PURE__ */ jsxDEV("link", {
+                rel: "icon",
+                href: "https://openauth.js.org/favicon.ico",
+                sizes: "48x48"
+              }, undefined, false, undefined, this),
+              /* @__PURE__ */ jsxDEV("link", {
+                rel: "icon",
+                href: "https://openauth.js.org/favicon.svg",
+                media: "(prefers-color-scheme: light)"
+              }, undefined, false, undefined, this),
+              /* @__PURE__ */ jsxDEV("link", {
+                rel: "icon",
+                href: "https://openauth.js.org/favicon-dark.svg",
+                media: "(prefers-color-scheme: dark)"
+              }, undefined, false, undefined, this),
+              /* @__PURE__ */ jsxDEV("link", {
+                rel: "shortcut icon",
+                href: "https://openauth.js.org/favicon.svg",
+                type: "image/svg+xml"
+              }, undefined, false, undefined, this)
+            ]
+          }, undefined, true, undefined, this),
+          /* @__PURE__ */ jsxDEV("style", {
+            dangerouslySetInnerHTML: { __html: ui_default }
+          }, undefined, false, undefined, this),
+          theme?.css && /* @__PURE__ */ jsxDEV("style", {
+            dangerouslySetInnerHTML: { __html: theme.css }
+          }, undefined, false, undefined, this)
+        ]
+      }, undefined, true, undefined, this),
+      /* @__PURE__ */ jsxDEV("body", {
+        children: /* @__PURE__ */ jsxDEV("div", {
+          "data-component": "root",
+          children: /* @__PURE__ */ jsxDEV("div", {
+            "data-component": "center",
+            "data-size": props.size,
+            children: [
+              hasLogo ? /* @__PURE__ */ jsxDEV(Fragment, {
+                children: [
+                  /* @__PURE__ */ jsxDEV("img", {
+                    "data-component": "logo",
+                    src: get("logo", "light"),
+                    "data-mode": "light"
+                  }, undefined, false, undefined, this),
+                  /* @__PURE__ */ jsxDEV("img", {
+                    "data-component": "logo",
+                    src: get("logo", "dark"),
+                    "data-mode": "dark"
+                  }, undefined, false, undefined, this)
+                ]
+              }, undefined, true, undefined, this) : ICON_OPENAUTH,
+              props.children
+            ]
+          }, undefined, true, undefined, this)
+        }, undefined, false, undefined, this)
+      }, undefined, false, undefined, this)
+    ]
+  }, undefined, true, undefined, this);
+}
+var ICON_OPENAUTH = /* @__PURE__ */ jsxDEV("svg", {
+  "data-component": "logo-default",
+  width: "51",
+  height: "51",
+  viewBox: "0 0 51 51",
+  fill: "none",
+  xmlns: "http://www.w3.org/2000/svg",
+  children: /* @__PURE__ */ jsxDEV("path", {
+    d: "M0 50.2303V0.12854H50.1017V50.2303H0ZM3.08002 11.8326H11.7041V3.20856H3.08002V11.8326ZM14.8526 11.8326H23.4766V3.20856H14.8526V11.8326ZM26.5566 11.8326H35.1807V3.20856H26.5566V11.8326ZM38.3292 11.8326H47.0217V3.20856H38.3292V11.8326ZM3.08002 23.6052H11.7041V14.9811H3.08002V23.6052ZM14.8526 23.6052H23.4766V14.9811H14.8526V23.6052ZM26.5566 23.6052H35.1807V14.9811H26.5566V23.6052ZM38.3292 23.6052H47.0217V14.9811H38.3292V23.6052ZM3.08002 35.3092H11.7041V26.6852H3.08002V35.3092ZM14.8526 35.3092H23.4766V26.6852H14.8526V35.3092ZM26.5566 35.3092H35.1807V26.6852H26.5566V35.3092ZM38.3292 35.3092H47.0217V26.6852H38.3292V35.3092ZM3.08002 47.1502H11.7041V38.3893H3.08002V47.1502ZM14.8526 47.1502H23.4766V38.3893H14.8526V47.1502ZM26.5566 47.1502H35.1807V38.3893H26.5566V47.1502ZM38.3292 47.1502H47.0217V38.3893H38.3292V47.1502Z",
+    fill: "currentColor"
+  }, undefined, false, undefined, this)
+}, undefined, false, undefined, this);
+export {
+  Layout
+};
diff --git a/src/dist/esm/ui/code.js b/src/dist/esm/ui/code.js
new file mode 100644
index 0000000000000000000000000000000000000000..73c5fb2bcf835b918cde67da581c713577dbd529
--- /dev/null
+++ b/src/dist/esm/ui/code.js
@@ -0,0 +1,151 @@
+// src/ui/code.tsx
+import { UnknownStateError } from "../error.js";
+import { Layout } from "./base.js";
+import { FormAlert } from "./form.js";
+import { jsxDEV } from "hono/jsx/jsx-dev-runtime";
+var DEFAULT_COPY = {
+  email_placeholder: "Email",
+  email_invalid: "Email address is not valid",
+  button_continue: "Continue",
+  code_info: "We'll send a pin code to your email.",
+  code_placeholder: "Code",
+  code_invalid: "Invalid code",
+  code_sent: "Code sent to ",
+  code_resent: "Code resent to ",
+  code_didnt_get: "Didn't get code?",
+  code_resend: "Resend"
+};
+function CodeUI(props) {
+  const copy = {
+    ...DEFAULT_COPY,
+    ...props.copy
+  };
+  const mode = props.mode ?? "email";
+  return {
+    sendCode: props.sendCode,
+    length: 6,
+    request: async (_req, state, _form, error) => {
+      if (state.type === "start") {
+        const jsx = /* @__PURE__ */ jsxDEV(Layout, {
+          children: [
+            /* @__PURE__ */ jsxDEV("form", {
+              "data-component": "form",
+              method: "post",
+              children: [
+                error?.type === "invalid_claim" && /* @__PURE__ */ jsxDEV(FormAlert, {
+                  message: copy.email_invalid
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  type: "hidden",
+                  name: "action",
+                  value: "request"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  "data-component": "input",
+                  autofocus: true,
+                  type: mode === "email" ? "email" : "tel",
+                  name: mode === "email" ? "email" : "phone",
+                  inputmode: mode === "email" ? "email" : "numeric",
+                  required: true,
+                  placeholder: copy.email_placeholder
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("button", {
+                  "data-component": "button",
+                  children: copy.button_continue
+                }, undefined, false, undefined, this)
+              ]
+            }, undefined, true, undefined, this),
+            /* @__PURE__ */ jsxDEV("p", {
+              "data-component": "form-footer",
+              children: copy.code_info
+            }, undefined, false, undefined, this)
+          ]
+        }, undefined, true, undefined, this);
+        return new Response(jsx.toString(), {
+          headers: {
+            "Content-Type": "text/html"
+          }
+        });
+      }
+      if (state.type === "code") {
+        const jsx = /* @__PURE__ */ jsxDEV(Layout, {
+          children: [
+            /* @__PURE__ */ jsxDEV("form", {
+              "data-component": "form",
+              class: "form",
+              method: "post",
+              children: [
+                error?.type === "invalid_code" && /* @__PURE__ */ jsxDEV(FormAlert, {
+                  message: copy.code_invalid
+                }, undefined, false, undefined, this),
+                state.type === "code" && /* @__PURE__ */ jsxDEV(FormAlert, {
+                  message: (state.resend ? copy.code_resent : copy.code_sent) + state.claims.email,
+                  color: "success"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  type: "hidden",
+                  name: "action",
+                  value: "verify"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  "data-component": "input",
+                  autofocus: true,
+                  minLength: 6,
+                  maxLength: 6,
+                  type: "text",
+                  name: "code",
+                  required: true,
+                  inputmode: "numeric",
+                  autocomplete: "one-time-code",
+                  placeholder: copy.code_placeholder
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("button", {
+                  "data-component": "button",
+                  children: copy.button_continue
+                }, undefined, false, undefined, this)
+              ]
+            }, undefined, true, undefined, this),
+            /* @__PURE__ */ jsxDEV("form", {
+              method: "post",
+              children: [
+                Object.entries(state.claims).map(([key, value]) => /* @__PURE__ */ jsxDEV("input", {
+                  type: "hidden",
+                  name: key,
+                  value,
+                  className: "hidden"
+                }, key, false, undefined, this)),
+                /* @__PURE__ */ jsxDEV("input", {
+                  type: "hidden",
+                  name: "action",
+                  value: "request"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("div", {
+                  "data-component": "form-footer",
+                  children: /* @__PURE__ */ jsxDEV("span", {
+                    children: [
+                      copy.code_didnt_get,
+                      " ",
+                      /* @__PURE__ */ jsxDEV("button", {
+                        "data-component": "link",
+                        children: copy.code_resend
+                      }, undefined, false, undefined, this)
+                    ]
+                  }, undefined, true, undefined, this)
+                }, undefined, false, undefined, this)
+              ]
+            }, undefined, true, undefined, this)
+          ]
+        }, undefined, true, undefined, this);
+        return new Response(jsx.toString(), {
+          headers: {
+            "Content-Type": "text/html"
+          }
+        });
+      }
+      throw new UnknownStateError;
+    }
+  };
+}
+export {
+  CodeUI
+};
diff --git a/src/dist/esm/ui/form.js b/src/dist/esm/ui/form.js
new file mode 100644
index 0000000000000000000000000000000000000000..833ae5484aa0a75ee33118fb42b63a26ebec61aa
--- /dev/null
+++ b/src/dist/esm/ui/form.js
@@ -0,0 +1,43 @@
+// src/ui/form.tsx
+import { jsxDEV } from "hono/jsx/jsx-dev-runtime";
+function FormAlert(props) {
+  return /* @__PURE__ */ jsxDEV("div", {
+    "data-component": "form-alert",
+    "data-color": props.color,
+    children: [
+      /* @__PURE__ */ jsxDEV("svg", {
+        "data-slot": "icon-success",
+        xmlns: "http://www.w3.org/2000/svg",
+        fill: "none",
+        viewBox: "0 0 24 24",
+        "stroke-width": "1.5",
+        stroke: "currentColor",
+        children: /* @__PURE__ */ jsxDEV("path", {
+          "stroke-linecap": "round",
+          "stroke-linejoin": "round",
+          d: "M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
+        }, undefined, false, undefined, this)
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("svg", {
+        "data-slot": "icon-danger",
+        xmlns: "http://www.w3.org/2000/svg",
+        fill: "none",
+        viewBox: "0 0 24 24",
+        "stroke-width": "1.5",
+        stroke: "currentColor",
+        children: /* @__PURE__ */ jsxDEV("path", {
+          "stroke-linecap": "round",
+          "stroke-linejoin": "round",
+          d: "M12 9v3.75m9-.75a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 3.75h.008v.008H12v-.008Z"
+        }, undefined, false, undefined, this)
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("span", {
+        "data-slot": "message",
+        children: props.message
+      }, undefined, false, undefined, this)
+    ]
+  }, undefined, true, undefined, this);
+}
+export {
+  FormAlert
+};
diff --git a/src/dist/esm/ui/icon.js b/src/dist/esm/ui/icon.js
new file mode 100644
index 0000000000000000000000000000000000000000..d454d73a0da8fee5f7f0455d884685aea368591f
--- /dev/null
+++ b/src/dist/esm/ui/icon.js
@@ -0,0 +1,92 @@
+// src/ui/icon.tsx
+import { jsxDEV } from "hono/jsx/jsx-dev-runtime";
+var ICON_GITHUB = /* @__PURE__ */ jsxDEV("svg", {
+  viewBox: "0 0 256 250",
+  width: "256",
+  height: "250",
+  fill: "currentColor",
+  xmlns: "http://www.w3.org/2000/svg",
+  preserveAspectRatio: "xMidYMid",
+  children: /* @__PURE__ */ jsxDEV("path", {
+    d: "M128.001 0C57.317 0 0 57.307 0 128.001c0 56.554 36.676 104.535 87.535 121.46 6.397 1.185 8.746-2.777 8.746-6.158 0-3.052-.12-13.135-.174-23.83-35.61 7.742-43.124-15.103-43.124-15.103-5.823-14.795-14.213-18.73-14.213-18.73-11.613-7.944.876-7.78.876-7.78 12.853.902 19.621 13.19 19.621 13.19 11.417 19.568 29.945 13.911 37.249 10.64 1.149-8.272 4.466-13.92 8.127-17.116-28.431-3.236-58.318-14.212-58.318-63.258 0-13.975 5-25.394 13.188-34.358-1.329-3.224-5.71-16.242 1.24-33.874 0 0 10.749-3.44 35.21 13.121 10.21-2.836 21.16-4.258 32.038-4.307 10.878.049 21.837 1.47 32.066 4.307 24.431-16.56 35.165-13.12 35.165-13.12 6.967 17.63 2.584 30.65 1.255 33.873 8.207 8.964 13.173 20.383 13.173 34.358 0 49.163-29.944 59.988-58.447 63.157 4.591 3.972 8.682 11.762 8.682 23.704 0 17.126-.148 30.91-.148 35.126 0 3.407 2.304 7.398 8.792 6.14C219.37 232.5 256 184.537 256 128.002 256 57.307 198.691 0 128.001 0Zm-80.06 182.34c-.282.636-1.283.827-2.194.39-.929-.417-1.45-1.284-1.15-1.922.276-.655 1.279-.838 2.205-.399.93.418 1.46 1.293 1.139 1.931Zm6.296 5.618c-.61.566-1.804.303-2.614-.591-.837-.892-.994-2.086-.375-2.66.63-.566 1.787-.301 2.626.591.838.903 1 2.088.363 2.66Zm4.32 7.188c-.785.545-2.067.034-2.86-1.104-.784-1.138-.784-2.503.017-3.05.795-.547 2.058-.055 2.861 1.075.782 1.157.782 2.522-.019 3.08Zm7.304 8.325c-.701.774-2.196.566-3.29-.49-1.119-1.032-1.43-2.496-.726-3.27.71-.776 2.213-.558 3.315.49 1.11 1.03 1.45 2.505.701 3.27Zm9.442 2.81c-.31 1.003-1.75 1.459-3.199 1.033-1.448-.439-2.395-1.613-2.103-2.626.301-1.01 1.747-1.484 3.207-1.028 1.446.436 2.396 1.602 2.095 2.622Zm10.744 1.193c.036 1.055-1.193 1.93-2.715 1.95-1.53.034-2.769-.82-2.786-1.86 0-1.065 1.202-1.932 2.733-1.958 1.522-.03 2.768.818 2.768 1.868Zm10.555-.405c.182 1.03-.875 2.088-2.387 2.37-1.485.271-2.861-.365-3.05-1.386-.184-1.056.893-2.114 2.376-2.387 1.514-.263 2.868.356 3.061 1.403Z"
+  }, undefined, false, undefined, this)
+}, undefined, false, undefined, this);
+var ICON_GOOGLE = /* @__PURE__ */ jsxDEV("svg", {
+  width: "256",
+  height: "262",
+  viewBox: "0 0 256 262",
+  xmlns: "http://www.w3.org/2000/svg",
+  preserveAspectRatio: "xMidYMid",
+  children: [
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027",
+      fill: "#4285F4"
+    }, undefined, false, undefined, this),
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1",
+      fill: "#34A853"
+    }, undefined, false, undefined, this),
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782",
+      fill: "#FBBC05"
+    }, undefined, false, undefined, this),
+    /* @__PURE__ */ jsxDEV("path", {
+      d: "M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251",
+      fill: "#EB4335"
+    }, undefined, false, undefined, this)
+  ]
+}, undefined, true, undefined, this);
+var ICON_EMAIL = /* @__PURE__ */ jsxDEV("svg", {
+  xmlns: "http://www.w3.org/2000/svg",
+  fill: "none",
+  viewBox: "0 0 24 24",
+  "stroke-width": "1.5",
+  stroke: "currentColor",
+  class: "size-6",
+  children: /* @__PURE__ */ jsxDEV("path", {
+    "stroke-linecap": "round",
+    "stroke-linejoin": "round",
+    d: "M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75"
+  }, undefined, false, undefined, this)
+}, undefined, false, undefined, this);
+var ICON_SLACK = /* @__PURE__ */ jsxDEV("svg", {
+  width: "24",
+  height: "24",
+  viewBox: "0 0 24 24",
+  fill: "none",
+  xmlns: "http://www.w3.org/2000/svg",
+  children: /* @__PURE__ */ jsxDEV("g", {
+    children: [
+      /* @__PURE__ */ jsxDEV("path", {
+        "fill-rule": "evenodd",
+        "clip-rule": "evenodd",
+        d: "M8.79948 0C7.47279 0.000978593 6.39909 1.07547 6.40007 2.39951C6.39909 3.72355 7.47377 4.79804 8.80046 4.79902H11.2009V2.40049C11.2018 1.07645 10.1271 0.00195719 8.79948 0ZM8.79948 6.4H2.40039C1.07371 6.40098 -0.000977873 7.47547 2.67973e-06 8.79951C-0.00195842 10.1235 1.07273 11.198 2.39941 11.2H8.79948C10.1262 11.199 11.2009 10.1245 11.1999 8.80049C11.2009 7.47547 10.1262 6.40098 8.79948 6.4Z",
+        fill: "currentColor"
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        "fill-rule": "evenodd",
+        "clip-rule": "evenodd",
+        d: "M24.0007 8.79951C24.0016 7.47547 22.9269 6.40098 21.6003 6.4C20.2736 6.40098 19.1989 7.47547 19.1999 8.79951V11.2H21.6003C22.9269 11.199 24.0016 10.1245 24.0007 8.79951ZM17.6006 8.79951V2.39951C17.6016 1.07645 16.5279 0.00195719 15.2012 0C13.8745 0.000978593 12.7998 1.07547 12.8008 2.39951V8.79951C12.7988 10.1235 13.8735 11.198 15.2002 11.2C16.5269 11.199 17.6016 10.1245 17.6006 8.79951Z",
+        fill: "currentColor"
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        "fill-rule": "evenodd",
+        "clip-rule": "evenodd",
+        d: "M15.1992 23.9998C16.5259 23.9988 17.6006 22.9243 17.5996 21.6003C17.6006 20.2763 16.5259 19.2018 15.1992 19.2008H12.7988V21.6003C12.7978 22.9234 13.8725 23.9978 15.1992 23.9998ZM15.1992 17.5988H21.5993C22.926 17.5978 24.0007 16.5234 23.9997 15.1993C24.0016 13.8753 22.927 12.8008 21.6003 12.7988H15.2002C13.8735 12.7998 12.7988 13.8743 12.7998 15.1983C12.7988 16.5234 13.8725 17.5978 15.1992 17.5988Z",
+        fill: "currentColor"
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        "fill-rule": "evenodd",
+        "clip-rule": "evenodd",
+        d: "M0 15.1993C-0.000979882 16.5234 1.07371 17.5978 2.40039 17.5988C3.72708 17.5978 4.80177 16.5234 4.80079 15.1993V12.7998H2.40039C1.07371 12.8008 -0.000979882 13.8753 0 15.1993ZM6.40007 15.1993V21.5993C6.3981 22.9234 7.47279 23.9978 8.79948 23.9998C10.1262 23.9988 11.2009 22.9243 11.1999 21.6003V15.2013C11.2018 13.8772 10.1271 12.8027 8.80046 12.8008C7.47279 12.8008 6.39909 13.8753 6.40007 15.1993Z",
+        fill: "currentColor"
+      }, undefined, false, undefined, this)
+    ]
+  }, undefined, true, undefined, this)
+}, undefined, false, undefined, this);
+export {
+  ICON_SLACK,
+  ICON_GOOGLE,
+  ICON_GITHUB,
+  ICON_EMAIL
+};
diff --git a/src/dist/esm/ui/password.js b/src/dist/esm/ui/password.js
new file mode 100644
index 0000000000000000000000000000000000000000..23879aa25a00ad5df726d192fbc46c7d0ff6b85e
--- /dev/null
+++ b/src/dist/esm/ui/password.js
@@ -0,0 +1,338 @@
+// src/ui/password.tsx
+import { Layout } from "./base.js";
+import"./form.js";
+import { FormAlert } from "./form.js";
+import { jsxDEV, Fragment } from "hono/jsx/jsx-dev-runtime";
+var DEFAULT_COPY = {
+  error_email_taken: "There is already an account with this email.",
+  error_invalid_code: "Code is incorrect.",
+  error_invalid_email: "Email is not valid.",
+  error_invalid_password: "Password is incorrect.",
+  error_password_mismatch: "Passwords do not match.",
+  error_validation_error: "Password does not meet requirements.",
+  register_title: "Welcome to the app",
+  register_description: "Sign in with your email",
+  login_title: "Welcome to the app",
+  login_description: "Sign in with your email",
+  register: "Register",
+  register_prompt: "Don't have an account?",
+  login_prompt: "Already have an account?",
+  login: "Login",
+  change_prompt: "Forgot password?",
+  code_resend: "Resend code",
+  code_return: "Back to",
+  logo: "A",
+  input_email: "Email",
+  input_password: "Password",
+  input_code: "Code",
+  input_repeat: "Repeat password",
+  button_continue: "Continue"
+};
+function PasswordUI(input) {
+  const copy = {
+    ...DEFAULT_COPY,
+    ...input.copy
+  };
+  return {
+    validatePassword: input.validatePassword,
+    sendCode: input.sendCode,
+    login: async (_req, form, error) => {
+      const jsx = /* @__PURE__ */ jsxDEV(Layout, {
+        children: /* @__PURE__ */ jsxDEV("form", {
+          "data-component": "form",
+          method: "post",
+          children: [
+            /* @__PURE__ */ jsxDEV(FormAlert, {
+              message: error?.type && copy?.[`error_${error.type}`]
+            }, undefined, false, undefined, this),
+            /* @__PURE__ */ jsxDEV("input", {
+              "data-component": "input",
+              type: "email",
+              name: "email",
+              required: true,
+              placeholder: copy.input_email,
+              autofocus: !error,
+              value: form?.get("email")?.toString()
+            }, undefined, false, undefined, this),
+            /* @__PURE__ */ jsxDEV("input", {
+              "data-component": "input",
+              autofocus: error?.type === "invalid_password",
+              required: true,
+              type: "password",
+              name: "password",
+              placeholder: copy.input_password,
+              autoComplete: "current-password"
+            }, undefined, false, undefined, this),
+            /* @__PURE__ */ jsxDEV("button", {
+              "data-component": "button",
+              children: copy.button_continue
+            }, undefined, false, undefined, this),
+            /* @__PURE__ */ jsxDEV("div", {
+              "data-component": "form-footer",
+              children: [
+                /* @__PURE__ */ jsxDEV("span", {
+                  children: [
+                    copy.register_prompt,
+                    " ",
+                    /* @__PURE__ */ jsxDEV("a", {
+                      "data-component": "link",
+                      href: "register",
+                      children: copy.register
+                    }, undefined, false, undefined, this)
+                  ]
+                }, undefined, true, undefined, this),
+                /* @__PURE__ */ jsxDEV("a", {
+                  "data-component": "link",
+                  href: "change",
+                  children: copy.change_prompt
+                }, undefined, false, undefined, this)
+              ]
+            }, undefined, true, undefined, this)
+          ]
+        }, undefined, true, undefined, this)
+      }, undefined, false, undefined, this);
+      return new Response(jsx.toString(), {
+        status: error ? 401 : 200,
+        headers: {
+          "Content-Type": "text/html"
+        }
+      });
+    },
+    register: async (_req, state, form, error) => {
+      const emailError = ["invalid_email", "email_taken"].includes(error?.type || "");
+      const passwordError = [
+        "invalid_password",
+        "password_mismatch",
+        "validation_error"
+      ].includes(error?.type || "");
+      const jsx = /* @__PURE__ */ jsxDEV(Layout, {
+        children: /* @__PURE__ */ jsxDEV("form", {
+          "data-component": "form",
+          method: "post",
+          children: [
+            /* @__PURE__ */ jsxDEV(FormAlert, {
+              message: error?.type ? error.type === "validation_error" ? error.message ?? copy?.[`error_${error.type}`] : copy?.[`error_${error.type}`] : undefined
+            }, undefined, false, undefined, this),
+            state.type === "start" && /* @__PURE__ */ jsxDEV(Fragment, {
+              children: [
+                /* @__PURE__ */ jsxDEV("input", {
+                  type: "hidden",
+                  name: "action",
+                  value: "register"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  "data-component": "input",
+                  autofocus: !error || emailError,
+                  type: "email",
+                  name: "email",
+                  value: !emailError ? form?.get("email")?.toString() : "",
+                  required: true,
+                  placeholder: copy.input_email
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  "data-component": "input",
+                  autofocus: passwordError,
+                  type: "password",
+                  name: "password",
+                  placeholder: copy.input_password,
+                  required: true,
+                  value: !passwordError ? form?.get("password")?.toString() : "",
+                  autoComplete: "new-password"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  "data-component": "input",
+                  type: "password",
+                  name: "repeat",
+                  required: true,
+                  autofocus: passwordError,
+                  placeholder: copy.input_repeat,
+                  autoComplete: "new-password"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("button", {
+                  "data-component": "button",
+                  children: copy.button_continue
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("div", {
+                  "data-component": "form-footer",
+                  children: /* @__PURE__ */ jsxDEV("span", {
+                    children: [
+                      copy.login_prompt,
+                      " ",
+                      /* @__PURE__ */ jsxDEV("a", {
+                        "data-component": "link",
+                        href: "authorize",
+                        children: copy.login
+                      }, undefined, false, undefined, this)
+                    ]
+                  }, undefined, true, undefined, this)
+                }, undefined, false, undefined, this)
+              ]
+            }, undefined, true, undefined, this),
+            state.type === "code" && /* @__PURE__ */ jsxDEV(Fragment, {
+              children: [
+                /* @__PURE__ */ jsxDEV("input", {
+                  type: "hidden",
+                  name: "action",
+                  value: "verify"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("input", {
+                  "data-component": "input",
+                  autofocus: true,
+                  name: "code",
+                  minLength: 6,
+                  maxLength: 6,
+                  required: true,
+                  placeholder: copy.input_code,
+                  autoComplete: "one-time-code"
+                }, undefined, false, undefined, this),
+                /* @__PURE__ */ jsxDEV("button", {
+                  "data-component": "button",
+                  children: copy.button_continue
+                }, undefined, false, undefined, this)
+              ]
+            }, undefined, true, undefined, this)
+          ]
+        }, undefined, true, undefined, this)
+      }, undefined, false, undefined, this);
+      return new Response(jsx.toString(), {
+        headers: {
+          "Content-Type": "text/html"
+        }
+      });
+    },
+    change: async (_req, state, form, error) => {
+      const passwordError = [
+        "invalid_password",
+        "password_mismatch",
+        "validation_error"
+      ].includes(error?.type || "");
+      const jsx = /* @__PURE__ */ jsxDEV(Layout, {
+        children: [
+          /* @__PURE__ */ jsxDEV("form", {
+            "data-component": "form",
+            method: "post",
+            replace: true,
+            children: [
+              /* @__PURE__ */ jsxDEV(FormAlert, {
+                message: error?.type ? error.type === "validation_error" ? error.message ?? copy?.[`error_${error.type}`] : copy?.[`error_${error.type}`] : undefined
+              }, undefined, false, undefined, this),
+              state.type === "start" && /* @__PURE__ */ jsxDEV(Fragment, {
+                children: [
+                  /* @__PURE__ */ jsxDEV("input", {
+                    type: "hidden",
+                    name: "action",
+                    value: "code"
+                  }, undefined, false, undefined, this),
+                  /* @__PURE__ */ jsxDEV("input", {
+                    "data-component": "input",
+                    autofocus: true,
+                    type: "email",
+                    name: "email",
+                    required: true,
+                    value: form?.get("email")?.toString(),
+                    placeholder: copy.input_email
+                  }, undefined, false, undefined, this)
+                ]
+              }, undefined, true, undefined, this),
+              state.type === "code" && /* @__PURE__ */ jsxDEV(Fragment, {
+                children: [
+                  /* @__PURE__ */ jsxDEV("input", {
+                    type: "hidden",
+                    name: "action",
+                    value: "verify"
+                  }, undefined, false, undefined, this),
+                  /* @__PURE__ */ jsxDEV("input", {
+                    "data-component": "input",
+                    autofocus: true,
+                    name: "code",
+                    minLength: 6,
+                    maxLength: 6,
+                    required: true,
+                    placeholder: copy.input_code,
+                    autoComplete: "one-time-code"
+                  }, undefined, false, undefined, this)
+                ]
+              }, undefined, true, undefined, this),
+              state.type === "update" && /* @__PURE__ */ jsxDEV(Fragment, {
+                children: [
+                  /* @__PURE__ */ jsxDEV("input", {
+                    type: "hidden",
+                    name: "action",
+                    value: "update"
+                  }, undefined, false, undefined, this),
+                  /* @__PURE__ */ jsxDEV("input", {
+                    "data-component": "input",
+                    autofocus: true,
+                    type: "password",
+                    name: "password",
+                    placeholder: copy.input_password,
+                    required: true,
+                    value: !passwordError ? form?.get("password")?.toString() : "",
+                    autoComplete: "new-password"
+                  }, undefined, false, undefined, this),
+                  /* @__PURE__ */ jsxDEV("input", {
+                    "data-component": "input",
+                    type: "password",
+                    name: "repeat",
+                    required: true,
+                    value: !passwordError ? form?.get("password")?.toString() : "",
+                    placeholder: copy.input_repeat,
+                    autoComplete: "new-password"
+                  }, undefined, false, undefined, this)
+                ]
+              }, undefined, true, undefined, this),
+              /* @__PURE__ */ jsxDEV("button", {
+                "data-component": "button",
+                children: copy.button_continue
+              }, undefined, false, undefined, this)
+            ]
+          }, undefined, true, undefined, this),
+          state.type === "code" && /* @__PURE__ */ jsxDEV("form", {
+            method: "post",
+            children: [
+              /* @__PURE__ */ jsxDEV("input", {
+                type: "hidden",
+                name: "action",
+                value: "code"
+              }, undefined, false, undefined, this),
+              /* @__PURE__ */ jsxDEV("input", {
+                type: "hidden",
+                name: "email",
+                value: state.email
+              }, undefined, false, undefined, this),
+              state.type === "code" && /* @__PURE__ */ jsxDEV("div", {
+                "data-component": "form-footer",
+                children: [
+                  /* @__PURE__ */ jsxDEV("span", {
+                    children: [
+                      copy.code_return,
+                      " ",
+                      /* @__PURE__ */ jsxDEV("a", {
+                        "data-component": "link",
+                        href: "authorize",
+                        children: copy.login.toLowerCase()
+                      }, undefined, false, undefined, this)
+                    ]
+                  }, undefined, true, undefined, this),
+                  /* @__PURE__ */ jsxDEV("button", {
+                    "data-component": "link",
+                    children: copy.code_resend
+                  }, undefined, false, undefined, this)
+                ]
+              }, undefined, true, undefined, this)
+            ]
+          }, undefined, true, undefined, this)
+        ]
+      }, undefined, true, undefined, this);
+      return new Response(jsx.toString(), {
+        status: error ? 400 : 200,
+        headers: {
+          "Content-Type": "text/html"
+        }
+      });
+    }
+  };
+}
+export {
+  PasswordUI
+};
diff --git a/src/dist/esm/ui/select.js b/src/dist/esm/ui/select.js
new file mode 100644
index 0000000000000000000000000000000000000000..945ed53b5eb4fd3831fa21712974827f574bc82d
--- /dev/null
+++ b/src/dist/esm/ui/select.js
@@ -0,0 +1,188 @@
+// src/ui/select.tsx
+import { basePath } from "../issuer.js";
+import { Layout } from "./base.js";
+import { ICON_GITHUB, ICON_GOOGLE } from "./icon.js";
+import { jsxDEV } from "hono/jsx/jsx-dev-runtime";
+function Select(props) {
+  return async (providers, _req) => {
+    const jsx = /* @__PURE__ */ jsxDEV(Layout, {
+      children: /* @__PURE__ */ jsxDEV("div", {
+        "data-component": "form",
+        children: Object.entries(providers).map(([key, type]) => {
+          const match = props?.providers?.[key];
+          if (match?.hide)
+            return;
+          const icon = ICON[key];
+          return /* @__PURE__ */ jsxDEV("a", {
+            href: `${basePath ? basePath : ""}/${key}/authorize`,
+            "data-component": "button",
+            "data-color": "ghost",
+            children: [
+              icon && /* @__PURE__ */ jsxDEV("i", {
+                "data-slot": "icon",
+                children: icon
+              }, undefined, false, undefined, this),
+              "Continue with ",
+              match?.display || DISPLAY[type] || type
+            ]
+          }, undefined, true, undefined, this);
+        })
+      }, undefined, false, undefined, this)
+    }, undefined, false, undefined, this);
+    return new Response(jsx.toString(), {
+      headers: {
+        "Content-Type": "text/html"
+      }
+    });
+  };
+}
+var DISPLAY = {
+  twitch: "Twitch",
+  google: "Google",
+  github: "GitHub",
+  apple: "Apple",
+  x: "X",
+  facebook: "Facebook",
+  microsoft: "Microsoft",
+  slack: "Slack"
+};
+var ICON = {
+  code: /* @__PURE__ */ jsxDEV("svg", {
+    fill: "currentColor",
+    viewBox: "0 0 52 52",
+    "data-name": "Layer 1",
+    xmlns: "http://www.w3.org/2000/svg",
+    children: /* @__PURE__ */ jsxDEV("path", {
+      d: "M8.55,36.91A6.55,6.55,0,1,1,2,43.45,6.54,6.54,0,0,1,8.55,36.91Zm17.45,0a6.55,6.55,0,1,1-6.55,6.54A6.55,6.55,0,0,1,26,36.91Zm17.45,0a6.55,6.55,0,1,1-6.54,6.54A6.54,6.54,0,0,1,43.45,36.91ZM8.55,19.45A6.55,6.55,0,1,1,2,26,6.55,6.55,0,0,1,8.55,19.45Zm17.45,0A6.55,6.55,0,1,1,19.45,26,6.56,6.56,0,0,1,26,19.45Zm17.45,0A6.55,6.55,0,1,1,36.91,26,6.55,6.55,0,0,1,43.45,19.45ZM8.55,2A6.55,6.55,0,1,1,2,8.55,6.54,6.54,0,0,1,8.55,2ZM26,2a6.55,6.55,0,1,1-6.55,6.55A6.55,6.55,0,0,1,26,2ZM43.45,2a6.55,6.55,0,1,1-6.54,6.55A6.55,6.55,0,0,1,43.45,2Z",
+      "fill-rule": "evenodd"
+    }, undefined, false, undefined, this)
+  }, undefined, false, undefined, this),
+  password: /* @__PURE__ */ jsxDEV("svg", {
+    xmlns: "http://www.w3.org/2000/svg",
+    viewBox: "0 0 24 24",
+    fill: "currentColor",
+    children: /* @__PURE__ */ jsxDEV("path", {
+      "fill-rule": "evenodd",
+      d: "M12 1.5a5.25 5.25 0 0 0-5.25 5.25v3a3 3 0 0 0-3 3v6.75a3 3 0 0 0 3 3h10.5a3 3 0 0 0 3-3v-6.75a3 3 0 0 0-3-3v-3c0-2.9-2.35-5.25-5.25-5.25Zm3.75 8.25v-3a3.75 3.75 0 1 0-7.5 0v3h7.5Z",
+      "clip-rule": "evenodd"
+    }, undefined, false, undefined, this)
+  }, undefined, false, undefined, this),
+  twitch: /* @__PURE__ */ jsxDEV("svg", {
+    role: "img",
+    xmlns: "http://www.w3.org/2000/svg",
+    viewBox: "0 0 448 512",
+    children: /* @__PURE__ */ jsxDEV("path", {
+      fill: "currentColor",
+      d: "M40.1 32L10 108.9v314.3h107V480h60.2l56.8-56.8h87l117-117V32H40.1zm357.8 254.1L331 353H224l-56.8 56.8V353H76.9V72.1h321v214zM331 149v116.9h-40.1V149H331zm-107 0v116.9h-40.1V149H224z"
+    }, undefined, false, undefined, this)
+  }, undefined, false, undefined, this),
+  google: ICON_GOOGLE,
+  github: ICON_GITHUB,
+  apple: /* @__PURE__ */ jsxDEV("svg", {
+    role: "img",
+    xmlns: "http://www.w3.org/2000/svg",
+    viewBox: "0 0 814 1000",
+    children: /* @__PURE__ */ jsxDEV("path", {
+      fill: "currentColor",
+      d: "M788.1 340.9c-5.8 4.5-108.2 62.2-108.2 190.5 0 148.4 130.3 200.9 134.2 202.2-.6 3.2-20.7 71.9-68.7 141.9-42.8 61.6-87.5 123.1-155.5 123.1s-85.5-39.5-164-39.5c-76.5 0-103.7 40.8-165.9 40.8s-105.6-57-155.5-127C46.7 790.7 0 663 0 541.8c0-194.4 126.4-297.5 250.8-297.5 66.1 0 121.2 43.4 162.7 43.4 39.5 0 101.1-46 176.3-46 28.5 0 130.9 2.6 198.3 99.2zm-234-181.5c31.1-36.9 53.1-88.1 53.1-139.3 0-7.1-.6-14.3-1.9-20.1-50.6 1.9-110.8 33.7-147.1 75.8-28.5 32.4-55.1 83.6-55.1 135.5 0 7.8 1.3 15.6 1.9 18.1 3.2.6 8.4 1.3 13.6 1.3 45.4 0 102.5-30.4 135.5-71.3z "
+    }, undefined, false, undefined, this)
+  }, undefined, false, undefined, this),
+  x: /* @__PURE__ */ jsxDEV("svg", {
+    role: "img",
+    xmlns: "http://www.w3.org/2000/svg",
+    viewBox: "0 0 1200 1227",
+    children: /* @__PURE__ */ jsxDEV("path", {
+      fill: "currentColor",
+      d: "M714.163 519.284 1160.89 0h-105.86L667.137 450.887 357.328 0H0l468.492 681.821L0 1226.37h105.866l409.625-476.152 327.181 476.152H1200L714.137 519.284h.026ZM569.165 687.828l-47.468-67.894-377.686-540.24h162.604l304.797 435.991 47.468 67.894 396.2 566.721H892.476L569.165 687.854v-.026Z"
+    }, undefined, false, undefined, this)
+  }, undefined, false, undefined, this),
+  microsoft: /* @__PURE__ */ jsxDEV("svg", {
+    role: "img",
+    viewBox: "0 0 256 256",
+    xmlns: "http://www.w3.org/2000/svg",
+    preserveAspectRatio: "xMidYMid",
+    children: [
+      /* @__PURE__ */ jsxDEV("path", {
+        fill: "#F1511B",
+        d: "M121.666 121.666H0V0h121.666z"
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        fill: "#80CC28",
+        d: "M256 121.666H134.335V0H256z"
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        fill: "#00ADEF",
+        d: "M121.663 256.002H0V134.336h121.663z"
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        fill: "#FBBC09",
+        d: "M256 256.002H134.335V134.336H256z"
+      }, undefined, false, undefined, this)
+    ]
+  }, undefined, true, undefined, this),
+  facebook: /* @__PURE__ */ jsxDEV("svg", {
+    role: "img",
+    xmlns: "http://www.w3.org/2000/svg",
+    viewBox: "0 0 36 36",
+    fill: "url(#a)",
+    children: [
+      /* @__PURE__ */ jsxDEV("defs", {
+        children: /* @__PURE__ */ jsxDEV("linearGradient", {
+          x1: "50%",
+          x2: "50%",
+          y1: "97.078%",
+          y2: "0%",
+          id: "a",
+          children: [
+            /* @__PURE__ */ jsxDEV("stop", {
+              offset: "0%",
+              "stop-color": "#0062E0"
+            }, undefined, false, undefined, this),
+            /* @__PURE__ */ jsxDEV("stop", {
+              offset: "100%",
+              "stop-color": "#19AFFF"
+            }, undefined, false, undefined, this)
+          ]
+        }, undefined, true, undefined, this)
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        d: "M15 35.8C6.5 34.3 0 26.9 0 18 0 8.1 8.1 0 18 0s18 8.1 18 18c0 8.9-6.5 16.3-15 17.8l-1-.8h-4l-1 .8z"
+      }, undefined, false, undefined, this),
+      /* @__PURE__ */ jsxDEV("path", {
+        fill: "#FFF",
+        d: "m25 23 .8-5H21v-3.5c0-1.4.5-2.5 2.7-2.5H26V7.4c-1.3-.2-2.7-.4-4-.4-4.1 0-7 2.5-7 7v4h-4.5v5H15v12.7c1 .2 2 .3 3 .3s2-.1 3-.3V23h4z"
+      }, undefined, false, undefined, this)
+    ]
+  }, undefined, true, undefined, this),
+  slack: /* @__PURE__ */ jsxDEV("svg", {
+    role: "img",
+    "enable-background": "new 0 0 2447.6 2452.5",
+    viewBox: "0 0 2447.6 2452.5",
+    xmlns: "http://www.w3.org/2000/svg",
+    children: /* @__PURE__ */ jsxDEV("g", {
+      "clip-rule": "evenodd",
+      "fill-rule": "evenodd",
+      children: [
+        /* @__PURE__ */ jsxDEV("path", {
+          d: "m897.4 0c-135.3.1-244.8 109.9-244.7 245.2-.1 135.3 109.5 245.1 244.8 245.2h244.8v-245.1c.1-135.3-109.5-245.1-244.9-245.3.1 0 .1 0 0 0m0 654h-652.6c-135.3.1-244.9 109.9-244.8 245.2-.2 135.3 109.4 245.1 244.7 245.3h652.7c135.3-.1 244.9-109.9 244.8-245.2.1-135.4-109.5-245.2-244.8-245.3z",
+          fill: "#36c5f0"
+        }, undefined, false, undefined, this),
+        /* @__PURE__ */ jsxDEV("path", {
+          d: "m2447.6 899.2c.1-135.3-109.5-245.1-244.8-245.2-135.3.1-244.9 109.9-244.8 245.2v245.3h244.8c135.3-.1 244.9-109.9 244.8-245.3zm-652.7 0v-654c.1-135.2-109.4-245-244.7-245.2-135.3.1-244.9 109.9-244.8 245.2v654c-.2 135.3 109.4 245.1 244.7 245.3 135.3-.1 244.9-109.9 244.8-245.3z",
+          fill: "#2eb67d"
+        }, undefined, false, undefined, this),
+        /* @__PURE__ */ jsxDEV("path", {
+          d: "m1550.1 2452.5c135.3-.1 244.9-109.9 244.8-245.2.1-135.3-109.5-245.1-244.8-245.2h-244.8v245.2c-.1 135.2 109.5 245 244.8 245.2zm0-654.1h652.7c135.3-.1 244.9-109.9 244.8-245.2.2-135.3-109.4-245.1-244.7-245.3h-652.7c-135.3.1-244.9 109.9-244.8 245.2-.1 135.4 109.4 245.2 244.7 245.3z",
+          fill: "#ecb22e"
+        }, undefined, false, undefined, this),
+        /* @__PURE__ */ jsxDEV("path", {
+          d: "m0 1553.2c-.1 135.3 109.5 245.1 244.8 245.2 135.3-.1 244.9-109.9 244.8-245.2v-245.2h-244.8c-135.3.1-244.9 109.9-244.8 245.2zm652.7 0v654c-.2 135.3 109.4 245.1 244.7 245.3 135.3-.1 244.9-109.9 244.8-245.2v-653.9c.2-135.3-109.4-245.1-244.7-245.3-135.4 0-244.9 109.8-244.8 245.1 0 0 0 .1 0 0",
+          fill: "#e01e5a"
+        }, undefined, false, undefined, this)
+      ]
+    }, undefined, true, undefined, this)
+  }, undefined, false, undefined, this)
+};
+export {
+  Select
+};
diff --git a/src/dist/esm/ui/theme.js b/src/dist/esm/ui/theme.js
new file mode 100644
index 0000000000000000000000000000000000000000..de998dbddf44b70214ba9eab2ca897b16192dc89
--- /dev/null
+++ b/src/dist/esm/ui/theme.js
@@ -0,0 +1,115 @@
+// src/ui/theme.ts
+var THEME_OPENAUTH = {
+  title: "OpenAuth",
+  radius: "none",
+  background: {
+    dark: "black",
+    light: "white"
+  },
+  primary: {
+    dark: "white",
+    light: "black"
+  },
+  font: {
+    family: "IBM Plex Sans, sans-serif"
+  },
+  css: `
+    @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@100;200;300;400;500;600;700&display=swap');
+  `
+};
+var THEME_TERMINAL = {
+  title: "terminal",
+  radius: "none",
+  favicon: "https://www.terminal.shop/favicon.svg",
+  logo: {
+    dark: "https://www.terminal.shop/images/logo-white.svg",
+    light: "https://www.terminal.shop/images/logo-black.svg"
+  },
+  primary: "#ff5e00",
+  background: {
+    dark: "rgb(0, 0, 0)",
+    light: "rgb(255, 255, 255)"
+  },
+  font: {
+    family: "Geist Mono, monospace"
+  },
+  css: `
+    @import url('https://fonts.googleapis.com/css2?family=Geist+Mono:wght@100;200;300;400;500;600;700;800;900&display=swap');
+  `
+};
+var THEME_SST = {
+  title: "SST",
+  favicon: "https://sst.dev/favicon.svg",
+  logo: {
+    dark: "https://sst.dev/favicon.svg",
+    light: "https://sst.dev/favicon.svg"
+  },
+  background: {
+    dark: "#1a1a2d",
+    light: "rgb(255, 255, 255)"
+  },
+  primary: "#f3663f",
+  font: {
+    family: "Rubik, sans-serif"
+  },
+  css: `
+    @import url('https://fonts.googleapis.com/css2?family=Rubik:wght@100;200;300;400;500;600;700;800;900&display=swap');
+  `
+};
+var THEME_SUPABASE = {
+  title: "Supabase",
+  logo: {
+    dark: "https://supabase.com/dashboard/_next/image?url=%2Fdashboard%2Fimg%2Fsupabase-dark.svg&w=128&q=75",
+    light: "https://supabase.com/dashboard/_next/image?url=%2Fdashboard%2Fimg%2Fsupabase-light.svg&w=128&q=75"
+  },
+  background: {
+    dark: "#171717",
+    light: "#f8f8f8"
+  },
+  primary: {
+    dark: "#006239",
+    light: "#72e3ad"
+  },
+  font: {
+    family: "Varela Round, sans-serif"
+  },
+  css: `
+    @import url('https://fonts.googleapis.com/css2?family=Varela+Round:wght@100;200;300;400;500;600;700;800;900&display=swap');
+  `
+};
+var THEME_VERCEL = {
+  title: "Vercel",
+  logo: {
+    dark: "https://vercel.com/mktng/_next/static/media/vercel-logotype-dark.e8c0a742.svg",
+    light: "https://vercel.com/mktng/_next/static/media/vercel-logotype-light.700a8d26.svg"
+  },
+  background: {
+    dark: "black",
+    light: "white"
+  },
+  primary: {
+    dark: "white",
+    light: "black"
+  },
+  font: {
+    family: "Geist, sans-serif"
+  },
+  css: `
+    @import url('https://fonts.googleapis.com/css2?family=Geist:wght@100;200;300;400;500;600;700;800;900&display=swap');
+  `
+};
+function setTheme(value) {
+  globalThis.OPENAUTH_THEME = value;
+}
+function getTheme() {
+  return globalThis.OPENAUTH_THEME || THEME_OPENAUTH;
+}
+export {
+  setTheme,
+  getTheme,
+  THEME_VERCEL,
+  THEME_TERMINAL,
+  THEME_SUPABASE,
+  THEME_SST,
+  THEME_OPENAUTH
+};
diff --git a/src/dist/esm/util.js b/src/dist/esm/util.js
new file mode 100644
index 0000000000000000000000000000000000000000..4c1fd36915356459bf16732bbb0b2080e558242f
--- /dev/null
+++ b/src/dist/esm/util.js
@@ -0,0 +1,54 @@
+// src/util.ts
+function getRelativeUrl(ctx, path) {
+  const result = new URL(path, ctx.req.url);
+  result.host = ctx.req.header("x-forwarded-host") || result.host;
+  result.protocol = ctx.req.header("x-forwarded-proto") || result.protocol;
+  result.port = ctx.req.header("x-forwarded-port") || result.port;
+  return result.toString();
+}
+var twoPartTlds = [
+  "co.uk",
+  "co.jp",
+  "co.kr",
+  "co.nz",
+  "co.za",
+  "co.in",
+  "com.au",
+  "com.br",
+  "com.cn",
+  "com.mx",
+  "com.tw",
+  "net.au",
+  "org.uk",
+  "ne.jp",
+  "ac.uk",
+  "gov.uk",
+  "edu.au",
+  "gov.au"
+];
+function isDomainMatch(a, b) {
+  if (a === b)
+    return true;
+  const partsA = a.split(".");
+  const partsB = b.split(".");
+  const hasTwoPartTld = twoPartTlds.some((tld) => a.endsWith("." + tld) || b.endsWith("." + tld));
+  const numParts = hasTwoPartTld ? -3 : -2;
+  const min = Math.min(partsA.length, partsB.length, numParts);
+  const tailA = partsA.slice(min).join(".");
+  const tailB = partsB.slice(min).join(".");
+  return tailA === tailB;
+}
+function lazy(fn) {
+  let value;
+  return () => {
+    if (value === undefined) {
+      value = fn();
+    }
+    return value;
+  };
+}
+export {
+  lazy,
+  isDomainMatch,
+  getRelativeUrl
+};
diff --git a/src/dist/types/client.d.ts b/src/dist/types/client.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d0e48c767e07567a7396ec388c8ef36fb22068f1
--- /dev/null
+++ b/src/dist/types/client.d.ts
@@ -0,0 +1,466 @@
+import { SubjectSchema } from "./subject.js";
+import type { v1 } from "@standard-schema/spec";
+import { InvalidAccessTokenError, InvalidAuthorizationCodeError, InvalidRefreshTokenError } from "./error.js";
+/**
+ * The well-known information for an OAuth 2.0 authorization server.
+ * @internal
+ */
+export interface WellKnown {
+    /**
+     * The URI to the JWKS endpoint.
+     */
+    jwks_uri: string;
+    /**
+     * The URI to the token endpoint.
+     */
+    token_endpoint: string;
+    /**
+     * The URI to the authorization endpoint.
+     */
+    authorization_endpoint: string;
+}
+/**
+ * The tokens returned by the auth server.
+ */
+export interface Tokens {
+    /**
+     * The access token.
+     */
+    access: string;
+    /**
+     * The refresh token.
+     */
+    refresh: string;
+    /**
+     * The number of seconds until the access token expires.
+     */
+    expiresIn: number;
+}
+interface ResponseLike {
+    json(): Promise<unknown>;
+    ok: Response["ok"];
+}
+type FetchLike = (...args: any[]) => Promise<ResponseLike>;
+/**
+ * The challenge that you can use to verify the code.
+ */
+export type Challenge = {
+    /**
+     * The state that was sent to the redirect URI.
+     */
+    state: string;
+    /**
+     * The verifier that was sent to the redirect URI.
+     */
+    verifier?: string;
+};
+/**
+ * Configure the client.
+ */
+export interface ClientInput {
+    /**
+     * The client ID. This is just a string to identify your app.
+     *
+     * If you have a web app and a mobile app, you want to use different client IDs both.
+     *
+     * @example
+     * ```ts
+     * {
+     *   clientID: "my-client"
+     * }
+     * ```
+     */
+    clientID: string;
+    /**
+     * The URL of your OpenAuth server.
+     *
+     * @example
+     * ```ts
+     * {
+     *   issuer: "https://auth.myserver.com"
+     * }
+     * ```
+     */
+    issuer?: string;
+    /**
+     * Optionally, override the internally used fetch function.
+     *
+     * This is useful if you are using a polyfilled fetch function in your application and you
+     * want the client to use it too.
+     */
+    fetch?: FetchLike;
+}
+export interface AuthorizeOptions {
+    /**
+     * Enable the PKCE flow. This is for SPA apps.
+     *
+     * ```ts
+     * {
+     *   pkce: true
+     * }
+     * ```
+     *
+     * @default false
+     */
+    pkce?: boolean;
+    /**
+     * The provider you want to use for the OAuth flow.
+     *
+     * ```ts
+     * {
+     *   provider: "google"
+     * }
+     * ```
+     *
+     * If no provider is specified, the user is directed to a page where they can select from the
+     * list of configured providers.
+     *
+     * If there's only one provider configured, the user will be redirected to that.
+     */
+    provider?: string;
+}
+export interface AuthorizeResult {
+    /**
+     * The challenge that you can use to verify the code. This is for the PKCE flow for SPA apps.
+     *
+     * This is an object that you _stringify_ and store it in session storage.
+     *
+     * ```ts
+     * sessionStorage.setItem("challenge", JSON.stringify(challenge))
+     * ```
+     */
+    challenge: Challenge;
+    /**
+     * The URL to redirect the user to. This starts the OAuth flow.
+     *
+     * For example, for SPA apps.
+     *
+     * ```ts
+     * location.href = url
+     * ```
+     */
+    url: string;
+}
+/**
+ * Returned when the exchange is successful.
+ */
+export interface ExchangeSuccess {
+    /**
+     * This is always `false` when the exchange is successful.
+     */
+    err: false;
+    /**
+     * The access and refresh tokens.
+     */
+    tokens: Tokens;
+}
+/**
+ * Returned when the exchange fails.
+ */
+export interface ExchangeError {
+    /**
+     * The type of error that occurred. You can handle this by checking the type.
+     *
+     * @example
+     * ```ts
+     * import { InvalidAuthorizationCodeError } from "@openauthjs/openauth/error"
+     *
+     * console.log(err instanceof InvalidAuthorizationCodeError)
+     *```
+     */
+    err: InvalidAuthorizationCodeError;
+}
+export interface RefreshOptions {
+    /**
+     * Optionally, pass in the access token.
+     */
+    access?: string;
+}
+/**
+ * Returned when the refresh is successful.
+ */
+export interface RefreshSuccess {
+    /**
+     * This is always `false` when the refresh is successful.
+     */
+    err: false;
+    /**
+     * Returns the refreshed tokens only if they've been refreshed.
+     *
+     * If they are still valid, this will be `undefined`.
+     */
+    tokens?: Tokens;
+}
+/**
+ * Returned when the refresh fails.
+ */
+export interface RefreshError {
+    /**
+     * The type of error that occurred. You can handle this by checking the type.
+     *
+     * @example
+     * ```ts
+     * import { InvalidRefreshTokenError } from "@openauthjs/openauth/error"
+     *
+     * console.log(err instanceof InvalidRefreshTokenError)
+     *```
+     */
+    err: InvalidRefreshTokenError | InvalidAccessTokenError;
+}
+export interface VerifyOptions {
+    /**
+     * Optionally, pass in the refresh token.
+     *
+     * If passed in, this will automatically refresh the access token if it has expired.
+     */
+    refresh?: string;
+    /**
+     * @internal
+     */
+    issuer?: string;
+    /**
+     * @internal
+     */
+    audience?: string;
+    /**
+     * Optionally, override the internally used fetch function.
+     *
+     * This is useful if you are using a polyfilled fetch function in your application and you
+     * want the client to use it too.
+     */
+    fetch?: FetchLike;
+}
+export interface VerifyResult<T extends SubjectSchema> {
+    /**
+     * This is always `undefined` when the verify is successful.
+     */
+    err?: undefined;
+    /**
+     * Returns the refreshed tokens only if they’ve been refreshed.
+     *
+     * If they are still valid, this will be undefined.
+     */
+    tokens?: Tokens;
+    /**
+     * @internal
+     */
+    aud: string;
+    /**
+     * The decoded subjects from the access token.
+     *
+     * Has the same shape as the subjects you defined when creating the issuer.
+     */
+    subject: {
+        [type in keyof T]: {
+            type: type;
+            properties: v1.InferOutput<T[type]>;
+        };
+    }[keyof T];
+}
+/**
+ * Returned when the verify call fails.
+ */
+export interface VerifyError {
+    /**
+     * The type of error that occurred. You can handle this by checking the type.
+     *
+     * @example
+     * ```ts
+     * import { InvalidRefreshTokenError } from "@openauthjs/openauth/error"
+     *
+     * console.log(err instanceof InvalidRefreshTokenError)
+     *```
+     */
+    err: InvalidRefreshTokenError | InvalidAccessTokenError;
+}
+/**
+ * An instance of the OpenAuth client contains the following methods.
+ */
+export interface Client {
+    /**
+     * Start the autorization flow. For example, in SSR sites.
+     *
+     * ```ts
+     * const { url } = await client.authorize(<redirect_uri>, "code")
+     * ```
+     *
+     * This takes a redirect URI and the type of flow you want to use. The redirect URI is the
+     * location where the user will be redirected to after the flow is complete.
+     *
+     * Supports both the _code_ and _token_ flows. We recommend using the _code_ flow as it's more
+     * secure.
+     *
+     * :::tip
+     * This returns a URL to redirect the user to. This starts the OAuth flow.
+     * :::
+     *
+     * This returns a URL to the auth server. You can redirect the user to the URL to start the
+     * OAuth flow.
+     *
+     * For SPA apps, we recommend using the PKCE flow.
+     *
+     * ```ts {4}
+     * const { challenge, url } = await client.authorize(
+     *   <redirect_uri>,
+     *   "code",
+     *   { pkce: true }
+     * )
+     * ```
+     *
+     * This returns a redirect URL and a challenge that you need to use later to verify the code.
+     */
+    authorize(redirectURI: string, response: "code" | "token", opts?: AuthorizeOptions): Promise<AuthorizeResult>;
+    /**
+     * Exchange the code for access and refresh tokens.
+     *
+     * ```ts
+     * const exchanged = await client.exchange(<code>, <redirect_uri>)
+     * ```
+     *
+     * You call this after the user has been redirected back to your app after the OAuth flow.
+     *
+     * :::tip
+     * For SSR sites, the code is returned in the query parameter.
+     * :::
+     *
+     * So the code comes from the query parameter in the redirect URI. The redirect URI here is
+     * the one that you passed in to the `authorize` call when starting the flow.
+     *
+     * :::tip
+     * For SPA sites, the code is returned through the URL hash.
+     * :::
+     *
+     * If you used the PKCE flow for an SPA app, the code is returned as a part of the redirect URL
+     * hash.
+     *
+     * ```ts {4}
+     * const exchanged = await client.exchange(
+     *   <code>,
+     *   <redirect_uri>,
+     *   <challenge.verifier>
+     * )
+     * ```
+     *
+     * You also need to pass in the previously stored challenge verifier.
+     *
+     * This method returns the access and refresh tokens. Or if it fails, it returns an error that
+     * you can handle depending on the error.
+     *
+     * ```ts
+     * import { InvalidAuthorizationCodeError } from "@openauthjs/openauth/error"
+     *
+     * if (exchanged.err) {
+     *   if (exchanged.err instanceof InvalidAuthorizationCodeError) {
+     *     // handle invalid code error
+     *   }
+     *   else {
+     *     // handle other errors
+     *   }
+     * }
+     *
+     * const { access, refresh } = exchanged.tokens
+     * ```
+     */
+    exchange(code: string, redirectURI: string, verifier?: string): Promise<ExchangeSuccess | ExchangeError>;
+    /**
+     * Refreshes the tokens if they have expired. This is used in an SPA app to maintain the
+     * session, without logging the user out.
+     *
+     * ```ts
+     * const next = await client.refresh(<refresh_token>)
+     * ```
+     *
+     * Can optionally take the access token as well. If passed in, this will skip the refresh
+     * if the access token is still valid.
+     *
+     * ```ts
+     * const next = await client.refresh(<refresh_token>, { access: <access_token> })
+     * ```
+     *
+     * This returns the refreshed tokens only if they've been refreshed.
+     *
+     * ```ts
+     * if (!next.err) {
+     *   // tokens are still valid
+     * }
+     * if (next.tokens) {
+     *   const { access, refresh } = next.tokens
+     * }
+     * ```
+     *
+     * Or if it fails, it returns an error that you can handle depending on the error.
+     *
+     * ```ts
+     * import { InvalidRefreshTokenError } from "@openauthjs/openauth/error"
+     *
+     * if (next.err) {
+     *   if (next.err instanceof InvalidRefreshTokenError) {
+     *     // handle invalid refresh token error
+     *   }
+     *   else {
+     *     // handle other errors
+     *   }
+     * }
+     * ```
+     */
+    refresh(refresh: string, opts?: RefreshOptions): Promise<RefreshSuccess | RefreshError>;
+    /**
+     * Verify the token in the incoming request.
+     *
+     * This is typically used for SSR sites where the token is stored in an HTTP only cookie. And
+     * is passed to the server on every request.
+     *
+     * ```ts
+     * const verified = await client.verify(<subjects>, <token>)
+     * ```
+     *
+     * This takes the subjects that you had previously defined when creating the issuer.
+     *
+     * :::tip
+     * If the refresh token is passed in, it'll automatically refresh the access token.
+     * :::
+     *
+     * This can optionally take the refresh token as well. If passed in, it'll automatically
+     * refresh the access token if it has expired.
+     *
+     * ```ts
+     * const verified = await client.verify(<subjects>, <token>, { refresh: <refresh_token> })
+     * ```
+     *
+     * This returns the decoded subjects from the access token. And the tokens if they've been
+     * refreshed.
+     *
+     * ```ts
+     * // based on the subjects you defined earlier
+     * console.log(verified.subject.properties.userID)
+     *
+     * if (verified.tokens) {
+     *   const { access, refresh } = verified.tokens
+     * }
+     * ```
+     *
+     * Or if it fails, it returns an error that you can handle depending on the error.
+     *
+     * ```ts
+     * import { InvalidRefreshTokenError } from "@openauthjs/openauth/error"
+     *
+     * if (verified.err) {
+     *   if (verified.err instanceof InvalidRefreshTokenError) {
+     *     // handle invalid refresh token error
+     *   }
+     *   else {
+     *     // handle other errors
+     *   }
+     * }
+     * ```
+     */
+    verify<T extends SubjectSchema>(subjects: T, token: string, options?: VerifyOptions): Promise<VerifyResult<T> | VerifyError>;
+}
+/**
+ * Create an OpenAuth client.
+ *
+ * @param input - Configure the client.
+ */
+export declare function createClient(input: ClientInput): Client;
+export {};
+//# sourceMappingURL=client.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/client.d.ts.map b/src/dist/types/client.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..bea7100fdbf0cb17404cfacbe4840a8e2d356e01
--- /dev/null
+++ b/src/dist/types/client.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"client.d.ts","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/src/dist/types/error.d.ts b/src/dist/types/error.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b085fe592ed90224cc8142c0434d08aeab6cc4af
--- /dev/null
+++ b/src/dist/types/error.d.ts
@@ -0,0 +1,77 @@
+/**
+ * A list of errors that can be thrown by OpenAuth.
+ *
+ * You can use these errors to check the type of error and handle it. For example.
+ *
+ * ```ts
+ * import { InvalidAuthorizationCodeError } from "@openauthjs/openauth/error"
+ *
+ * if (err instanceof InvalidAuthorizationCodeError) {
+ *   // handle invalid code error
+ * }
+ * ```
+ *
+ * @packageDocumentation
+ */
+/**
+ * The OAuth server returned an error.
+ */
+export declare class OauthError extends Error {
+    error: "invalid_request" | "invalid_grant" | "unauthorized_client" | "access_denied" | "unsupported_grant_type" | "server_error" | "temporarily_unavailable";
+    description: string;
+    constructor(error: "invalid_request" | "invalid_grant" | "unauthorized_client" | "access_denied" | "unsupported_grant_type" | "server_error" | "temporarily_unavailable", description: string);
+}
+/**
+ * The `provider` needs to be passed in.
+ */
+export declare class MissingProviderError extends OauthError {
+    constructor();
+}
+/**
+ * The given parameter is missing.
+ */
+export declare class MissingParameterError extends OauthError {
+    parameter: string;
+    constructor(parameter: string);
+}
+/**
+ * The given client is not authorized to use the redirect URI that was passed in.
+ */
+export declare class UnauthorizedClientError extends OauthError {
+    clientID: string;
+    constructor(clientID: string, redirectURI: string);
+}
+/**
+ * The browser was in an unknown state.
+ *
+ * This can happen when certain cookies have expired. Or the browser was switched in the middle
+ * of the authentication flow.
+ */
+export declare class UnknownStateError extends Error {
+    constructor();
+}
+/**
+ * The given subject is invalid.
+ */
+export declare class InvalidSubjectError extends Error {
+    constructor();
+}
+/**
+ * The given refresh token is invalid.
+ */
+export declare class InvalidRefreshTokenError extends Error {
+    constructor();
+}
+/**
+ * The given access token is invalid.
+ */
+export declare class InvalidAccessTokenError extends Error {
+    constructor();
+}
+/**
+ * The given authorization code is invalid.
+ */
+export declare class InvalidAuthorizationCodeError extends Error {
+    constructor();
+}
+//# sourceMappingURL=error.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/error.d.ts.map b/src/dist/types/error.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b194cbe68f2e28eda17d6f2e934deb2f5af36033
--- /dev/null
+++ b/src/dist/types/error.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"error.d.ts","sourceRoot":"","sources":["../../src/error.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH;;GAEG;AACH,qBAAa,UAAW,SAAQ,KAAK;IAE1B,KAAK,EACR,iBAAiB,GACjB,eAAe,GACf,qBAAqB,GACrB,eAAe,GACf,wBAAwB,GACxB,cAAc,GACd,yBAAyB;IACtB,WAAW,EAAE,MAAM;gBARnB,KAAK,EACR,iBAAiB,GACjB,eAAe,GACf,qBAAqB,GACrB,eAAe,GACf,wBAAwB,GACxB,cAAc,GACd,yBAAyB,EACtB,WAAW,EAAE,MAAM;CAI7B;AAED;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,UAAU;;CAOnD;AAED;;GAEG;AACH,qBAAa,qBAAsB,SAAQ,UAAU;IAChC,SAAS,EAAE,MAAM;gBAAjB,SAAS,EAAE,MAAM;CAGrC;AAED;;GAEG;AACH,qBAAa,uBAAwB,SAAQ,UAAU;IAE5C,QAAQ,EAAE,MAAM;gBAAhB,QAAQ,EAAE,MAAM,EACvB,WAAW,EAAE,MAAM;CAOtB;AAED;;;;;GAKG;AACH,qBAAa,iBAAkB,SAAQ,KAAK;;CAM3C;AAED;;GAEG;AACH,qBAAa,mBAAoB,SAAQ,KAAK;;CAI7C;AAED;;GAEG;AACH,qBAAa,wBAAyB,SAAQ,KAAK;;CAIlD;AAED;;GAEG;AACH,qBAAa,uBAAwB,SAAQ,KAAK;;CAIjD;AAED;;GAEG;AACH,qBAAa,6BAA8B,SAAQ,KAAK;;CAIvD"}
\ No newline at end of file
diff --git a/src/dist/types/index.d.ts b/src/dist/types/index.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..0117c239890f11b17243be395377a3eb4c7cf1b8
--- /dev/null
+++ b/src/dist/types/index.d.ts
@@ -0,0 +1,20 @@
+export { 
+/**
+ * @deprecated
+ * Use `import { createClient } from "@openauthjs/openauth/client"` instead - it will tree shake better
+ */
+createClient, } from "./client.js";
+export { 
+/**
+ * @deprecated
+ * Use `import { createSubjects } from "@openauthjs/openauth/subject"` instead - it will tree shake better
+ */
+createSubjects, } from "./subject.js";
+import { issuer } from "./issuer.js";
+export { 
+/**
+ * @deprecated
+ * Use `import { issuer } from "@openauthjs/openauth"` instead, it was renamed
+ */
+issuer as authorizer, issuer, };
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/index.d.ts.map b/src/dist/types/index.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..26ae8fd7e58908e794f6267e5ca3ae310bc81d40
--- /dev/null
+++ b/src/dist/types/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO;AACL;;;GAGG;AACH,YAAY,GACb,MAAM,aAAa,CAAA;AAEpB,OAAO;AACL;;;GAGG;AACH,cAAc,GACf,MAAM,cAAc,CAAA;AAErB,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AAEpC,OAAO;AACL;;;GAGG;AACH,MAAM,IAAI,UAAU,EACpB,MAAM,GACP,CAAA"}
\ No newline at end of file
diff --git a/src/dist/types/issuer.d.ts b/src/dist/types/issuer.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..284af9808df41938d033adc4be7226c6ec81c637
--- /dev/null
+++ b/src/dist/types/issuer.d.ts
@@ -0,0 +1,447 @@
+/**
+ * The `issuer` create an OpentAuth server, a [Hono](https://hono.dev) app that's
+ * designed to run anywhere.
+ *
+ * The `issuer` function requires a few things:
+ *
+ * ```ts title="issuer.ts"
+ * import { issuer } from "@openauthjs/openauth"
+ *
+ * const app = issuer({
+ *   providers: { ... },
+ *   storage,
+ *   subjects,
+ *   success: async (ctx, value) => { ... }
+ * })
+ * ```
+ *
+ * #### Add providers
+ *
+ * You start by specifying the auth providers you are going to use. Let's say you want your users
+ * to be able to authenticate with GitHub and with their email and password.
+ *
+ * ```ts title="issuer.ts"
+ * import { GithubProvider } from "@openauthjs/openauth/provider/github"
+ * import { PasswordProvider } from "@openauthjs/openauth/provider/password"
+ *
+ * const app = issuer({
+ *   providers: {
+ *     github: GithubProvider({
+ *       // ...
+ *     }),
+ *     password: PasswordProvider({
+ *       // ...
+ *     }),
+ *   },
+ * })
+ * ```
+ *
+ * #### Handle success
+ *
+ * The `success` callback receives the payload when a user completes a provider's auth flow.
+ *
+ * ```ts title="issuer.ts"
+ * const app = issuer({
+ *   providers: { ... },
+ *   subjects,
+ *   async success(ctx, value) {
+ *     let userID
+ *     if (value.provider === "password") {
+ *       console.log(value.email)
+ *       userID = ... // lookup user or create them
+ *     }
+ *     if (value.provider === "github") {
+ *       console.log(value.tokenset.access)
+ *       userID = ... // lookup user or create them
+ *     }
+ *     return ctx.subject("user", {
+ *       userID
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * Once complete, the `issuer` issues the access tokens that a client can use. The `ctx.subject`
+ * call is what is placed in the access token as a JWT.
+ *
+ * #### Define subjects
+ *
+ * You define the shape of these in the `subjects` field.
+ *
+ * ```ts title="subjects.ts"
+ * import { object, string } from "valibot"
+ * import { createSubjects } from "@openauthjs/openauth/subject"
+ *
+ * const subjects = createSubjects({
+ *   user: object({
+ *     userID: string()
+ *   })
+ * })
+ * ```
+ *
+ * It's good to place this in a separate file since this'll be used in your client apps as well.
+ *
+ * ```ts title="issuer.ts"
+ * import { subjects } from "./subjects.js"
+ *
+ * const app = issuer({
+ *   providers: { ... },
+ *   subjects,
+ *   // ...
+ * })
+ * ```
+ *
+ * #### Deploy
+ *
+ * Since `issuer` is a Hono app, you can deploy it anywhere Hono supports.
+ *
+ * <Tabs>
+ *   <TabItem label="Node">
+ *   ```ts title="issuer.ts"
+ *   import { serve } from "@hono/node-server"
+ *
+ *   serve(app)
+ *   ```
+ *   </TabItem>
+ *   <TabItem label="Lambda">
+ *   ```ts title="issuer.ts"
+ *   import { handle } from "hono/aws-lambda"
+ *
+ *   export const handler = handle(app)
+ *   ```
+ *   </TabItem>
+ *   <TabItem label="Bun">
+ *   ```ts title="issuer.ts"
+ *   export default app
+ *   ```
+ *   </TabItem>
+ *   <TabItem label="Workers">
+ *   ```ts title="issuer.ts"
+ *   export default app
+ *   ```
+ *   </TabItem>
+ * </Tabs>
+ *
+ * @packageDocumentation
+ */
+import { Provider } from "./provider/provider.js";
+import { SubjectPayload, SubjectSchema } from "./subject.js";
+import { Hono } from "hono/tiny";
+/**
+ * Sets the subject payload in the JWT token and returns the response.
+ *
+ * ```ts
+ * ctx.subject("user", {
+ *   userID
+ * })
+ * ```
+ */
+export interface OnSuccessResponder<T extends {
+    type: string;
+    properties: any;
+}> {
+    /**
+     * The `type` is the type of the subject, that was defined in the `subjects` field.
+     *
+     * The `properties` are the properties of the subject. This is the shape of the subject that
+     * you defined in the `subjects` field.
+     */
+    subject<Type extends T["type"]>(type: Type, properties: Extract<T, {
+        type: Type;
+    }>["properties"], opts?: {
+        ttl?: {
+            access?: number;
+            refresh?: number;
+        };
+        subject?: string;
+    }): Promise<Response>;
+}
+/**
+ * @internal
+ */
+export interface AuthorizationState {
+    redirect_uri: string;
+    response_type: string;
+    state: string;
+    client_id: string;
+    audience?: string;
+    pkce?: {
+        challenge: string;
+        method: "S256";
+    };
+}
+/**
+ * @internal
+ */
+export type Prettify<T> = {
+    [K in keyof T]: T[K];
+} & {};
+import { UnknownStateError } from "./error.js";
+import { StorageAdapter } from "./storage/storage.js";
+import { Theme } from "./ui/theme.js";
+/** @internal */
+export declare const aws: <E extends import("hono").Env = import("hono").Env, S extends import("hono").Schema = {}, BasePath extends string = "/">(app: import("hono").Hono<E, S, BasePath>) => ((event: import("hono/aws-lambda").LambdaEvent, lambdaContext?: import("hono/aws-lambda").LambdaContext) => Promise<import("hono/aws-lambda").APIGatewayProxyResult>);
+/**
+ * @internal
+ */
+export declare let basePath: string | undefined;
+export interface IssuerInput<Providers extends Record<string, Provider<any>>, Subjects extends SubjectSchema, Result = {
+    [key in keyof Providers]: Prettify<{
+        provider: key;
+    } & (Providers[key] extends Provider<infer T> ? T : {})>;
+}[keyof Providers]> {
+    /**
+     * With `basePath`, OpenAuth can be mounted on any sub-path of a domain.
+     * This means OpenAuth can be nested in a larger app.
+     *
+     * :::caution
+     * The Well-Known endpoints still need to be at the root of the domain.
+     * You need to perform a proxy pass to the OpenAuth server for `/.well-known/oauth-authorization-server` and `/.well-known/jwks.json`.
+     *
+     * **Example:**<br/>
+     * If you mount OpenAuth at `/auth`, `/.well-known/oauth-authorization-server` and `/.well-known/jwks.json` need to be proxied to `/auth/.well-known/oauth-authorization-server` and `/auth/.well-known/jwks.json`.
+     * :::
+     *
+     * @example
+     * ```ts title="issuer.ts"
+     * issuer({
+     *   basePath: "/auth",
+     *   // ...
+     * })
+     * ```
+     *
+     * The base path needs to be reflected in the issuer url for the client:
+     * ```ts title="client.ts"
+     * const client = createClient({
+     *   issuer: "https://example.com/auth", // if OpenAuth is mounted at `/authpath`
+     *   clientID: "123",
+     * })
+     * ```
+     */
+    basePath?: string;
+    /**
+     * The shape of the subjects that you want to return.
+     *
+     * @example
+     *
+     * ```ts title="issuer.ts"
+     * import { object, string } from "valibot"
+     * import { createSubjects } from "@openauthjs/openauth/subject"
+     *
+     * issuer({
+     *   subjects: createSubjects({
+     *     user: object({
+     *       userID: string()
+     *     })
+     *   })
+     *   // ...
+     * })
+     * ```
+     */
+    subjects: Subjects;
+    /**
+     * The storage adapter that you want to use.
+     *
+     * @example
+     * ```ts title="issuer.ts"
+     * import { DynamoStorage } from "@openauthjs/openauth/storage/dynamo"
+     *
+     * issuer({
+     *   storage: DynamoStorage()
+     *   // ...
+     * })
+     * ```
+     */
+    storage?: StorageAdapter;
+    /**
+     * The providers that you want your OpenAuth server to support.
+     *
+     * @example
+     *
+     * ```ts title="issuer.ts"
+     * import { GithubProvider } from "@openauthjs/openauth/provider/github"
+     *
+     * issuer({
+     *   providers: {
+     *     github: GithubProvider()
+     *   }
+     * })
+     * ```
+     *
+     * The key is just a string that you can use to identify the provider. It's passed back to
+     * the `success` callback.
+     *
+     * You can also specify multiple providers.
+     *
+     * ```ts
+     * {
+     *   providers: {
+     *     github: GithubProvider(),
+     *     google: GoogleProvider()
+     *   }
+     * }
+     * ```
+     */
+    providers: Providers;
+    /**
+     * The theme you want to use for the UI.
+     *
+     * This includes the UI the user sees when selecting a provider. And the `PasswordUI` and
+     * `CodeUI` that are used by the `PasswordProvider` and `CodeProvider`.
+     *
+     * @example
+     * ```ts title="issuer.ts"
+     * import { THEME_SST } from "@openauthjs/openauth/ui/theme"
+     *
+     * issuer({
+     *   theme: THEME_SST
+     *   // ...
+     * })
+     * ```
+     *
+     * Or define your own.
+     *
+     * ```ts title="issuer.ts"
+     * import type { Theme } from "@openauthjs/openauth/ui/theme"
+     *
+     * const MY_THEME: Theme = {
+     *   // ...
+     * }
+     *
+     * issuer({
+     *   theme: MY_THEME
+     *   // ...
+     * })
+     * ```
+     */
+    theme?: Theme;
+    /**
+     * Set the TTL, in seconds, for access and refresh tokens.
+     *
+     * @example
+     * ```ts
+     * {
+     *   ttl: {
+     *     access: 60 * 60 * 24 * 30,
+     *     refresh: 60 * 60 * 24 * 365
+     *   }
+     * }
+     * ```
+     */
+    ttl?: {
+        /**
+         * Interval in seconds where the access token is valid.
+         * @default 30d
+         */
+        access?: number;
+        /**
+         * Interval in seconds where the refresh token is valid.
+         * @default 1y
+         */
+        refresh?: number;
+        /**
+         * Interval in seconds where refresh token reuse is allowed. This helps mitigrate
+         * concurrency issues.
+         * @default 60s
+         */
+        reuse?: number;
+        /**
+         * Interval in seconds to retain refresh tokens for reuse detection.
+         * @default 0s
+         */
+        retention?: number;
+    };
+    /**
+     * Optionally, configure the UI that's displayed when the user visits the root URL of the
+     * of the OpenAuth server.
+     *
+     * ```ts title="issuer.ts"
+     * import { Select } from "@openauthjs/openauth/ui/select"
+     *
+     * issuer({
+     *   select: Select({
+     *     providers: {
+     *       github: { hide: true },
+     *       google: { display: "Google" }
+     *     }
+     *   })
+     *   // ...
+     * })
+     * ```
+     *
+     * @default Select()
+     */
+    select?(providers: Record<string, string>, req: Request): Promise<Response>;
+    /**
+     * @internal
+     */
+    start?(req: Request): Promise<void>;
+    /**
+     * The success callback that's called when the user completes the flow.
+     *
+     * This is called after the user has been redirected back to your app after the OAuth flow.
+     *
+     * @example
+     * ```ts
+     * {
+     *   success: async (ctx, value) => {
+     *     let userID
+     *     if (value.provider === "password") {
+     *       console.log(value.email)
+     *       userID = ... // lookup user or create them
+     *     }
+     *     if (value.provider === "github") {
+     *       console.log(value.tokenset.access)
+     *       userID = ... // lookup user or create them
+     *     }
+     *     return ctx.subject("user", {
+     *       userID
+     *     })
+     *   },
+     *   // ...
+     * }
+     * ```
+     */
+    success(response: OnSuccessResponder<SubjectPayload<Subjects>>, input: Result, req: Request): Promise<Response>;
+    /**
+     * @internal
+     */
+    error?(error: UnknownStateError, req: Request): Promise<Response>;
+    /**
+     * Override the logic for whether a client request is allowed to call the issuer.
+     *
+     * By default, it uses the following:
+     *
+     * - Allow if the `redirectURI` is localhost.
+     * - Compare `redirectURI` to the request's hostname or the `x-forwarded-host` header. If they
+     *   are from the same sub-domain level, then allow.
+     *
+     * @example
+     * ```ts
+     * {
+     *   allow: async (input, req) => {
+     *     // Allow all clients
+     *     return true
+     *   }
+     * }
+     * ```
+     */
+    allow?(input: {
+        clientID: string;
+        redirectURI: string;
+        audience?: string;
+    }, req: Request): Promise<boolean>;
+}
+/**
+ * Create an OpenAuth server, a Hono app.
+ */
+export declare function issuer<Providers extends Record<string, Provider<any>>, Subjects extends SubjectSchema, Result = {
+    [key in keyof Providers]: Prettify<{
+        provider: key;
+    } & (Providers[key] extends Provider<infer T> ? T : {})>;
+}[keyof Providers]>(input: IssuerInput<Providers, Subjects, Result>): Hono<{
+    Variables: {
+        authorization: AuthorizationState;
+    };
+}, import("hono/types").BlankSchema, "/">;
+//# sourceMappingURL=issuer.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/issuer.d.ts.map b/src/dist/types/issuer.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..f35d2d35827328e0c4df711d11d5c54f9f5bb19c
--- /dev/null
+++ b/src/dist/types/issuer.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"issuer.d.ts","sourceRoot":"","sources":["../../src/issuer.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/src/dist/types/jwt.d.ts b/src/dist/types/jwt.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..cbfd5237959125c6b858139cd2d4fd75dfacf6a0
--- /dev/null
+++ b/src/dist/types/jwt.d.ts
@@ -0,0 +1,6 @@
+import { JWTPayload, KeyLike } from "jose";
+export declare namespace jwt {
+    function create(payload: JWTPayload, algorithm: string, privateKey: KeyLike): Promise<string>;
+    function verify<T>(token: string, publicKey: KeyLike): Promise<import("jose").JWTVerifyResult<T>>;
+}
+//# sourceMappingURL=jwt.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/jwt.d.ts.map b/src/dist/types/jwt.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..a6ec12f4328695aaebe8220ed6f858b1631e9f9d
--- /dev/null
+++ b/src/dist/types/jwt.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"jwt.d.ts","sourceRoot":"","sources":["../../src/jwt.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAa,OAAO,EAAW,MAAM,MAAM,CAAA;AAE9D,yBAAiB,GAAG,CAAC;IACnB,SAAgB,MAAM,CACpB,OAAO,EAAE,UAAU,EACnB,SAAS,EAAE,MAAM,EACjB,UAAU,EAAE,OAAO,mBAKpB;IAED,SAAgB,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,8CAE1D;CACF"}
\ No newline at end of file
diff --git a/src/dist/types/keys.d.ts b/src/dist/types/keys.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9425a43ffae60d91f2582f5666d5694f7e87f1c3
--- /dev/null
+++ b/src/dist/types/keys.d.ts
@@ -0,0 +1,18 @@
+import { JWK, KeyLike } from "jose";
+import { StorageAdapter } from "./storage/storage.js";
+export interface KeyPair {
+    id: string;
+    alg: string;
+    public: KeyLike;
+    private: KeyLike;
+    created: Date;
+    expired?: Date;
+    jwk: JWK;
+}
+/**
+ * @deprecated use `signingKeys` instead
+ */
+export declare function legacySigningKeys(storage: StorageAdapter): Promise<KeyPair[]>;
+export declare function signingKeys(storage: StorageAdapter): Promise<KeyPair[]>;
+export declare function encryptionKeys(storage: StorageAdapter): Promise<KeyPair[]>;
+//# sourceMappingURL=keys.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/keys.d.ts.map b/src/dist/types/keys.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..4025018c7ada7316bfdbb2010432a25fc1b0706b
--- /dev/null
+++ b/src/dist/types/keys.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"keys.d.ts","sourceRoot":"","sources":["../../src/keys.ts"],"names":[],"mappings":"AAAA,OAAO,EAOL,GAAG,EACH,OAAO,EACR,MAAM,MAAM,CAAA;AACb,OAAO,EAAW,cAAc,EAAE,MAAM,sBAAsB,CAAA;AAc9D,MAAM,WAAW,OAAO;IACtB,EAAE,EAAE,MAAM,CAAA;IACV,GAAG,EAAE,MAAM,CAAA;IACX,MAAM,EAAE,OAAO,CAAA;IACf,OAAO,EAAE,OAAO,CAAA;IAChB,OAAO,EAAE,IAAI,CAAA;IACb,OAAO,CAAC,EAAE,IAAI,CAAA;IACd,GAAG,EAAE,GAAG,CAAA;CACT;AAED;;GAEG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,cAAc,GACtB,OAAO,CAAC,OAAO,EAAE,CAAC,CAsBpB;AAED,wBAAsB,WAAW,CAAC,OAAO,EAAE,cAAc,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,CAoC7E;AAED,wBAAsB,cAAc,CAClC,OAAO,EAAE,cAAc,GACtB,OAAO,CAAC,OAAO,EAAE,CAAC,CAmCpB"}
\ No newline at end of file
diff --git a/src/dist/types/pkce.d.ts b/src/dist/types/pkce.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..bdd82667d92f3d6be435fded0d8c5b16b2e45bed
--- /dev/null
+++ b/src/dist/types/pkce.d.ts
@@ -0,0 +1,7 @@
+export declare function generatePKCE(length?: number): Promise<{
+    verifier: string;
+    challenge: string;
+    method: string;
+}>;
+export declare function validatePKCE(verifier: string, challenge: string, method?: "S256" | "plain"): Promise<boolean>;
+//# sourceMappingURL=pkce.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/pkce.d.ts.map b/src/dist/types/pkce.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..a05b14da77928d9a2bd524070c42ac8070d7eb36
--- /dev/null
+++ b/src/dist/types/pkce.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pkce.d.ts","sourceRoot":"","sources":["../../src/pkce.ts"],"names":[],"mappings":"AAgBA,wBAAsB,YAAY,CAAC,MAAM,GAAE,MAAW;;;;GAarD;AAED,wBAAsB,YAAY,CAChC,QAAQ,EAAE,MAAM,EAChB,SAAS,EAAE,MAAM,EACjB,MAAM,GAAE,MAAM,GAAG,OAAgB,oBAKlC"}
\ No newline at end of file
diff --git a/src/dist/types/provider/apple.d.ts b/src/dist/types/provider/apple.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..cf74297b85992f4d618e49df77c7396996a32d1c
--- /dev/null
+++ b/src/dist/types/provider/apple.d.ts
@@ -0,0 +1,108 @@
+/**
+ * Use this provider to authenticate with Apple. Supports both OAuth2 and OIDC.
+ *
+ * #### Using OAuth
+ *
+ * ```ts {5-8}
+ * import { AppleProvider } from "@openauthjs/openauth/provider/apple"
+ *
+ * export default issuer({
+ *   providers: {
+ *     apple: AppleProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * #### Using OAuth with form_post response mode
+ *
+ * When requesting name or email scopes from Apple, you must use form_post response mode:
+ *
+ * ```ts {5-9}
+ * import { AppleProvider } from "@openauthjs/openauth/provider/apple"
+ *
+ * export default issuer({
+ *   providers: {
+ *     apple: AppleProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321",
+ *       responseMode: "form_post"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * #### Using OIDC
+ *
+ * ```ts {5-7}
+ * import { AppleOidcProvider } from "@openauthjs/openauth/provider/apple"
+ *
+ * export default issuer({
+ *   providers: {
+ *     apple: AppleOidcProvider({
+ *       clientID: "1234567890"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+import { OidcWrappedConfig } from "./oidc.js";
+export interface AppleConfig extends Oauth2WrappedConfig {
+    /**
+     * The response mode to use for the authorization request.
+     * Apple requires 'form_post' response mode when requesting name or email scopes.
+     * @default "query"
+     */
+    responseMode?: "query" | "form_post";
+}
+export interface AppleOidcConfig extends OidcWrappedConfig {
+}
+/**
+ * Create an Apple OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * // Using default query response mode (GET callback)
+ * AppleProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ *
+ * // Using form_post response mode (POST callback)
+ * // Required when requesting name or email scope
+ * AppleProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321",
+ *   responseMode: "form_post",
+ *   scopes: ["name", "email"]
+ * })
+ * ```
+ */
+export declare function AppleProvider(config: AppleConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+/**
+ * Create an Apple OIDC provider.
+ *
+ * This is useful if you just want to verify the user's email address.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * AppleOidcProvider({
+ *   clientID: "1234567890"
+ * })
+ * ```
+ */
+export declare function AppleOidcProvider(config: AppleOidcConfig): import("./provider.js").Provider<{
+    id: import("hono/utils/jwt/types").JWTPayload;
+    clientID: string;
+}>;
+//# sourceMappingURL=apple.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/apple.d.ts.map b/src/dist/types/provider/apple.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..391b0f240024b77e75550f6173c1b7b0b8e30e25
--- /dev/null
+++ b/src/dist/types/provider/apple.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"apple.d.ts","sourceRoot":"","sources":["../../../src/provider/apple.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmDG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,WAAY,SAAQ,mBAAmB;IACtD;;;;OAIG;IACH,YAAY,CAAC,EAAE,OAAO,GAAG,WAAW,CAAA;CACrC;AACD,MAAM,WAAW,eAAgB,SAAQ,iBAAiB;CAAG;AAE7D;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,wBAAgB,aAAa,CAAC,MAAM,EAAE,WAAW;;;GAiBhD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,iBAAiB,CAAC,MAAM,EAAE,eAAe;;;GAMxD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/arctic.d.ts b/src/dist/types/provider/arctic.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f362fd2d7bf2d1ca32f023abd696c18ede8993f4
--- /dev/null
+++ b/src/dist/types/provider/arctic.d.ts
@@ -0,0 +1,16 @@
+import type { OAuth2Tokens } from "arctic";
+import { Provider } from "./provider.js";
+export interface ArcticProviderOptions {
+    scopes: string[];
+    clientID: string;
+    clientSecret: string;
+    query?: Record<string, string>;
+}
+export declare function ArcticProvider(provider: new (clientID: string, clientSecret: string, callback: string) => {
+    createAuthorizationURL(state: string, scopes: string[]): URL;
+    validateAuthorizationCode(code: string): Promise<OAuth2Tokens>;
+    refreshAccessToken(refreshToken: string): Promise<OAuth2Tokens>;
+}, config: ArcticProviderOptions): Provider<{
+    tokenset: OAuth2Tokens;
+}>;
+//# sourceMappingURL=arctic.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/arctic.d.ts.map b/src/dist/types/provider/arctic.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..146b53edb7ac81ba665f750c5769521e1c2c6a91
--- /dev/null
+++ b/src/dist/types/provider/arctic.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"arctic.d.ts","sourceRoot":"","sources":["../../../src/provider/arctic.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AAE1C,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAIxC,MAAM,WAAW,qBAAqB;IACpC,MAAM,EAAE,MAAM,EAAE,CAAA;IAChB,QAAQ,EAAE,MAAM,CAAA;IAChB,YAAY,EAAE,MAAM,CAAA;IACpB,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;CAC/B;AAMD,wBAAgB,cAAc,CAC5B,QAAQ,EAAE,KACR,QAAQ,EAAE,MAAM,EAChB,YAAY,EAAE,MAAM,EACpB,QAAQ,EAAE,MAAM,KACb;IACH,sBAAsB,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAA;IAC5D,yBAAyB,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;IAC9D,kBAAkB,CAAC,YAAY,EAAE,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;CAChE,EACD,MAAM,EAAE,qBAAqB,GAC5B,QAAQ,CAAC;IACV,QAAQ,EAAE,YAAY,CAAA;CACvB,CAAC,CAmCD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/code.d.ts b/src/dist/types/provider/code.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..3aa567060b27f491ac5a51f38bc02b08ac67bb81
--- /dev/null
+++ b/src/dist/types/provider/code.d.ts
@@ -0,0 +1,74 @@
+import { Provider } from "./provider.js";
+export interface CodeProviderConfig<Claims extends Record<string, string> = Record<string, string>> {
+    /**
+     * The length of the pin code.
+     *
+     * @default 6
+     */
+    length?: number;
+    /**
+     * The request handler to generate the UI for the code flow.
+     *
+     * Takes the standard [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)
+     * and optionally [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
+     * ojects.
+     *
+     * Also passes in the current `state` of the flow and any `error` that occurred.
+     *
+     * Expects the [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object
+     * in return.
+     */
+    request: (req: Request, state: CodeProviderState, form?: FormData, error?: CodeProviderError) => Promise<Response>;
+    /**
+     * Callback to send the pin code to the user.
+     *
+     * @example
+     * ```ts
+     * {
+     *   sendCode: async (claims, code) => {
+     *     // Send the code through the email or phone number based on the claims
+     *   }
+     * }
+     * ```
+     */
+    sendCode: (claims: Claims, code: string) => Promise<void | CodeProviderError>;
+}
+/**
+ * The state of the code flow.
+ *
+ * | State | Description |
+ * | ----- | ----------- |
+ * | `start` | The user is asked to enter their email address or phone number to start the flow. |
+ * | `code` | The user needs to enter the pin code to verify their _claim_. |
+ */
+export type CodeProviderState = {
+    type: "start";
+} | {
+    type: "code";
+    resend?: boolean;
+    code: string;
+    claims: Record<string, string>;
+};
+/**
+ * The errors that can happen on the code flow.
+ *
+ * | Error | Description |
+ * | ----- | ----------- |
+ * | `invalid_code` | The code is invalid. |
+ * | `invalid_claim` | The _claim_, email or phone number, is invalid. |
+ */
+export type CodeProviderError = {
+    type: "invalid_code";
+} | {
+    type: "invalid_claim";
+    key: string;
+    value: string;
+};
+export declare function CodeProvider<Claims extends Record<string, string> = Record<string, string>>(config: CodeProviderConfig<Claims>): Provider<{
+    claims: Claims;
+}>;
+/**
+ * @internal
+ */
+export type CodeProviderOptions = Parameters<typeof CodeProvider>[0];
+//# sourceMappingURL=code.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/code.d.ts.map b/src/dist/types/provider/code.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..5ab426f909f2d9dec5ec8a2264a3283f01341387
--- /dev/null
+++ b/src/dist/types/provider/code.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"code.d.ts","sourceRoot":"","sources":["../../../src/provider/code.ts"],"names":[],"mappings":"AAuDA,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAGxC,MAAM,WAAW,kBAAkB,CACjC,MAAM,SAAS,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC;IAE9D;;;;OAIG;IACH,MAAM,CAAC,EAAE,MAAM,CAAA;IACf;;;;;;;;;;;OAWG;IACH,OAAO,EAAE,CACP,GAAG,EAAE,OAAO,EACZ,KAAK,EAAE,iBAAiB,EACxB,IAAI,CAAC,EAAE,QAAQ,EACf,KAAK,CAAC,EAAE,iBAAiB,KACtB,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtB;;;;;;;;;;;OAWG;IACH,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,GAAG,iBAAiB,CAAC,CAAA;CAC9E;AAED;;;;;;;GAOG;AACH,MAAM,MAAM,iBAAiB,GACzB;IACE,IAAI,EAAE,OAAO,CAAA;CACd,GACD;IACE,IAAI,EAAE,MAAM,CAAA;IACZ,MAAM,CAAC,EAAE,OAAO,CAAA;IAChB,IAAI,EAAE,MAAM,CAAA;IACZ,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;CAC/B,CAAA;AAEL;;;;;;;GAOG;AACH,MAAM,MAAM,iBAAiB,GACzB;IACE,IAAI,EAAE,cAAc,CAAA;CACrB,GACD;IACE,IAAI,EAAE,eAAe,CAAA;IACrB,GAAG,EAAE,MAAM,CAAA;IACX,KAAK,EAAE,MAAM,CAAA;CACd,CAAA;AAEL,wBAAgB,YAAY,CAC1B,MAAM,SAAS,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAC9D,MAAM,EAAE,kBAAkB,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;IAAE,MAAM,EAAE,MAAM,CAAA;CAAE,CAAC,CAkFlE;AAED;;GAEG;AACH,MAAM,MAAM,mBAAmB,GAAG,UAAU,CAAC,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/src/dist/types/provider/cognito.d.ts b/src/dist/types/provider/cognito.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..5b63308bbac7684ecb54e72265c45a9c89ec65f6
--- /dev/null
+++ b/src/dist/types/provider/cognito.d.ts
@@ -0,0 +1,64 @@
+/**
+ * Use this provider to authenticate with a Cognito OAuth endpoint.
+ *
+ * ```ts {5-10}
+ * import { CognitoProvider } from "@openauthjs/openauth/provider/cognito"
+ *
+ * export default issuer({
+ *   providers: {
+ *     cognito: CognitoProvider({
+ *       domain: "your-domain.auth.us-east-1.amazoncognito.com",
+ *       region: "us-east-1",
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface CognitoConfig extends Oauth2WrappedConfig {
+    /**
+     * The domain of the Cognito User Pool.
+     *
+     * @example
+     * ```ts
+     * {
+     *   domain: "your-domain.auth.us-east-1.amazoncognito.com"
+     * }
+     * ```
+     */
+    domain: string;
+    /**
+     * The region the Cognito User Pool is in.
+     *
+     * @example
+     * ```ts
+     * {
+     *   region: "us-east-1"
+     * }
+     * ```
+     */
+    region: string;
+}
+/**
+ * Create a Cognito OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * CognitoProvider({
+ *   domain: "your-domain.auth.us-east-1.amazoncognito.com",
+ *   region: "us-east-1",
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function CognitoProvider(config: CognitoConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=cognito.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/cognito.d.ts.map b/src/dist/types/provider/cognito.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..506644b94b8e6722a5ecbb2da1b68c82588f6d87
--- /dev/null
+++ b/src/dist/types/provider/cognito.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"cognito.d.ts","sourceRoot":"","sources":["../../../src/provider/cognito.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;GAmBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,aAAc,SAAQ,mBAAmB;IACxD;;;;;;;;;OASG;IACH,MAAM,EAAE,MAAM,CAAA;IACd;;;;;;;;;OASG;IACH,MAAM,EAAE,MAAM,CAAA;CACf;AAED;;;;;;;;;;;;;GAaG;AACH,wBAAgB,eAAe,CAAC,MAAM,EAAE,aAAa;;;GAWpD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/discord.d.ts b/src/dist/types/provider/discord.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..33b2d28489c04564e243c88eeb552718bac19859
--- /dev/null
+++ b/src/dist/types/provider/discord.d.ts
@@ -0,0 +1,38 @@
+/**
+ * Use this provider to authenticate with Discord.
+ *
+ * ```ts {5-8}
+ * import { DiscordProvider } from "@openauthjs/openauth/provider/discord"
+ *
+ * export default issuer({
+ *   providers: {
+ *     discord: DiscordProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface DiscordConfig extends Oauth2WrappedConfig {
+}
+/**
+ * Create a Discord OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * DiscordProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function DiscordProvider(config: DiscordConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=discord.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/discord.d.ts.map b/src/dist/types/provider/discord.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..cfa16859330b55404a23f391726c1a42c8a07842
--- /dev/null
+++ b/src/dist/types/provider/discord.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"discord.d.ts","sourceRoot":"","sources":["../../../src/provider/discord.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,aAAc,SAAQ,mBAAmB;CAAG;AAE7D;;;;;;;;;;;GAWG;AACH,wBAAgB,eAAe,CAAC,MAAM,EAAE,aAAa;;;GASpD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/facebook.d.ts b/src/dist/types/provider/facebook.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..ee5c274c45dabdf8ed6c7e225f2fc7d3c087942a
--- /dev/null
+++ b/src/dist/types/provider/facebook.d.ts
@@ -0,0 +1,74 @@
+/**
+ * Use this provider to authenticate with Facebook. Supports both OAuth2 and OIDC.
+ *
+ * #### Using OAuth
+ *
+ * ```ts {5-8}
+ * import { FacebookProvider } from "@openauthjs/openauth/provider/facebook"
+ *
+ * export default issuer({
+ *   providers: {
+ *     facebook: FacebookProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * #### Using OIDC
+ *
+ * ```ts {5-7}
+ * import { FacebookOidcProvider } from "@openauthjs/openauth/provider/facebook"
+ *
+ * export default issuer({
+ *   providers: {
+ *     facebook: FacebookOidcProvider({
+ *       clientID: "1234567890"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+import { OidcWrappedConfig } from "./oidc.js";
+export interface FacebookConfig extends Oauth2WrappedConfig {
+}
+export interface FacebookOidcConfig extends OidcWrappedConfig {
+}
+/**
+ * Create a Facebook OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * FacebookProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function FacebookProvider(config: FacebookConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+/**
+ * Create a Facebook OIDC provider.
+ *
+ * This is useful if you just want to verify the user's email address.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * FacebookOidcProvider({
+ *   clientID: "1234567890"
+ * })
+ * ```
+ */
+export declare function FacebookOidcProvider(config: FacebookOidcConfig): import("./provider.js").Provider<{
+    id: import("hono/utils/jwt/types").JWTPayload;
+    clientID: string;
+}>;
+//# sourceMappingURL=facebook.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/facebook.d.ts.map b/src/dist/types/provider/facebook.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..71a1a0068741cb3b5b66d597aa2255e4b122950d
--- /dev/null
+++ b/src/dist/types/provider/facebook.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"facebook.d.ts","sourceRoot":"","sources":["../../../src/provider/facebook.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,cAAe,SAAQ,mBAAmB;CAAG;AAC9D,MAAM,WAAW,kBAAmB,SAAQ,iBAAiB;CAAG;AAEhE;;;;;;;;;;;GAWG;AACH,wBAAgB,gBAAgB,CAAC,MAAM,EAAE,cAAc;;;GAStD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,oBAAoB,CAAC,MAAM,EAAE,kBAAkB;;;GAM9D"}
\ No newline at end of file
diff --git a/src/dist/types/provider/github.d.ts b/src/dist/types/provider/github.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4a5089479eb84a37da549b02f8631b645b497986
--- /dev/null
+++ b/src/dist/types/provider/github.d.ts
@@ -0,0 +1,38 @@
+/**
+ * Use this provider to authenticate with Github.
+ *
+ * ```ts {5-8}
+ * import { GithubProvider } from "@openauthjs/openauth/provider/github"
+ *
+ * export default issuer({
+ *   providers: {
+ *     github: GithubProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface GithubConfig extends Oauth2WrappedConfig {
+}
+/**
+ * Create a Github OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * GithubProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function GithubProvider(config: GithubConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=github.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/github.d.ts.map b/src/dist/types/provider/github.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..9f2e5713b1ff58e96c9ba3d84468a79e68fadb93
--- /dev/null
+++ b/src/dist/types/provider/github.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"github.d.ts","sourceRoot":"","sources":["../../../src/provider/github.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,YAAa,SAAQ,mBAAmB;CAAG;AAE5D;;;;;;;;;;;GAWG;AACH,wBAAgB,cAAc,CAAC,MAAM,EAAE,YAAY;;;GASlD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/google.d.ts b/src/dist/types/provider/google.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..51cc20dfdf89c320bff7b81ce27bfc0c6f238a78
--- /dev/null
+++ b/src/dist/types/provider/google.d.ts
@@ -0,0 +1,74 @@
+/**
+ * Use this provider to authenticate with Google. Supports both OAuth2 and OIDC.
+ *
+ * #### Using OAuth
+ *
+ * ```ts {5-8}
+ * import { GoogleProvider } from "@openauthjs/openauth/provider/google"
+ *
+ * export default issuer({
+ *   providers: {
+ *     google: GoogleProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * #### Using OIDC
+ *
+ * ```ts {5-7}
+ * import { GoogleOidcProvider } from "@openauthjs/openauth/provider/google"
+ *
+ * export default issuer({
+ *   providers: {
+ *     google: GoogleOidcProvider({
+ *       clientID: "1234567890"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+import { OidcWrappedConfig } from "./oidc.js";
+export interface GoogleConfig extends Oauth2WrappedConfig {
+}
+export interface GoogleOidcConfig extends OidcWrappedConfig {
+}
+/**
+ * Create a Google OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * GoogleProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function GoogleProvider(config: GoogleConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+/**
+ * Create a Google OIDC provider.
+ *
+ * This is useful if you just want to verify the user's email address.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * GoogleOidcProvider({
+ *   clientID: "1234567890"
+ * })
+ * ```
+ */
+export declare function GoogleOidcProvider(config: GoogleOidcConfig): import("./provider.js").Provider<{
+    id: import("hono/utils/jwt/types").JWTPayload;
+    clientID: string;
+}>;
+//# sourceMappingURL=google.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/google.d.ts.map b/src/dist/types/provider/google.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..4adcb6816a7f959fccecaee1494d716ffbfd4db5
--- /dev/null
+++ b/src/dist/types/provider/google.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"google.d.ts","sourceRoot":"","sources":["../../../src/provider/google.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,YAAa,SAAQ,mBAAmB;CAAG;AAC5D,MAAM,WAAW,gBAAiB,SAAQ,iBAAiB;CAAG;AAE9D;;;;;;;;;;;GAWG;AACH,wBAAgB,cAAc,CAAC,MAAM,EAAE,YAAY;;;GAUlD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,kBAAkB,CAAC,MAAM,EAAE,gBAAgB;;;GAM1D"}
\ No newline at end of file
diff --git a/src/dist/types/provider/index.d.ts b/src/dist/types/provider/index.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..bcc4566e08dad05e63ef3a6be8dfb79e5f9effa5
--- /dev/null
+++ b/src/dist/types/provider/index.d.ts
@@ -0,0 +1,4 @@
+export * from "./code.js";
+export type { Provider as Provider } from "./provider.js";
+export * from "./spotify.js";
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/index.d.ts.map b/src/dist/types/provider/index.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..63ff8cc6646e6b14ca0fa88c421c07d6c65335cf
--- /dev/null
+++ b/src/dist/types/provider/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/provider/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAA;AACzB,YAAY,EAAE,QAAQ,IAAI,QAAQ,EAAE,MAAM,eAAe,CAAA;AACzD,cAAc,cAAc,CAAA"}
\ No newline at end of file
diff --git a/src/dist/types/provider/jumpcloud.d.ts b/src/dist/types/provider/jumpcloud.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..cc44f537a24ec75d2aa4b08117b5a31a6d3b79e2
--- /dev/null
+++ b/src/dist/types/provider/jumpcloud.d.ts
@@ -0,0 +1,38 @@
+/**
+ * Use this provider to authenticate with JumpCloud.
+ *
+ * ```ts {5-8}
+ * import { JumpCloudProvider } from "@openauthjs/openauth/provider/jumpcloud"
+ *
+ * export default issuer({
+ *   providers: {
+ *     jumpcloud: JumpCloudProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface JumpCloudConfig extends Oauth2WrappedConfig {
+}
+/**
+ * Create a JumpCloud OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * JumpCloudProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function JumpCloudProvider(config: JumpCloudConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=jumpcloud.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/jumpcloud.d.ts.map b/src/dist/types/provider/jumpcloud.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..8e198aecfdd4c322e66c2f2ea2b90f36f646fe13
--- /dev/null
+++ b/src/dist/types/provider/jumpcloud.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"jumpcloud.d.ts","sourceRoot":"","sources":["../../../src/provider/jumpcloud.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,eAAgB,SAAQ,mBAAmB;CAAG;AAE/D;;;;;;;;;;;GAWG;AACH,wBAAgB,iBAAiB,CAAC,MAAM,EAAE,eAAe;;;GASxD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/keycloak.d.ts b/src/dist/types/provider/keycloak.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7ffb1ad82d3ee0fe9b8cdec9d364e2ec6146fd99
--- /dev/null
+++ b/src/dist/types/provider/keycloak.d.ts
@@ -0,0 +1,67 @@
+/**
+ * Use this provider to authenticate with a Keycloak server.
+ *
+ * ```ts {5-10}
+ * import { KeycloakProvider } from "@openauthjs/openauth/provider/keycloak"
+ *
+ * export default issuer({
+ *   providers: {
+ *     keycloak: KeycloakProvider({
+ *       baseUrl: "https://your-keycloak-domain",
+ *       realm: "your-realm",
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface KeycloakConfig extends Oauth2WrappedConfig {
+    /**
+     * The base URL of the Keycloak server.
+     *
+     * @example
+     * ```ts
+     * {
+     *   baseUrl: "https://your-keycloak-domain"
+     * }
+     * ```
+     */
+    baseUrl: string;
+    /**
+     * The realm in the Keycloak server to authenticate against.
+     *
+     * A realm in Keycloak is like a tenant or namespace that manages a set of
+     * users, credentials, roles, and groups.
+     *
+     * @example
+     * ```ts
+     * {
+     *   realm: "your-realm"
+     * }
+     * ```
+     */
+    realm: string;
+}
+/**
+ * Create a Keycloak OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * KeycloakProvider({
+ *   baseUrl: "https://your-keycloak-domain",
+ *   realm: "your-realm",
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function KeycloakProvider(config: KeycloakConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=keycloak.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/keycloak.d.ts.map b/src/dist/types/provider/keycloak.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..6c2ecc7f6d840d663baadee30e70082b969c2ca7
--- /dev/null
+++ b/src/dist/types/provider/keycloak.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"keycloak.d.ts","sourceRoot":"","sources":["../../../src/provider/keycloak.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;GAmBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,cAAe,SAAQ,mBAAmB;IACzD;;;;;;;;;OASG;IACH,OAAO,EAAE,MAAM,CAAA;IACf;;;;;;;;;;;;OAYG;IACH,KAAK,EAAE,MAAM,CAAA;CACd;AAED;;;;;;;;;;;;;GAaG;AACH,wBAAgB,gBAAgB,CAAC,MAAM,EAAE,cAAc;;;GAStD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/linkedin.d.ts b/src/dist/types/provider/linkedin.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f3399b6acf367c5d2cad4364bb829b85a9ea7d1d
--- /dev/null
+++ b/src/dist/types/provider/linkedin.d.ts
@@ -0,0 +1,6 @@
+import { type Oauth2WrappedConfig } from "./oauth2.js";
+export declare function LinkedInAdapter(config: Oauth2WrappedConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=linkedin.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/linkedin.d.ts.map b/src/dist/types/provider/linkedin.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..af8398ed914e582fa37f01f8fe8b8f2663b2acee
--- /dev/null
+++ b/src/dist/types/provider/linkedin.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"linkedin.d.ts","sourceRoot":"","sources":["../../../src/provider/linkedin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,KAAK,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEtE,wBAAgB,eAAe,CAAC,MAAM,EAAE,mBAAmB;;;GAS1D"}
\ No newline at end of file
diff --git a/src/dist/types/provider/microsoft.d.ts b/src/dist/types/provider/microsoft.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7afbd330c12fa13728620e5a65675ba81d4585eb
--- /dev/null
+++ b/src/dist/types/provider/microsoft.d.ts
@@ -0,0 +1,89 @@
+/**
+ * Use this provider to authenticate with Microsoft. Supports both OAuth2 and OIDC.
+ *
+ * #### Using OAuth
+ *
+ * ```ts {5-9}
+ * import { MicrosoftProvider } from "@openauthjs/openauth/provider/microsoft"
+ *
+ * export default issuer({
+ *   providers: {
+ *     microsoft: MicrosoftProvider({
+ *       tenant: "1234567890",
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * #### Using OIDC
+ *
+ * ```ts {5-7}
+ * import { MicrosoftOidcProvider } from "@openauthjs/openauth/provider/microsoft"
+ *
+ * export default issuer({
+ *   providers: {
+ *     microsoft: MicrosoftOidcProvider({
+ *       clientID: "1234567890"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+import { OidcWrappedConfig } from "./oidc.js";
+export interface MicrosoftConfig extends Oauth2WrappedConfig {
+    /**
+     * The tenant ID of the Microsoft account.
+     *
+     * This is usually the same as the client ID.
+     *
+     * @example
+     * ```ts
+     * {
+     *   tenant: "1234567890"
+     * }
+     * ```
+     */
+    tenant: string;
+}
+export interface MicrosoftOidcConfig extends OidcWrappedConfig {
+}
+/**
+ * Create a Microsoft OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * MicrosoftProvider({
+ *   tenant: "1234567890",
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function MicrosoftProvider(config: MicrosoftConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+/**
+ * Create a Microsoft OIDC provider.
+ *
+ * This is useful if you just want to verify the user's email address.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * MicrosoftOidcProvider({
+ *   clientID: "1234567890"
+ * })
+ * ```
+ */
+export declare function MicrosoftOidcProvider(config: MicrosoftOidcConfig): import("./provider.js").Provider<{
+    id: import("hono/utils/jwt/types").JWTPayload;
+    clientID: string;
+}>;
+//# sourceMappingURL=microsoft.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/microsoft.d.ts.map b/src/dist/types/provider/microsoft.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..4bbbc3b015845814cb72adb282b8bf4300572cad
--- /dev/null
+++ b/src/dist/types/provider/microsoft.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"microsoft.d.ts","sourceRoot":"","sources":["../../../src/provider/microsoft.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AACjE,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAA;AAE3D,MAAM,WAAW,eAAgB,SAAQ,mBAAmB;IAC1D;;;;;;;;;;;OAWG;IACH,MAAM,EAAE,MAAM,CAAA;CACf;AACD,MAAM,WAAW,mBAAoB,SAAQ,iBAAiB;CAAG;AAEjE;;;;;;;;;;;;GAYG;AACH,wBAAgB,iBAAiB,CAAC,MAAM,EAAE,eAAe;;;GASxD;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,qBAAqB,CAAC,MAAM,EAAE,mBAAmB;;;GAMhE"}
\ No newline at end of file
diff --git a/src/dist/types/provider/oauth2.d.ts b/src/dist/types/provider/oauth2.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d7ca8f47cf8621a646a64fe9e971c2281dc855a5
--- /dev/null
+++ b/src/dist/types/provider/oauth2.d.ts
@@ -0,0 +1,133 @@
+/**
+ * Use this to connect authentication providers that support OAuth 2.0.
+ *
+ * ```ts {5-12}
+ * import { Oauth2Provider } from "@openauthjs/openauth/provider/oauth2"
+ *
+ * export default issuer({
+ *   providers: {
+ *     oauth2: Oauth2Provider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321",
+ *       endpoint: {
+ *         authorization: "https://auth.myserver.com/authorize",
+ *         token: "https://auth.myserver.com/token"
+ *       }
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ *
+ * @packageDocumentation
+ */
+import { Provider } from "./provider.js";
+export interface Oauth2Config {
+    /**
+     * @internal
+     */
+    type?: string;
+    /**
+     * The client ID.
+     *
+     * This is just a string to identify your app.
+     *
+     * @example
+     * ```ts
+     * {
+     *   clientID: "my-client"
+     * }
+     * ```
+     */
+    clientID: string;
+    /**
+     * The client secret.
+     *
+     * This is a private key that's used to authenticate your app. It should be kept secret.
+     *
+     * @example
+     * ```ts
+     * {
+     *   clientSecret: "0987654321"
+     * }
+     * ```
+     */
+    clientSecret: string;
+    /**
+     * The URLs of the authorization and token endpoints.
+     *
+     * @example
+     * ```ts
+     * {
+     *   endpoint: {
+     *     authorization: "https://auth.myserver.com/authorize",
+     *     token: "https://auth.myserver.com/token",
+     *     jwks: "https://auth.myserver.com/auth/keys"
+     *   }
+     * }
+     * ```
+     */
+    endpoint: {
+        /**
+         * The URL of the authorization endpoint.
+         */
+        authorization: string;
+        /**
+         * The URL of the token endpoint.
+         */
+        token: string;
+        /**
+         * The URL of the JWKS endpoint.
+         */
+        jwks?: string;
+    };
+    /**
+     * A list of OAuth scopes that you want to request.
+     *
+     * @example
+     * ```ts
+     * {
+     *   scopes: ["email", "profile"]
+     * }
+     * ```
+     */
+    scopes: string[];
+    /**
+     * Whether to use PKCE (Proof Key for Code Exchange) for the authorization code flow.
+     * Some providers like x.com require this.
+     * @default false
+     */
+    pkce?: boolean;
+    /**
+     * Any additional parameters that you want to pass to the authorization endpoint.
+     * @example
+     * ```ts
+     * {
+     *   query: {
+     *     access_type: "offline",
+     *     prompt: "consent"
+     *   }
+     * }
+     * ```
+     */
+    query?: Record<string, string>;
+}
+/**
+ * @internal
+ */
+export type Oauth2WrappedConfig = Omit<Oauth2Config, "endpoint" | "name">;
+/**
+ * @internal
+ */
+export interface Oauth2Token {
+    access: string;
+    refresh: string;
+    expiry: number;
+    id?: Record<string, any>;
+    raw: Record<string, any>;
+}
+export declare function Oauth2Provider(config: Oauth2Config): Provider<{
+    tokenset: Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=oauth2.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/oauth2.d.ts.map b/src/dist/types/provider/oauth2.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..0f0a5ea258ca6cc8ba12a113e21f5ef2440da29f
--- /dev/null
+++ b/src/dist/types/provider/oauth2.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"oauth2.d.ts","sourceRoot":"","sources":["../../../src/provider/oauth2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAMH,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAExC,MAAM,WAAW,YAAY;IAC3B;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAA;IACb;;;;;;;;;;;OAWG;IACH,QAAQ,EAAE,MAAM,CAAA;IAChB;;;;;;;;;;;OAWG;IACH,YAAY,EAAE,MAAM,CAAA;IACpB;;;;;;;;;;;;;OAaG;IACH,QAAQ,EAAE;QACR;;WAEG;QACH,aAAa,EAAE,MAAM,CAAA;QACrB;;WAEG;QACH,KAAK,EAAE,MAAM,CAAA;QACb;;WAEG;QACH,IAAI,CAAC,EAAE,MAAM,CAAA;KACd,CAAA;IACD;;;;;;;;;OASG;IACH,MAAM,EAAE,MAAM,EAAE,CAAA;IAChB;;;;OAIG;IACH,IAAI,CAAC,EAAE,OAAO,CAAA;IACd;;;;;;;;;;;OAWG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;CAC/B;AAED;;GAEG;AACH,MAAM,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,EAAE,UAAU,GAAG,MAAM,CAAC,CAAA;AAEzE;;GAEG;AACH,MAAM,WAAW,WAAW;IAC1B,MAAM,EAAE,MAAM,CAAA;IACd,OAAO,EAAE,MAAM,CAAA;IACf,MAAM,EAAE,MAAM,CAAA;IACd,EAAE,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;IACxB,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;CACzB;AAQD,wBAAgB,cAAc,CAC5B,MAAM,EAAE,YAAY,GACnB,QAAQ,CAAC;IAAE,QAAQ,EAAE,WAAW,CAAC;IAAC,QAAQ,EAAE,MAAM,CAAA;CAAE,CAAC,CAuJvD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/oidc.d.ts b/src/dist/types/provider/oidc.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a4020c5d5c2c9fabba11ab3588e1a39a25004a76
--- /dev/null
+++ b/src/dist/types/provider/oidc.d.ts
@@ -0,0 +1,91 @@
+/**
+ * Use this to connect authentication providers that support OIDC.
+ *
+ * ```ts {5-8}
+ * import { OidcProvider } from "@openauthjs/openauth/provider/oidc"
+ *
+ * export default issuer({
+ *   providers: {
+ *     oauth2: OidcProvider({
+ *       clientId: "1234567890",
+ *       issuer: "https://auth.myserver.com"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ *
+ * @packageDocumentation
+ */
+import { Provider } from "./provider.js";
+import { JWTPayload } from "hono/utils/jwt/types";
+export interface OidcConfig {
+    /**
+     * @internal
+     */
+    type?: string;
+    /**
+     * The client ID.
+     *
+     * This is just a string to identify your app.
+     *
+     * @example
+     * ```ts
+     * {
+     *   clientID: "my-client"
+     * }
+     * ```
+     */
+    clientID: string;
+    /**
+     * The URL of your authorization server.
+     *
+     * @example
+     * ```ts
+     * {
+     *   issuer: "https://auth.myserver.com"
+     * }
+     * ```
+     */
+    issuer: string;
+    /**
+     * A list of OIDC scopes that you want to request.
+     *
+     * @example
+     * ```ts
+     * {
+     *   scopes: ["openid", "profile", "email"]
+     * }
+     * ```
+     */
+    scopes?: string[];
+    /**
+     * Any additional parameters that you want to pass to the authorization endpoint.
+     * @example
+     * ```ts
+     * {
+     *   query: {
+     *     prompt: "consent"
+     *   }
+     * }
+     * ```
+     */
+    query?: Record<string, string>;
+}
+/**
+ * @internal
+ */
+export type OidcWrappedConfig = Omit<OidcConfig, "issuer" | "name">;
+/**
+ * @internal
+ */
+export interface IdTokenResponse {
+    idToken: string;
+    claims: Record<string, any>;
+    raw: Record<string, any>;
+}
+export declare function OidcProvider(config: OidcConfig): Provider<{
+    id: JWTPayload;
+    clientID: string;
+}>;
+//# sourceMappingURL=oidc.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/oidc.d.ts.map b/src/dist/types/provider/oidc.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..c18c6188d82bf082e634f2e54b337fa9e431d891
--- /dev/null
+++ b/src/dist/types/provider/oidc.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"oidc.d.ts","sourceRoot":"","sources":["../../../src/provider/oidc.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;GAkBG;AAKH,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAA;AAGjD,MAAM,WAAW,UAAU;IACzB;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAA;IACb;;;;;;;;;;;OAWG;IACH,QAAQ,EAAE,MAAM,CAAA;IAChB;;;;;;;;;OASG;IACH,MAAM,EAAE,MAAM,CAAA;IACd;;;;;;;;;OASG;IACH,MAAM,CAAC,EAAE,MAAM,EAAE,CAAA;IACjB;;;;;;;;;;OAUG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;CAC/B;AAED;;GAEG;AACH,MAAM,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,EAAE,QAAQ,GAAG,MAAM,CAAC,CAAA;AAQnE;;GAEG;AACH,MAAM,WAAW,eAAe;IAC9B,OAAO,EAAE,MAAM,CAAA;IACf,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;IAC3B,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;CACzB;AAED,wBAAgB,YAAY,CAC1B,MAAM,EAAE,UAAU,GACjB,QAAQ,CAAC;IAAE,EAAE,EAAE,UAAU,CAAC;IAAC,QAAQ,EAAE,MAAM,CAAA;CAAE,CAAC,CA2EhD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/password.d.ts b/src/dist/types/provider/password.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..ad0626fdba0f8a8ccad32ec50849096ffb80e613
--- /dev/null
+++ b/src/dist/types/provider/password.d.ts
@@ -0,0 +1,210 @@
+import { Provider } from "./provider.js";
+import { v1 } from "@standard-schema/spec";
+/**
+ * @internal
+ */
+export interface PasswordHasher<T> {
+    hash(password: string): Promise<T>;
+    verify(password: string, compare: T): Promise<boolean>;
+}
+export interface PasswordConfig {
+    /**
+     * @internal
+     */
+    length?: number;
+    /**
+     * @internal
+     */
+    hasher?: PasswordHasher<any>;
+    /**
+     * The request handler to generate the UI for the login screen.
+     *
+     * Takes the standard [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)
+     * and optionally [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
+     * ojects.
+     *
+     * In case of an error, this is called again with the `error`.
+     *
+     * Expects the [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object
+     * in return.
+     */
+    login: (req: Request, form?: FormData, error?: PasswordLoginError) => Promise<Response>;
+    /**
+     * The request handler to generate the UI for the register screen.
+     *
+     * Takes the standard [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)
+     * and optionally [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
+     * ojects.
+     *
+     * Also passes in the current `state` of the flow and any `error` that occurred.
+     *
+     * Expects the [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object
+     * in return.
+     */
+    register: (req: Request, state: PasswordRegisterState, form?: FormData, error?: PasswordRegisterError) => Promise<Response>;
+    /**
+     * The request handler to generate the UI for the change password screen.
+     *
+     * Takes the standard [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)
+     * and optionally [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
+     * ojects.
+     *
+     * Also passes in the current `state` of the flow and any `error` that occurred.
+     *
+     * Expects the [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object
+     * in return.
+     */
+    change: (req: Request, state: PasswordChangeState, form?: FormData, error?: PasswordChangeError) => Promise<Response>;
+    /**
+     * Callback to send the confirmation pin code to the user.
+     *
+     * @example
+     * ```ts
+     * {
+     *   sendCode: async (email, code) => {
+     *     // Send an email with the code
+     *   }
+     * }
+     * ```
+     */
+    sendCode: (email: string, code: string) => Promise<void>;
+    /**
+     * Callback to validate the password on sign up and password reset.
+     *
+     * @example
+     * ```ts
+     * {
+     *   validatePassword: (password) => {
+     *      return password.length < 8 ? "Password must be at least 8 characters" : undefined
+     *   }
+     * }
+     * ```
+     */
+    validatePassword?: v1.StandardSchema | ((password: string) => Promise<string | undefined> | string | undefined);
+}
+/**
+ * The states that can happen on the register screen.
+ *
+ * | State | Description |
+ * | ----- | ----------- |
+ * | `start` | The user is asked to enter their email address and password to start the flow. |
+ * | `code` | The user needs to enter the pin code to verify their email. |
+ */
+export type PasswordRegisterState = {
+    type: "start";
+} | {
+    type: "code";
+    code: string;
+    email: string;
+    password: string;
+};
+/**
+ * The errors that can happen on the register screen.
+ *
+ * | Error | Description |
+ * | ----- | ----------- |
+ * | `email_taken` | The email is already taken. |
+ * | `invalid_email` | The email is invalid. |
+ * | `invalid_code` | The code is invalid. |
+ * | `invalid_password` | The password is invalid. |
+ * | `password_mismatch` | The passwords do not match. |
+ */
+export type PasswordRegisterError = {
+    type: "invalid_code";
+} | {
+    type: "email_taken";
+} | {
+    type: "invalid_email";
+} | {
+    type: "invalid_password";
+} | {
+    type: "password_mismatch";
+} | {
+    type: "validation_error";
+    message?: string;
+};
+/**
+ * The state of the password change flow.
+ *
+ * | State | Description |
+ * | ----- | ----------- |
+ * | `start` | The user is asked to enter their email address to start the flow. |
+ * | `code` | The user needs to enter the pin code to verify their email. |
+ * | `update` | The user is asked to enter their new password and confirm it. |
+ */
+export type PasswordChangeState = {
+    type: "start";
+    redirect: string;
+} | {
+    type: "code";
+    code: string;
+    email: string;
+    redirect: string;
+} | {
+    type: "update";
+    redirect: string;
+    email: string;
+};
+/**
+ * The errors that can happen on the change password screen.
+ *
+ * | Error | Description |
+ * | ----- | ----------- |
+ * | `invalid_email` | The email is invalid. |
+ * | `invalid_code` | The code is invalid. |
+ * | `invalid_password` | The password is invalid. |
+ * | `password_mismatch` | The passwords do not match. |
+ */
+export type PasswordChangeError = {
+    type: "invalid_email";
+} | {
+    type: "invalid_code";
+} | {
+    type: "invalid_password";
+} | {
+    type: "password_mismatch";
+} | {
+    type: "validation_error";
+    message: string;
+};
+/**
+ * The errors that can happen on the login screen.
+ *
+ * | Error | Description |
+ * | ----- | ----------- |
+ * | `invalid_email` | The email is invalid. |
+ * | `invalid_password` | The password is invalid. |
+ */
+export type PasswordLoginError = {
+    type: "invalid_password";
+} | {
+    type: "invalid_email";
+};
+export declare function PasswordProvider(config: PasswordConfig): Provider<{
+    email: string;
+}>;
+/**
+ * @internal
+ */
+export declare function PBKDF2Hasher(opts?: {
+    iterations?: number;
+}): PasswordHasher<{
+    hash: string;
+    salt: string;
+    iterations: number;
+}>;
+/**
+ * @internal
+ */
+export declare function ScryptHasher(opts?: {
+    N?: number;
+    r?: number;
+    p?: number;
+}): PasswordHasher<{
+    hash: string;
+    salt: string;
+    N: number;
+    r: number;
+    p: number;
+}>;
+//# sourceMappingURL=password.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/password.d.ts.map b/src/dist/types/provider/password.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..59420268f4c347dfefb755ca2ea5ba94a5c26af7
--- /dev/null
+++ b/src/dist/types/provider/password.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"password.d.ts","sourceRoot":"","sources":["../../../src/provider/password.ts"],"names":[],"mappings":"AAyCA,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AAExC,OAAO,EAAE,EAAE,EAAE,MAAM,uBAAuB,CAAA;AAE1C;;GAEG;AACH,MAAM,WAAW,cAAc,CAAC,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;IAClC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;CACvD;AAED,MAAM,WAAW,cAAc;IAC7B;;OAEG;IACH,MAAM,CAAC,EAAE,MAAM,CAAA;IACf;;OAEG;IACH,MAAM,CAAC,EAAE,cAAc,CAAC,GAAG,CAAC,CAAA;IAC5B;;;;;;;;;;;OAWG;IACH,KAAK,EAAE,CACL,GAAG,EAAE,OAAO,EACZ,IAAI,CAAC,EAAE,QAAQ,EACf,KAAK,CAAC,EAAE,kBAAkB,KACvB,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtB;;;;;;;;;;;OAWG;IACH,QAAQ,EAAE,CACR,GAAG,EAAE,OAAO,EACZ,KAAK,EAAE,qBAAqB,EAC5B,IAAI,CAAC,EAAE,QAAQ,EACf,KAAK,CAAC,EAAE,qBAAqB,KAC1B,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtB;;;;;;;;;;;OAWG;IACH,MAAM,EAAE,CACN,GAAG,EAAE,OAAO,EACZ,KAAK,EAAE,mBAAmB,EAC1B,IAAI,CAAC,EAAE,QAAQ,EACf,KAAK,CAAC,EAAE,mBAAmB,KACxB,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtB;;;;;;;;;;;OAWG;IACH,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA;IACxD;;;;;;;;;;;OAWG;IACH,gBAAgB,CAAC,EACb,EAAE,CAAC,cAAc,GACjB,CAAC,CAAC,QAAQ,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,CAAA;CAC7E;AAED;;;;;;;GAOG;AACH,MAAM,MAAM,qBAAqB,GAC7B;IACE,IAAI,EAAE,OAAO,CAAA;CACd,GACD;IACE,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;IACZ,KAAK,EAAE,MAAM,CAAA;IACb,QAAQ,EAAE,MAAM,CAAA;CACjB,CAAA;AAEL;;;;;;;;;;GAUG;AACH,MAAM,MAAM,qBAAqB,GAC7B;IACE,IAAI,EAAE,cAAc,CAAA;CACrB,GACD;IACE,IAAI,EAAE,aAAa,CAAA;CACpB,GACD;IACE,IAAI,EAAE,eAAe,CAAA;CACtB,GACD;IACE,IAAI,EAAE,kBAAkB,CAAA;CACzB,GACD;IACE,IAAI,EAAE,mBAAmB,CAAA;CAC1B,GACD;IACE,IAAI,EAAE,kBAAkB,CAAA;IACxB,OAAO,CAAC,EAAE,MAAM,CAAA;CACjB,CAAA;AAEL;;;;;;;;GAQG;AACH,MAAM,MAAM,mBAAmB,GAC3B;IACE,IAAI,EAAE,OAAO,CAAA;IACb,QAAQ,EAAE,MAAM,CAAA;CACjB,GACD;IACE,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;IACZ,KAAK,EAAE,MAAM,CAAA;IACb,QAAQ,EAAE,MAAM,CAAA;CACjB,GACD;IACE,IAAI,EAAE,QAAQ,CAAA;IACd,QAAQ,EAAE,MAAM,CAAA;IAChB,KAAK,EAAE,MAAM,CAAA;CACd,CAAA;AAEL;;;;;;;;;GASG;AACH,MAAM,MAAM,mBAAmB,GAC3B;IACE,IAAI,EAAE,eAAe,CAAA;CACtB,GACD;IACE,IAAI,EAAE,cAAc,CAAA;CACrB,GACD;IACE,IAAI,EAAE,kBAAkB,CAAA;CACzB,GACD;IACE,IAAI,EAAE,mBAAmB,CAAA;CAC1B,GACD;IACE,IAAI,EAAE,kBAAkB,CAAA;IACxB,OAAO,EAAE,MAAM,CAAA;CAChB,CAAA;AAEL;;;;;;;GAOG;AACH,MAAM,MAAM,kBAAkB,GAC1B;IACE,IAAI,EAAE,kBAAkB,CAAA;CACzB,GACD;IACE,IAAI,EAAE,eAAe,CAAA;CACtB,CAAA;AAEL,wBAAgB,gBAAgB,CAC9B,MAAM,EAAE,cAAc,GACrB,QAAQ,CAAC;IAAE,KAAK,EAAE,MAAM,CAAA;CAAE,CAAC,CA6Q7B;AAOD;;GAEG;AACH,wBAAgB,YAAY,CAAC,IAAI,CAAC,EAAE;IAAE,UAAU,CAAC,EAAE,MAAM,CAAA;CAAE,GAAG,cAAc,CAAC;IAC3E,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;IACZ,UAAU,EAAE,MAAM,CAAA;CACnB,CAAC,CAsDD;AAID;;GAEG;AACH,wBAAgB,YAAY,CAAC,IAAI,CAAC,EAAE;IAClC,CAAC,CAAC,EAAE,MAAM,CAAA;IACV,CAAC,CAAC,EAAE,MAAM,CAAA;IACV,CAAC,CAAC,EAAE,MAAM,CAAA;CACX,GAAG,cAAc,CAAC;IACjB,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;IACZ,CAAC,EAAE,MAAM,CAAA;IACT,CAAC,EAAE,MAAM,CAAA;IACT,CAAC,EAAE,MAAM,CAAA;CACV,CAAC,CAiDD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/provider.d.ts b/src/dist/types/provider/provider.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2b52c0cbb40dfdb330c471dc3c4b173eaadd0703
--- /dev/null
+++ b/src/dist/types/provider/provider.d.ts
@@ -0,0 +1,29 @@
+import type { Context, Hono } from "hono";
+import { StorageAdapter } from "../storage/storage.js";
+export type ProviderRoute = Hono;
+export interface Provider<Properties = any> {
+    type: string;
+    init: (route: ProviderRoute, options: ProviderOptions<Properties>) => void;
+    client?: (input: {
+        clientID: string;
+        clientSecret: string;
+        params: Record<string, string>;
+    }) => Promise<Properties>;
+}
+export interface ProviderOptions<Properties> {
+    name: string;
+    success: (ctx: Context, properties: Properties, opts?: {
+        invalidate?: (subject: string) => Promise<void>;
+    }) => Promise<Response>;
+    forward: (ctx: Context, response: Response) => Response;
+    set: <T>(ctx: Context, key: string, maxAge: number, value: T) => Promise<void>;
+    get: <T>(ctx: Context, key: string) => Promise<T>;
+    unset: (ctx: Context, key: string) => Promise<void>;
+    invalidate: (subject: string) => Promise<void>;
+    storage: StorageAdapter;
+}
+export declare class ProviderError extends Error {
+}
+export declare class ProviderUnknownError extends ProviderError {
+}
+//# sourceMappingURL=provider.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/provider.d.ts.map b/src/dist/types/provider/provider.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..73e17a22e9c0d74db8bf5815ce5fd28ed2ea3abf
--- /dev/null
+++ b/src/dist/types/provider/provider.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"provider.d.ts","sourceRoot":"","sources":["../../../src/provider/provider.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAA;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAA;AAEtD,MAAM,MAAM,aAAa,GAAG,IAAI,CAAA;AAEhC,MAAM,WAAW,QAAQ,CAAC,UAAU,GAAG,GAAG;IACxC,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,eAAe,CAAC,UAAU,CAAC,KAAK,IAAI,CAAA;IAC1E,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE;QACf,QAAQ,EAAE,MAAM,CAAA;QAChB,YAAY,EAAE,MAAM,CAAA;QACpB,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;KAC/B,KAAK,OAAO,CAAC,UAAU,CAAC,CAAA;CAC1B;AAED,MAAM,WAAW,eAAe,CAAC,UAAU;IACzC,IAAI,EAAE,MAAM,CAAA;IACZ,OAAO,EAAE,CACP,GAAG,EAAE,OAAO,EACZ,UAAU,EAAE,UAAU,EACtB,IAAI,CAAC,EAAE;QACL,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA;KAChD,KACE,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtB,OAAO,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,KAAK,QAAQ,CAAA;IACvD,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA;IAC9E,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC,CAAA;IACjD,KAAK,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA;IACnD,UAAU,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA;IAC9C,OAAO,EAAE,cAAc,CAAA;CACxB;AACD,qBAAa,aAAc,SAAQ,KAAK;CAAG;AAC3C,qBAAa,oBAAqB,SAAQ,aAAa;CAAG"}
\ No newline at end of file
diff --git a/src/dist/types/provider/slack.d.ts b/src/dist/types/provider/slack.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..99dd912eddbd5a9726dcc546b22a17376cd2f729
--- /dev/null
+++ b/src/dist/types/provider/slack.d.ts
@@ -0,0 +1,59 @@
+/**
+ * Use this provider to authenticate with Slack.
+ *
+ * ```ts {5-10}
+ * import { SlackProvider } from "@openauthjs/openauth/provider/slack"
+ *
+ * export default issuer({
+ *   providers: {
+ *     slack: SlackProvider({
+ *       team: "T1234567890",
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321",
+ *       scopes: ["openid", "email", "profile"]
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface SlackConfig extends Oauth2WrappedConfig {
+    /**
+     * The workspace the user is intending to authenticate.
+     *
+     * If that workspace has been previously authenticated, the user will be signed in directly,
+     * bypassing the consent screen.
+     */
+    team: string;
+    /**
+     * The scopes to request from the user.
+     *
+     * | Scope | Description |
+     * |-|-|
+     * | `email` | Grants permission to access the user's email address. |
+     * | `profile` | Grants permission to access the user's profile information. |
+     * | `openid` | Grants permission to use OpenID Connect to verify the user's identity. |
+     */
+    scopes: ("email" | "profile" | "openid")[];
+}
+/**
+ * Creates a [Slack OAuth2 provider](https://api.slack.com/authentication/sign-in-with-slack).
+ *
+ * @param {SlackConfig} config - The config for the provider.
+ * @example
+ * ```ts
+ * SlackProvider({
+ *   team: "T1234567890",
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321",
+ *   scopes: ["openid", "email", "profile"]
+ * })
+ * ```
+ */
+export declare function SlackProvider(config: SlackConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=slack.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/slack.d.ts.map b/src/dist/types/provider/slack.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..a225c61364ab1de48258c7e01babef8e52f214ee
--- /dev/null
+++ b/src/dist/types/provider/slack.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"slack.d.ts","sourceRoot":"","sources":["../../../src/provider/slack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;GAmBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,WAAY,SAAQ,mBAAmB;IACtD;;;;;OAKG;IACH,IAAI,EAAE,MAAM,CAAA;IACZ;;;;;;;;OAQG;IACH,MAAM,EAAE,CAAC,OAAO,GAAG,SAAS,GAAG,QAAQ,CAAC,EAAE,CAAA;CAC3C;AAED;;;;;;;;;;;;;GAaG;AACH,wBAAgB,aAAa,CAAC,MAAM,EAAE,WAAW;;;GAShD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/spotify.d.ts b/src/dist/types/provider/spotify.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..0dc383c917a64bd53595b17d26fb4161cbd20aa4
--- /dev/null
+++ b/src/dist/types/provider/spotify.d.ts
@@ -0,0 +1,38 @@
+/**
+ * Use this provider to authenticate with Spotify.
+ *
+ * ```ts {5-8}
+ * import { SpotifyProvider } from "@openauthjs/openauth/provider/spotify"
+ *
+ * export default issuer({
+ *   providers: {
+ *     spotify: SpotifyProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { type Oauth2WrappedConfig } from "./oauth2.js";
+export interface SpotifyConfig extends Oauth2WrappedConfig {
+}
+/**
+ * Create a Spotify OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * SpotifyProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function SpotifyProvider(config: SpotifyConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=spotify.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/spotify.d.ts.map b/src/dist/types/provider/spotify.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..f71ca41950588224ab6657a8416f360111559463
--- /dev/null
+++ b/src/dist/types/provider/spotify.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"spotify.d.ts","sourceRoot":"","sources":["../../../src/provider/spotify.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAkB,KAAK,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEtE,MAAM,WAAW,aAAc,SAAQ,mBAAmB;CAAG;AAE7D;;;;;;;;;;;GAWG;AACH,wBAAgB,eAAe,CAAC,MAAM,EAAE,aAAa;;;GASpD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/twitch.d.ts b/src/dist/types/provider/twitch.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d4ec0d14ba9882fb77427bc1208bd88445065e44
--- /dev/null
+++ b/src/dist/types/provider/twitch.d.ts
@@ -0,0 +1,38 @@
+/**
+ * Use this provider to authenticate with Twitch.
+ *
+ * ```ts {5-8}
+ * import { TwitchProvider } from "@openauthjs/openauth/provider/twitch"
+ *
+ * export default issuer({
+ *   providers: {
+ *     twitch: TwitchProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface TwitchConfig extends Oauth2WrappedConfig {
+}
+/**
+ * Create a Twitch OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * TwitchProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function TwitchProvider(config: TwitchConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=twitch.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/twitch.d.ts.map b/src/dist/types/provider/twitch.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..8fee7424bcb08719f2b2303c095209e622551d83
--- /dev/null
+++ b/src/dist/types/provider/twitch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"twitch.d.ts","sourceRoot":"","sources":["../../../src/provider/twitch.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,YAAa,SAAQ,mBAAmB;CAAG;AAE5D;;;;;;;;;;;GAWG;AACH,wBAAgB,cAAc,CAAC,MAAM,EAAE,YAAY;;;GASlD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/x.d.ts b/src/dist/types/provider/x.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c6d2f645cfaf330ecd5ed41f2960e5fc25208767
--- /dev/null
+++ b/src/dist/types/provider/x.d.ts
@@ -0,0 +1,38 @@
+/**
+ * Use this provider to authenticate with X.com.
+ *
+ * ```ts {5-8}
+ * import { XProvider } from "@openauthjs/openauth/provider/x"
+ *
+ * export default issuer({
+ *   providers: {
+ *     x: XProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface XProviderConfig extends Oauth2WrappedConfig {
+}
+/**
+ * Create a X.com OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * XProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function XProvider(config: XProviderConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=x.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/x.d.ts.map b/src/dist/types/provider/x.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..fbbdd09ed2daca0937e72b006a913d23ab539071
--- /dev/null
+++ b/src/dist/types/provider/x.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"x.d.ts","sourceRoot":"","sources":["../../../src/provider/x.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,eAAgB,SAAQ,mBAAmB;CAAG;AAE/D;;;;;;;;;;;GAWG;AACH,wBAAgB,SAAS,CAAC,MAAM,EAAE,eAAe;;;GAUhD"}
\ No newline at end of file
diff --git a/src/dist/types/provider/yahoo.d.ts b/src/dist/types/provider/yahoo.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f6f2a467a43f811d2c05b68ed015b433f8ded85e
--- /dev/null
+++ b/src/dist/types/provider/yahoo.d.ts
@@ -0,0 +1,38 @@
+/**
+ * Use this provider to authenticate with Yahoo.
+ *
+ * ```ts {5-8}
+ * import { YahooProvider } from "@openauthjs/openauth/provider/yahoo"
+ *
+ * export default issuer({
+ *   providers: {
+ *     yahoo: YahooProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321"
+ *     })
+ *   }
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { Oauth2WrappedConfig } from "./oauth2.js";
+export interface YahooConfig extends Oauth2WrappedConfig {
+}
+/**
+ * Create a Yahoo OAuth2 provider.
+ *
+ * @param config - The config for the provider.
+ * @example
+ * ```ts
+ * YahooProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321"
+ * })
+ * ```
+ */
+export declare function YahooProvider(config: YahooConfig): import("./provider.js").Provider<{
+    tokenset: import("./oauth2.js").Oauth2Token;
+    clientID: string;
+}>;
+//# sourceMappingURL=yahoo.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/provider/yahoo.d.ts.map b/src/dist/types/provider/yahoo.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..3175776d7a9bcd6ccf8676bb29c94daa014d75d8
--- /dev/null
+++ b/src/dist/types/provider/yahoo.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"yahoo.d.ts","sourceRoot":"","sources":["../../../src/provider/yahoo.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;GAiBG;AAEH,OAAO,EAAkB,mBAAmB,EAAE,MAAM,aAAa,CAAA;AAEjE,MAAM,WAAW,WAAY,SAAQ,mBAAmB;CAAG;AAE3D;;;;;;;;;;;GAWG;AACH,wBAAgB,aAAa,CAAC,MAAM,EAAE,WAAW;;;GAShD"}
\ No newline at end of file
diff --git a/src/dist/types/random.d.ts b/src/dist/types/random.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2b0bb7b743d5e19d89ffe74f263bb6d8c93ed09f
--- /dev/null
+++ b/src/dist/types/random.d.ts
@@ -0,0 +1,3 @@
+export declare function generateUnbiasedDigits(length: number): string;
+export declare function timingSafeCompare(a: string, b: string): boolean;
+//# sourceMappingURL=random.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/random.d.ts.map b/src/dist/types/random.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..4061635fbd4a88a5ccf7f26790f6e4ebd266ca65
--- /dev/null
+++ b/src/dist/types/random.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"random.d.ts","sourceRoot":"","sources":["../../src/random.ts"],"names":[],"mappings":"AAEA,wBAAgB,sBAAsB,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAW7D;AAED,wBAAgB,iBAAiB,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,GAAG,OAAO,CAQ/D"}
\ No newline at end of file
diff --git a/src/dist/types/storage/aws.d.ts b/src/dist/types/storage/aws.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e9544f71c457d2d0bc7690fb03c3872754b0fa0d
--- /dev/null
+++ b/src/dist/types/storage/aws.d.ts
@@ -0,0 +1,4 @@
+import { AwsClient } from "aws4fetch";
+export declare function client(): Promise<AwsClient>;
+export type AwsOptions = Exclude<Parameters<AwsClient["fetch"]>[1], null | undefined>["aws"];
+//# sourceMappingURL=aws.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/storage/aws.d.ts.map b/src/dist/types/storage/aws.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..0b0d18a5acd3be570d4b17224c50850d6778618d
--- /dev/null
+++ b/src/dist/types/storage/aws.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"aws.d.ts","sourceRoot":"","sources":["../../../src/storage/aws.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAA;AA6BrC,wBAAsB,MAAM,IAAI,OAAO,CAAC,SAAS,CAAC,CAwBjD;AAED,MAAM,MAAM,UAAU,GAAG,OAAO,CAC9B,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EACjC,IAAI,GAAG,SAAS,CACjB,CAAC,KAAK,CAAC,CAAA"}
\ No newline at end of file
diff --git a/src/dist/types/storage/cloudflare.d.ts b/src/dist/types/storage/cloudflare.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..994fa05d3f50ff8646bba1511eff4f398de37dce
--- /dev/null
+++ b/src/dist/types/storage/cloudflare.d.ts
@@ -0,0 +1,34 @@
+/**
+ * Configure OpenAuth to use [Cloudflare KV](https://developers.cloudflare.com/kv/) as a
+ * storage adapter.
+ *
+ * ```ts
+ * import { CloudflareStorage } from "@openauthjs/openauth/storage/cloudflare"
+ *
+ * const storage = CloudflareStorage({
+ *   namespace: "my-namespace"
+ * })
+ *
+ *
+ * export default issuer({
+ *   storage,
+ *   // ...
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import type { KVNamespace } from "@cloudflare/workers-types";
+import { StorageAdapter } from "./storage.js";
+/**
+ * Configure the Cloudflare KV store that's created.
+ */
+export interface CloudflareStorageOptions {
+    namespace: KVNamespace;
+}
+/**
+ * Creates a Cloudflare KV store.
+ * @param options - The config for the adapter.
+ */
+export declare function CloudflareStorage(options: CloudflareStorageOptions): StorageAdapter;
+//# sourceMappingURL=cloudflare.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/storage/cloudflare.d.ts.map b/src/dist/types/storage/cloudflare.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..6a9410222ebcda7da03fecbf8e30e1087a884b5b
--- /dev/null
+++ b/src/dist/types/storage/cloudflare.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"cloudflare.d.ts","sourceRoot":"","sources":["../../../src/storage/cloudflare.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;GAmBG;AACH,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAA;AAC5D,OAAO,EAAqB,cAAc,EAAE,MAAM,cAAc,CAAA;AAEhE;;GAEG;AACH,MAAM,WAAW,wBAAwB;IACvC,SAAS,EAAE,WAAW,CAAA;CACvB;AACD;;;GAGG;AACH,wBAAgB,iBAAiB,CAC/B,OAAO,EAAE,wBAAwB,GAChC,cAAc,CAyChB"}
\ No newline at end of file
diff --git a/src/dist/types/storage/dynamo.d.ts b/src/dist/types/storage/dynamo.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..24fa52bd3cdd4cc07a304c004bd5e5982fe32847
--- /dev/null
+++ b/src/dist/types/storage/dynamo.d.ts
@@ -0,0 +1,65 @@
+/**
+ * Configure OpenAuth to use [DynamoDB](https://aws.amazon.com/dynamodb/) as a storage adapter.
+ *
+ * ```ts
+ * import { DynamoStorage } from "@openauthjs/openauth/storage/dynamo"
+ *
+ * const storage = DynamoStorage({
+ *   table: "my-table",
+ *   pk: "pk",
+ *   sk: "sk"
+ * })
+ *
+ * export default issuer({
+ *   storage,
+ *   // ...
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { StorageAdapter } from "./storage.js";
+/**
+ * Configure the DynamoDB table that's created.
+ *
+ * @example
+ * ```ts
+ * {
+ *   table: "my-table",
+ *   pk: "pk",
+ *   sk: "sk"
+ * }
+ * ```
+ */
+export interface DynamoStorageOptions {
+    /**
+     * The name of the DynamoDB table.
+     */
+    table: string;
+    /**
+     * The primary key column name.
+     * @default "pk"
+     */
+    pk?: string;
+    /**
+     * The sort key column name.
+     * @default "sk"
+     */
+    sk?: string;
+    /**
+     * Endpoint URL for the DynamoDB service. Useful for local testing.
+     * @default "https://dynamodb.{region}.amazonaws.com"
+     */
+    endpoint?: string;
+    /**
+     * The name of the time to live attribute.
+     * @default "expiry"
+     */
+    ttl?: string;
+}
+/**
+ * Creates a DynamoDB store.
+ * @param options - The config for the adapter.
+ */
+export declare function DynamoStorage(options: DynamoStorageOptions): StorageAdapter;
+//# sourceMappingURL=dynamo.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/storage/dynamo.d.ts.map b/src/dist/types/storage/dynamo.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..2f31dfd45a0553e83620c44b71f4575fa29a0e2a
--- /dev/null
+++ b/src/dist/types/storage/dynamo.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"dynamo.d.ts","sourceRoot":"","sources":["../../../src/storage/dynamo.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;GAmBG;AAGH,OAAO,EAAW,cAAc,EAAE,MAAM,cAAc,CAAA;AAEtD;;;;;;;;;;;GAWG;AACH,MAAM,WAAW,oBAAoB;IACnC;;OAEG;IACH,KAAK,EAAE,MAAM,CAAA;IACb;;;OAGG;IACH,EAAE,CAAC,EAAE,MAAM,CAAA;IACX;;;OAGG;IACH,EAAE,CAAC,EAAE,MAAM,CAAA;IACX;;;OAGG;IACH,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB;;;OAGG;IACH,GAAG,CAAC,EAAE,MAAM,CAAA;CACb;AAED;;;GAGG;AACH,wBAAgB,aAAa,CAAC,OAAO,EAAE,oBAAoB,GAAG,cAAc,CA6H3E"}
\ No newline at end of file
diff --git a/src/dist/types/storage/memory.d.ts b/src/dist/types/storage/memory.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..195c67bea440a0661d91d25297bff93492363364
--- /dev/null
+++ b/src/dist/types/storage/memory.d.ts
@@ -0,0 +1,49 @@
+/**
+ * Configure OpenAuth to use a simple in-memory store.
+ *
+ * :::caution
+ * This is not meant to be used in production.
+ * :::
+ *
+ * This is useful for testing and development. It's not meant to be used in production.
+ *
+ * ```ts
+ * import { MemoryStorage } from "@openauthjs/openauth/storage/memory"
+ *
+ * const storage = MemoryStorage()
+ *
+ * export default issuer({
+ *   storage,
+ *   // ...
+ * })
+ * ```
+ *
+ * Optionally, you can persist the store to a file.
+ *
+ * ```ts
+ * MemoryStorage({
+ *   persist: "./persist.json"
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+import { StorageAdapter } from "./storage.js";
+/**
+ * Configure the memory store.
+ */
+export interface MemoryStorageOptions {
+    /**
+     * Optionally, backup the store to a file. So it'll be persisted when the issuer restarts.
+     *
+     * @example
+     * ```ts
+     * {
+     *   persist: "./persist.json"
+     * }
+     * ```
+     */
+    persist?: string;
+}
+export declare function MemoryStorage(input?: MemoryStorageOptions): StorageAdapter;
+//# sourceMappingURL=memory.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/storage/memory.d.ts.map b/src/dist/types/storage/memory.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..8e31c3eaa8464923d83fc45c6f8bed888b1f60b3
--- /dev/null
+++ b/src/dist/types/storage/memory.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"memory.d.ts","sourceRoot":"","sources":["../../../src/storage/memory.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,OAAO,EAAqB,cAAc,EAAE,MAAM,cAAc,CAAA;AAIhE;;GAEG;AACH,MAAM,WAAW,oBAAoB;IACnC;;;;;;;;;OASG;IACH,OAAO,CAAC,EAAE,MAAM,CAAA;CACjB;AACD,wBAAgB,aAAa,CAAC,KAAK,CAAC,EAAE,oBAAoB,GAAG,cAAc,CAoF1E"}
\ No newline at end of file
diff --git a/src/dist/types/storage/storage.d.ts b/src/dist/types/storage/storage.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6dfc5e2de18093fa6e8bfd5147034f6ff3df3784
--- /dev/null
+++ b/src/dist/types/storage/storage.d.ts
@@ -0,0 +1,15 @@
+export interface StorageAdapter {
+    get(key: string[]): Promise<Record<string, any> | undefined>;
+    remove(key: string[]): Promise<void>;
+    set(key: string[], value: any, expiry?: Date): Promise<void>;
+    scan(prefix: string[]): AsyncIterable<[string[], any]>;
+}
+export declare function joinKey(key: string[]): string;
+export declare function splitKey(key: string): string[];
+export declare namespace Storage {
+    function get<T>(adapter: StorageAdapter, key: string[]): Promise<T | null>;
+    function set(adapter: StorageAdapter, key: string[], value: any, ttl?: number): Promise<void>;
+    function remove(adapter: StorageAdapter, key: string[]): Promise<void>;
+    function scan<T>(adapter: StorageAdapter, key: string[]): AsyncIterable<[string[], T]>;
+}
+//# sourceMappingURL=storage.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/storage/storage.d.ts.map b/src/dist/types/storage/storage.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..10b7a2c7ea6f5907bc68d6e7c409c9b314e850d2
--- /dev/null
+++ b/src/dist/types/storage/storage.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"storage.d.ts","sourceRoot":"","sources":["../../../src/storage/storage.ts"],"names":[],"mappings":"AAAA,MAAM,WAAW,cAAc;IAC7B,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,SAAS,CAAC,CAAA;IAC5D,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;IACpC,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;IAC5D,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,aAAa,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,CAAA;CACvD;AAID,wBAAgB,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,UAEpC;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,MAAM,YAEnC;AAED,yBAAiB,OAAO,CAAC;IAIvB,SAAgB,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,EAAE,MAAM,EAAE,GACxB,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CACrD;IAED,SAAgB,GAAG,CACjB,OAAO,EAAE,cAAc,EACvB,GAAG,EAAE,MAAM,EAAE,EACb,KAAK,EAAE,GAAG,EACV,GAAG,CAAC,EAAE,MAAM,iBAIb;IAED,SAAgB,MAAM,CAAC,OAAO,EAAE,cAAc,EAAE,GAAG,EAAE,MAAM,EAAE,iBAE5D;IAED,SAAgB,IAAI,CAAC,CAAC,EACpB,OAAO,EAAE,cAAc,EACvB,GAAG,EAAE,MAAM,EAAE,GACZ,aAAa,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAE9B;CACF"}
\ No newline at end of file
diff --git a/src/dist/types/subject.d.ts b/src/dist/types/subject.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..96eb1c6c97c108e0b284790403cff6dd18062db5
--- /dev/null
+++ b/src/dist/types/subject.d.ts
@@ -0,0 +1,122 @@
+/**
+ * Subjects are what the access token generated at the end of the auth flow will map to. Under
+ * the hood, the access token is a JWT that contains this data.
+ *
+ * #### Define subjects
+ *
+ * ```ts title="subjects.ts"
+ * import { object, string } from "valibot"
+ *
+ * const subjects = createSubjects({
+ *   user: object({
+ *     userID: string()
+ *   })
+ * })
+ * ```
+ *
+ * We are using [valibot](https://github.com/fabian-hiller/valibot) here. You can use any
+ * validation library that's following the
+ * [standard-schema specification](https://github.com/standard-schema/standard-schema).
+ *
+ * :::tip
+ * You typically want to place subjects in its own file so it can be imported by all of your apps.
+ * :::
+ *
+ * You can start with one subject. Later you can add more for different types of users.
+ *
+ * #### Set the subjects
+ *
+ * Then you can pass it to the `issuer`.
+ *
+ * ```ts title="issuer.ts"
+ * import { subjects } from "./subjects"
+ *
+ * const app = issuer({
+ *   providers: { ... },
+ *   subjects,
+ *   // ...
+ * })
+ * ```
+ *
+ * #### Add the subject payload
+ *
+ * When your user completes the flow, you can add the subject payload in the `success` callback.
+ *
+ * ```ts title="issuer.ts"
+ * const app = issuer({
+ *   providers: { ... },
+ *   subjects,
+ *   async success(ctx, value) {
+ *     let userID
+ *     if (value.provider === "password") {
+ *       console.log(value.email)
+ *       userID = ... // lookup user or create them
+ *     }
+ *     return ctx.subject("user", {
+ *       userID
+ *     })
+ *   },
+ *   // ...
+ * })
+ * ```
+ *
+ * Here we are looking up the userID from our database and adding it to the subject payload.
+ *
+ * :::caution
+ * You should only store properties that won't change for the lifetime of the user.
+ * :::
+ *
+ * Since these will be stored in the access token, you should avoid storing information
+ * that'll change often. For example, if you store the user's username, you'll need to
+ * revoke the access token when the user changes their username.
+ *
+ * #### Decode the subject
+ *
+ * Now when your user logs in, you can use the OpenAuth client to decode the subject. For
+ * example, in our SSR app we can do the following.
+ *
+ * ```ts title="app/page.tsx"
+ * import { subjects } from "../subjects"
+ *
+ * const verified = await client.verify(subjects, cookies.get("access_token")!)
+ * console.log(verified.subject.properties.userID)
+ * ```
+ *
+ * All this is typesafe based on the shape of the subjects you defined.
+ *
+ * @packageDocumentation
+ */
+import type { v1 } from "@standard-schema/spec";
+import { Prettify } from "./util.js";
+/**
+ * Subject schema is a map of types that are used to define the subjects.
+ */
+export type SubjectSchema = Record<string, v1.StandardSchema>;
+/** @internal */
+export type SubjectPayload<T extends SubjectSchema> = Prettify<{
+    [type in keyof T & string]: {
+        type: type;
+        properties: v1.InferOutput<T[type]>;
+    };
+}[keyof T & string]>;
+/**
+ * Create a subject schema.
+ *
+ * @example
+ * ```ts
+ * const subjects = createSubjects({
+ *   user: object({
+ *     userID: string()
+ *   }),
+ *   admin: object({
+ *     workspaceID: string()
+ *   })
+ * })
+ * ```
+ *
+ * This is using [valibot](https://github.com/fabian-hiller/valibot) to define the shape of the
+ * subjects. You can use any validation library that's following the
+ * [standard-schema specification](https://github.com/standard-schema/standard-schema).
+ */
+export declare function createSubjects<Schema extends SubjectSchema = {}>(types: Schema): Schema;
+//# sourceMappingURL=subject.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/subject.d.ts.map b/src/dist/types/subject.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..d12b1732331f9257e20aeada106cc61ce0d269c0
--- /dev/null
+++ b/src/dist/types/subject.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"subject.d.ts","sourceRoot":"","sources":["../../src/subject.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuFG;AACH,OAAO,KAAK,EAAE,EAAE,EAAE,MAAM,uBAAuB,CAAA;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAA;AAEpC;;GAEG;AACH,MAAM,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,cAAc,CAAC,CAAA;AAE7D,gBAAgB;AAChB,MAAM,MAAM,cAAc,CAAC,CAAC,SAAS,aAAa,IAAI,QAAQ,CAC5D;KACG,IAAI,IAAI,MAAM,CAAC,GAAG,MAAM,GAAG;QAC1B,IAAI,EAAE,IAAI,CAAA;QACV,UAAU,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;KACpC;CACF,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CACpB,CAAA;AAED;;;;;;;;;;;;;;;;;;GAkBG;AACH,wBAAgB,cAAc,CAAC,MAAM,SAAS,aAAa,GAAG,EAAE,EAC9D,KAAK,EAAE,MAAM,GACZ,MAAM,CAER"}
\ No newline at end of file
diff --git a/src/dist/types/ui/base.d.ts b/src/dist/types/ui/base.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..af251d80438e4679488afae4a4f4373bb0a35a92
--- /dev/null
+++ b/src/dist/types/ui/base.d.ts
@@ -0,0 +1,5 @@
+import { PropsWithChildren } from "hono/jsx";
+export declare function Layout(props: PropsWithChildren<{
+    size?: "small";
+}>): import("hono/jsx/jsx-dev-runtime").JSX.Element;
+//# sourceMappingURL=base.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/ui/base.d.ts.map b/src/dist/types/ui/base.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..72abfadc65a608cfc3bd6ffb9ea18446dabc0a4e
--- /dev/null
+++ b/src/dist/types/ui/base.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"base.d.ts","sourceRoot":"","sources":["../../../src/ui/base.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAA;AAI5C,wBAAgB,MAAM,CACpB,KAAK,EAAE,iBAAiB,CAAC;IACvB,IAAI,CAAC,EAAE,OAAO,CAAA;CACf,CAAC,kDA8FH"}
\ No newline at end of file
diff --git a/src/dist/types/ui/code.d.ts b/src/dist/types/ui/code.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..0f2deb2692b989acaeb0514b95ddc4655d77a82c
--- /dev/null
+++ b/src/dist/types/ui/code.d.ts
@@ -0,0 +1,104 @@
+/**
+ * Configure the UI that's used by the Code provider.
+ *
+ * ```ts {1,7-12}
+ * import { CodeUI } from "@openauthjs/openauth/ui/code"
+ * import { CodeProvider } from "@openauthjs/openauth/provider/code"
+ *
+ * export default issuer({
+ *   providers: {
+ *     code: CodeAdapter(
+ *       CodeUI({
+ *         copy: {
+ *           code_info: "We'll send a pin code to your email"
+ *         },
+ *         sendCode: (claims, code) => console.log(claims.email, code)
+ *       })
+ *     )
+ *   },
+ *   // ...
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+/** @jsxImportSource hono/jsx */
+import { CodeProviderOptions } from "../provider/code.js";
+declare const DEFAULT_COPY: {
+    /**
+     * Copy for the email input.
+     */
+    email_placeholder: string;
+    /**
+     * Error message when the email is invalid.
+     */
+    email_invalid: string;
+    /**
+     * Copy for the continue button.
+     */
+    button_continue: string;
+    /**
+     * Copy informing that the pin code will be emailed.
+     */
+    code_info: string;
+    /**
+     * Copy for the pin code input.
+     */
+    code_placeholder: string;
+    /**
+     * Error message when the code is invalid.
+     */
+    code_invalid: string;
+    /**
+     * Copy for when the code was sent.
+     */
+    code_sent: string;
+    /**
+     * Copy for when the code was resent.
+     */
+    code_resent: string;
+    /**
+     * Copy for the link to resend the code.
+     */
+    code_didnt_get: string;
+    /**
+     * Copy for the resend button.
+     */
+    code_resend: string;
+};
+export type CodeUICopy = typeof DEFAULT_COPY;
+/**
+ * Configure the password UI.
+ */
+export interface CodeUIOptions {
+    /**
+     * Callback to send the pin code to the user.
+     *
+     * The `claims` object contains the email or phone number of the user. You can send the code
+     * using this.
+     *
+     * @example
+     * ```ts
+     * async (claims, code) => {
+     *   // Send the code via the claim
+     * }
+     * ```
+     */
+    sendCode: (claims: Record<string, string>, code: string) => Promise<void>;
+    /**
+     * Custom copy for the UI.
+     */
+    copy?: Partial<CodeUICopy>;
+    /**
+     * The mode to use for the input.
+     * @default "email"
+     */
+    mode?: "email" | "phone";
+}
+/**
+ * Creates a UI for the Code provider flow.
+ * @param props - Configure the UI.
+ */
+export declare function CodeUI(props: CodeUIOptions): CodeProviderOptions;
+export {};
+//# sourceMappingURL=code.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/ui/code.d.ts.map b/src/dist/types/ui/code.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..02e0091f39091adb28ae110a2a57815a192e8f43
--- /dev/null
+++ b/src/dist/types/ui/code.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"code.d.ts","sourceRoot":"","sources":["../../../src/ui/code.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,gCAAgC;AAEhC,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAA;AAKzD,QAAA,MAAM,YAAY;IAChB;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;CAEJ,CAAA;AAED,MAAM,MAAM,UAAU,GAAG,OAAO,YAAY,CAAA;AAE5C;;GAEG;AACH,MAAM,WAAW,aAAa;IAC5B;;;;;;;;;;;;OAYG;IACH,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA;IACzE;;OAEG;IACH,IAAI,CAAC,EAAE,OAAO,CAAC,UAAU,CAAC,CAAA;IAC1B;;;OAGG;IACH,IAAI,CAAC,EAAE,OAAO,GAAG,OAAO,CAAA;CACzB;AAED;;;GAGG;AACH,wBAAgB,MAAM,CAAC,KAAK,EAAE,aAAa,GAAG,mBAAmB,CAsGhE"}
\ No newline at end of file
diff --git a/src/dist/types/ui/form.d.ts b/src/dist/types/ui/form.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..81ef9f0c8e89fd8d7497168c6b0042d465bf495d
--- /dev/null
+++ b/src/dist/types/ui/form.d.ts
@@ -0,0 +1,6 @@
+/** @jsxImportSource hono/jsx */
+export declare function FormAlert(props: {
+    message?: string;
+    color?: "danger" | "success";
+}): import("hono/jsx/jsx-dev-runtime").JSX.Element;
+//# sourceMappingURL=form.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/ui/form.d.ts.map b/src/dist/types/ui/form.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b28296df0e1877e7b220008324398f48c667c371
--- /dev/null
+++ b/src/dist/types/ui/form.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"form.d.ts","sourceRoot":"","sources":["../../../src/ui/form.tsx"],"names":[],"mappings":"AAAA,gCAAgC;AAEhC,wBAAgB,SAAS,CAAC,KAAK,EAAE;IAC/B,OAAO,CAAC,EAAE,MAAM,CAAA;IAChB,KAAK,CAAC,EAAE,QAAQ,GAAG,SAAS,CAAA;CAC7B,kDAkCA"}
\ No newline at end of file
diff --git a/src/dist/types/ui/icon.d.ts b/src/dist/types/ui/icon.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..14fe2717ffc71221a71541062c135e403cc1283b
--- /dev/null
+++ b/src/dist/types/ui/icon.d.ts
@@ -0,0 +1,6 @@
+/** @jsxImportSource hono/jsx */
+export declare const ICON_GITHUB: import("hono/jsx/jsx-dev-runtime").JSX.Element;
+export declare const ICON_GOOGLE: import("hono/jsx/jsx-dev-runtime").JSX.Element;
+export declare const ICON_EMAIL: import("hono/jsx/jsx-dev-runtime").JSX.Element;
+export declare const ICON_SLACK: import("hono/jsx/jsx-dev-runtime").JSX.Element;
+//# sourceMappingURL=icon.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/ui/icon.d.ts.map b/src/dist/types/ui/icon.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..2795a64ad3b2171e02f1e082028aa78260c3a1d7
--- /dev/null
+++ b/src/dist/types/ui/icon.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"icon.d.ts","sourceRoot":"","sources":["../../../src/ui/icon.tsx"],"names":[],"mappings":"AAAA,gCAAgC;AAEhC,eAAO,MAAM,WAAW,gDAWvB,CAAA;AAED,eAAO,MAAM,WAAW,gDAyBvB,CAAA;AAED,eAAO,MAAM,UAAU,gDAetB,CAAA;AAED,eAAO,MAAM,UAAU,gDAmCtB,CAAA"}
\ No newline at end of file
diff --git a/src/dist/types/ui/password.d.ts b/src/dist/types/ui/password.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6ef6bea9b597876198ec147a79d655919d033031
--- /dev/null
+++ b/src/dist/types/ui/password.d.ts
@@ -0,0 +1,139 @@
+/**
+ * Configure the UI that's used by the Password provider.
+ *
+ * ```ts {1,7-12}
+ * import { PasswordUI } from "@openauthjs/openauth/ui/password"
+ * import { PasswordProvider } from "@openauthjs/openauth/provider/password"
+ *
+ * export default issuer({
+ *   providers: {
+ *     password: PasswordAdapter(
+ *       PasswordUI({
+ *         copy: {
+ *           error_email_taken: "This email is already taken."
+ *         },
+ *         sendCode: (email, code) => console.log(email, code)
+ *       })
+ *     )
+ *   },
+ *   // ...
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+/** @jsxImportSource hono/jsx */
+import { PasswordConfig } from "../provider/password.js";
+import "./form.js";
+declare const DEFAULT_COPY: {
+    /**
+     * Error message when email is already taken.
+     */
+    error_email_taken: string;
+    /**
+     * Error message when the confirmation code is incorrect.
+     */
+    error_invalid_code: string;
+    /**
+     * Error message when the email is invalid.
+     */
+    error_invalid_email: string;
+    /**
+     * Error message when the password is incorrect.
+     */
+    error_invalid_password: string;
+    /**
+     * Error message when the passwords do not match.
+     */
+    error_password_mismatch: string;
+    /**
+     * Error message when the user enters a password that fails validation.
+     */
+    error_validation_error: string;
+    /**
+     * Title of the register page.
+     */
+    register_title: string;
+    /**
+     * Description of the register page.
+     */
+    register_description: string;
+    /**
+     * Title of the login page.
+     */
+    login_title: string;
+    /**
+     * Description of the login page.
+     */
+    login_description: string;
+    /**
+     * Copy for the register button.
+     */
+    register: string;
+    /**
+     * Copy for the register link.
+     */
+    register_prompt: string;
+    /**
+     * Copy for the login link.
+     */
+    login_prompt: string;
+    /**
+     * Copy for the login button.
+     */
+    login: string;
+    /**
+     * Copy for the forgot password link.
+     */
+    change_prompt: string;
+    /**
+     * Copy for the resend code button.
+     */
+    code_resend: string;
+    /**
+     * Copy for the "Back to" link.
+     */
+    code_return: string;
+    /**
+     * Copy for the logo.
+     * @internal
+     */
+    logo: string;
+    /**
+     * Copy for the email input.
+     */
+    input_email: string;
+    /**
+     * Copy for the password input.
+     */
+    input_password: string;
+    /**
+     * Copy for the code input.
+     */
+    input_code: string;
+    /**
+     * Copy for the repeat password input.
+     */
+    input_repeat: string;
+    /**
+     * Copy for the continue button.
+     */
+    button_continue: string;
+};
+type PasswordUICopy = typeof DEFAULT_COPY;
+/**
+ * Configure the password UI.
+ */
+export interface PasswordUIOptions extends Pick<PasswordConfig, "sendCode" | "validatePassword"> {
+    /**
+     * Custom copy for the UI.
+     */
+    copy?: Partial<PasswordUICopy>;
+}
+/**
+ * Creates a UI for the Password provider flow.
+ * @param input - Configure the UI.
+ */
+export declare function PasswordUI(input: PasswordUIOptions): PasswordConfig;
+export {};
+//# sourceMappingURL=password.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/ui/password.d.ts.map b/src/dist/types/ui/password.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..e8a44fce3c0a91ab1326d3d1c8888e0704c1e601
--- /dev/null
+++ b/src/dist/types/ui/password.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"password.d.ts","sourceRoot":"","sources":["../../../src/ui/password.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,gCAAgC;AAEhC,OAAO,EAEL,cAAc,EAGf,MAAM,yBAAyB,CAAA;AAEhC,OAAO,WAAW,CAAA;AAGlB,QAAA,MAAM,YAAY;IAChB;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;;OAGG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;CAOqB,CAAA;AAE1B,KAAK,cAAc,GAAG,OAAO,YAAY,CAAA;AAEzC;;GAEG;AACH,MAAM,WAAW,iBACf,SAAQ,IAAI,CAAC,cAAc,EAAE,UAAU,GAAG,kBAAkB,CAAC;IAC7D;;OAEG;IACH,IAAI,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,CAAA;CAC/B;AAED;;;GAGG;AACH,wBAAgB,UAAU,CAAC,KAAK,EAAE,iBAAiB,GAAG,cAAc,CAwPnE"}
\ No newline at end of file
diff --git a/src/dist/types/ui/select.d.ts b/src/dist/types/ui/select.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b3080f05916ae7fc35a635cb14eed5d842d7a8ea
--- /dev/null
+++ b/src/dist/types/ui/select.d.ts
@@ -0,0 +1,55 @@
+/**
+ * The UI that's displayed when loading the root page of the OpenAuth server. You can configure
+ * which providers should be displayed in the select UI.
+ *
+ * ```ts
+ * import { Select } from "@openauthjs/openauth/ui/select"
+ *
+ * export default issuer({
+ *   select: Select({
+ *     providers: {
+ *       github: {
+ *         hide: true
+ *       },
+ *       google: {
+ *         display: "Google"
+ *       }
+ *     }
+ *   })
+ *   // ...
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+/** @jsxImportSource hono/jsx */
+export interface SelectProps {
+    /**
+     * An object with all the providers and their config; where the key is the provider name.
+     *
+     * @example
+     * ```ts
+     * {
+     *   github: {
+     *     hide: true
+     *   },
+     *   google: {
+     *     display: "Google"
+     *   }
+     * }
+     * ```
+     */
+    providers?: Record<string, {
+        /**
+         * Whether to hide the provider from the select UI.
+         * @default false
+         */
+        hide?: boolean;
+        /**
+         * The display name of the provider.
+         */
+        display?: string;
+    }>;
+}
+export declare function Select(props?: SelectProps): (providers: Record<string, string>, _req: Request) => Promise<Response>;
+//# sourceMappingURL=select.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/ui/select.d.ts.map b/src/dist/types/ui/select.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..a742fd84960aa7c4dc844665e03b2e9c932c456b
--- /dev/null
+++ b/src/dist/types/ui/select.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"select.d.ts","sourceRoot":"","sources":["../../../src/ui/select.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,gCAAgC;AAMhC,MAAM,WAAW,WAAW;IAC1B;;;;;;;;;;;;;;OAcG;IACH,SAAS,CAAC,EAAE,MAAM,CAChB,MAAM,EACN;QACE;;;WAGG;QACH,IAAI,CAAC,EAAE,OAAO,CAAA;QACd;;WAEG;QACH,OAAO,CAAC,EAAE,MAAM,CAAA;KACjB,CACF,CAAA;CACF;AAED,wBAAgB,MAAM,CAAC,KAAK,CAAC,EAAE,WAAW,eAE3B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,QAC3B,OAAO,KACZ,OAAO,CAAC,QAAQ,CAAC,CA6BrB"}
\ No newline at end of file
diff --git a/src/dist/types/ui/theme.d.ts b/src/dist/types/ui/theme.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4d649539dfa2181be97e61a11b4b928d257d60d4
--- /dev/null
+++ b/src/dist/types/ui/theme.d.ts
@@ -0,0 +1,207 @@
+/**
+ * Use one of the built-in themes.
+ *
+ * @example
+ *
+ * ```ts
+ * import { THEME_SST } from "@openauthjs/openauth/ui/theme"
+ *
+ * export default issuer({
+ *   theme: THEME_SST,
+ *   // ...
+ * })
+ * ```
+ *
+ * Or define your own.
+ *
+ * ```ts
+ * import type { Theme } from "@openauthjs/openauth/ui/theme"
+ *
+ * const MY_THEME: Theme = {
+ *   title: "Acne",
+ *   radius: "none",
+ *   favicon: "https://www.example.com/favicon.svg",
+ *   // ...
+ * }
+ *
+ * export default issuer({
+ *   theme: MY_THEME,
+ *   // ...
+ * })
+ * ```
+ *
+ * @packageDocumentation
+ */
+/**
+ * A type to define values for light and dark mode.
+ *
+ * @example
+ * ```ts
+ * {
+ *   light: "#FFF",
+ *   dark: "#000"
+ * }
+ * ```
+ */
+export interface ColorScheme {
+    /**
+     * The value for dark mode.
+     */
+    dark: string;
+    /**
+     * The value for light mode.
+     */
+    light: string;
+}
+/**
+ * A type to define your custom theme.
+ */
+export interface Theme {
+    /**
+     * The name of your app. Also used as the title of the page.
+     *
+     * @example
+     * ```ts
+     * {
+     *   title: "Acne"
+     * }
+     * ```
+     */
+    title?: string;
+    /**
+     * A URL to the favicon of your app.
+     *
+     * @example
+     * ```ts
+     * {
+     *   favicon: "https://www.example.com/favicon.svg"
+     * }
+     * ```
+     */
+    favicon?: string;
+    /**
+     * The border radius of the UI elements.
+     *
+     * @example
+     * ```ts
+     * {
+     *   radius: "none"
+     * }
+     * ```
+     */
+    radius?: "none" | "sm" | "md" | "lg" | "full";
+    /**
+     * The primary color of the theme.
+     *
+     * Takes a color or both light and dark colors.
+     *
+     * @example
+     * ```ts
+     * {
+     *   primary: "#FF5E00"
+     * }
+     * ```
+     */
+    primary: string | ColorScheme;
+    /**
+     * The background color of the theme.
+     *
+     * Takes a color or both light and dark colors.
+     *
+     * @example
+     * ```ts
+     * {
+     *   background: "#FFF"
+     * }
+     * ```
+     */
+    background?: string | ColorScheme;
+    /**
+     * A URL to the logo of your app.
+     *
+     * Takes a single image or both light and dark mode versions.
+     *
+     * @example
+     * ```ts
+     * {
+     *   logo: "https://www.example.com/logo.svg"
+     * }
+     * ```
+     */
+    logo?: string | ColorScheme;
+    /**
+     * The font family and scale of the theme.
+     */
+    font?: {
+        /**
+         * The font family of the theme.
+         *
+         * @example
+         * ```ts
+         * {
+         *   font: {
+         *     family: "Geist Mono, monospace"
+         *   }
+         * }
+         * ```
+         */
+        family?: string;
+        /**
+         * The font scale of the theme. Can be used to increase or decrease the font sizes across
+         * the UI.
+         *
+         * @default "1"
+         * @example
+         * ```ts
+         * {
+         *   font: {
+         *     scale: "1.25"
+         *   }
+         * }
+         * ```
+         */
+        scale?: string;
+    };
+    /**
+     * Custom CSS that's added to the page in a `<style>` tag.
+     *
+     * This can be used to import custom fonts.
+     *
+     * @example
+     * ```ts
+     * {
+     *   css: `@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@100;200;300;400;500;600;700;800;900&display=swap');`
+     * }
+     * ```
+     */
+    css?: string;
+}
+/**
+ * Built-in default OpenAuth theme.
+ */
+export declare const THEME_OPENAUTH: Theme;
+/**
+ * Built-in theme based on [Terminal](https://terminal.shop).
+ */
+export declare const THEME_TERMINAL: Theme;
+/**
+ * Built-in theme based on [SST](https://sst.dev).
+ */
+export declare const THEME_SST: Theme;
+/**
+ * Built-in theme based on [Supabase](https://supabase.com).
+ */
+export declare const THEME_SUPABASE: Theme;
+/**
+ * Built-in theme based on [Vercel](https://vercel.com).
+ */
+export declare const THEME_VERCEL: Theme;
+/**
+ * @internal
+ */
+export declare function setTheme(value: Theme): void;
+/**
+ * @internal
+ */
+export declare function getTheme(): any;
+//# sourceMappingURL=theme.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/ui/theme.d.ts.map b/src/dist/types/ui/theme.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..73d5ddffa57a5ae8d90830036019d21480d70bdf
--- /dev/null
+++ b/src/dist/types/ui/theme.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"theme.d.ts","sourceRoot":"","sources":["../../../src/ui/theme.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AAEH;;;;;;;;;;GAUG;AACH,MAAM,WAAW,WAAW;IAC1B;;OAEG;IACH,IAAI,EAAE,MAAM,CAAA;IACZ;;OAEG;IACH,KAAK,EAAE,MAAM,CAAA;CACd;AAED;;GAEG;AACH,MAAM,WAAW,KAAK;IACpB;;;;;;;;;OASG;IACH,KAAK,CAAC,EAAE,MAAM,CAAA;IACd;;;;;;;;;OASG;IACH,OAAO,CAAC,EAAE,MAAM,CAAA;IAChB;;;;;;;;;OASG;IACH,MAAM,CAAC,EAAE,MAAM,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,MAAM,CAAA;IAC7C;;;;;;;;;;;OAWG;IACH,OAAO,EAAE,MAAM,GAAG,WAAW,CAAA;IAC7B;;;;;;;;;;;OAWG;IACH,UAAU,CAAC,EAAE,MAAM,GAAG,WAAW,CAAA;IACjC;;;;;;;;;;;OAWG;IACH,IAAI,CAAC,EAAE,MAAM,GAAG,WAAW,CAAA;IAC3B;;OAEG;IACH,IAAI,CAAC,EAAE;QACL;;;;;;;;;;;WAWG;QACH,MAAM,CAAC,EAAE,MAAM,CAAA;QACf;;;;;;;;;;;;;WAaG;QACH,KAAK,CAAC,EAAE,MAAM,CAAA;KACf,CAAA;IACD;;;;;;;;;;;OAWG;IACH,GAAG,CAAC,EAAE,MAAM,CAAA;CACb;AAED;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,KAiB5B,CAAA;AAED;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,KAmB5B,CAAA;AAED;;GAEG;AACH,eAAO,MAAM,SAAS,EAAE,KAkBvB,CAAA;AAED;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,KAqB5B,CAAA;AAED;;GAEG;AACH,eAAO,MAAM,YAAY,EAAE,KAqB1B,CAAA;AAID;;GAEG;AACH,wBAAgB,QAAQ,CAAC,KAAK,EAAE,KAAK,QAGpC;AAED;;GAEG;AACH,wBAAgB,QAAQ,QAGvB"}
\ No newline at end of file
diff --git a/src/dist/types/util.d.ts b/src/dist/types/util.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..dfda9de46f5546cea7df534e3b44a458010c7ea8
--- /dev/null
+++ b/src/dist/types/util.d.ts
@@ -0,0 +1,8 @@
+import type { Context } from "hono";
+export type Prettify<T> = {
+    [K in keyof T]: T[K];
+};
+export declare function getRelativeUrl(ctx: Context, path: string): string;
+export declare function isDomainMatch(a: string, b: string): boolean;
+export declare function lazy<T>(fn: () => T): () => T;
+//# sourceMappingURL=util.d.ts.map
\ No newline at end of file
diff --git a/src/dist/types/util.d.ts.map b/src/dist/types/util.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..f01369f5f2f412c2b3bc6a1c461910f7e21b72ee
--- /dev/null
+++ b/src/dist/types/util.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"util.d.ts","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,MAAM,CAAA;AAEnC,MAAM,MAAM,QAAQ,CAAC,CAAC,IAAI;KACvB,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;CACrB,CAAA;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,UAMxD;AAuBD,wBAAgB,aAAa,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,GAAG,OAAO,CAY3D;AAED,wBAAgB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC,CAQ5C"}
\ No newline at end of file
diff --git a/src/issuer.ts b/src/issuer.ts
index 119a99a278d3fe05cab32c8e326a29fc848f0f6b..827d12a729f6e9b561f42c4ddba878b955525831 100644
--- a/src/issuer.ts
+++ b/src/issuer.ts
@@ -130,6 +130,7 @@ import { Hono } from "hono/tiny"
 import { handle as awsHandle } from "hono/aws-lambda"
 import { Context } from "hono"
 import { deleteCookie, getCookie, setCookie } from "hono/cookie"
+import type { v1 } from "@standard-schema/spec"
 
 /**
  * Sets the subject payload in the JWT token and returns the response.
@@ -190,7 +191,7 @@ import {
   UnauthorizedClientError,
   UnknownStateError,
 } from "./error.js"
-import { compactDecrypt, CompactEncrypt, SignJWT } from "jose"
+import { compactDecrypt, CompactEncrypt, jwtVerify, SignJWT } from "jose"
 import { Storage, StorageAdapter } from "./storage/storage.js"
 import { encryptionKeys, legacySigningKeys, signingKeys } from "./keys.js"
 import { validatePKCE } from "./pkce.js"
@@ -200,11 +201,16 @@ import { getRelativeUrl, isDomainMatch, lazy } from "./util.js"
 import { DynamoStorage } from "./storage/dynamo.js"
 import { MemoryStorage } from "./storage/memory.js"
 import { cors } from "hono/cors"
-import { logger } from "hono/logger"
+import { createMiddleware } from "hono/factory"
 
 /** @internal */
 export const aws = awsHandle
 
+/**
+ * @internal
+ */
+export let basePath: string | undefined = undefined
+
 export interface IssuerInput<
   Providers extends Record<string, Provider<any>>,
   Subjects extends SubjectSchema,
@@ -216,6 +222,35 @@ export interface IssuerInput<
     >
   }[keyof Providers],
 > {
+  /**
+   * With `basePath`, OpenAuth can be mounted on any sub-path of a domain.
+   * This means OpenAuth can be nested in a larger app.
+   *
+   * :::caution
+   * The Well-Known endpoints still need to be at the root of the domain.
+   * You need to perform a proxy pass to the OpenAuth server for `/.well-known/oauth-authorization-server` and `/.well-known/jwks.json`.
+   *
+   * **Example:**<br/>
+   * If you mount OpenAuth at `/auth`, `/.well-known/oauth-authorization-server` and `/.well-known/jwks.json` need to be proxied to `/auth/.well-known/oauth-authorization-server` and `/auth/.well-known/jwks.json`.
+   * :::
+   *
+   * @example
+   * ```ts title="issuer.ts"
+   * issuer({
+   *   basePath: "/auth",
+   *   // ...
+   * })
+   * ```
+   *
+   * The base path needs to be reflected in the issuer url for the client:
+   * ```ts title="client.ts"
+   * const client = createClient({
+   *   issuer: "https://example.com/auth", // if OpenAuth is mounted at `/authpath`
+   *   clientID: "123",
+   * })
+   * ```
+   */
+  basePath?: string
   /**
    * The shape of the subjects that you want to return.
    *
@@ -451,6 +486,8 @@ export function issuer<
     >
   }[keyof Providers],
 >(input: IssuerInput<Providers, Subjects, Result>) {
+  basePath = input.basePath
+  basePath = basePath?.replace(/\/$/, "") // Remove trailing slash
   const error =
     input.error ??
     function (err) {
@@ -721,14 +758,42 @@ export function issuer<
   }
 
   function issuer(ctx: Context) {
-    return new URL(getRelativeUrl(ctx, "/")).origin
+    const host = new URL(getRelativeUrl(ctx, "/")).origin
+    if (!basePath) return host
+
+    const url = new URL(host)
+    url.pathname = basePath
+    return url.toString()
   }
 
   const app = new Hono<{
     Variables: {
       authorization: AuthorizationState
     }
-  }>().use(logger())
+  }>()
+
+  // Only edit local redirects if baseP
+  if (basePath) {
+    app.use(
+      createMiddleware(async (c, next) => {
+        await next()
+
+        if (basePath) {
+          // Normalize the basePath (remove leading/trailing slashes)
+          const bp = basePath.replace(/^\/+|\/+$/g, "")
+
+          // Check if the response is a redirect
+          const loc = c.res.headers.get("Location")
+          if (loc && loc.startsWith("/")) {
+            // Prepend /{bp} to the local location (ensure a leading slash)
+            const newLoc = `/${bp}${loc}`
+            c.res.headers.set("Location", newLoc)
+          }
+        }
+        return c.res
+      }),
+    )
+  }
 
   for (const [name, value] of Object.entries(input.providers)) {
     const route = new Hono<any>()
@@ -779,7 +844,7 @@ export function issuer<
         issuer: iss,
         authorization_endpoint: `${iss}/authorize`,
         token_endpoint: `${iss}/token`,
-        jwks_uri: `${iss}/.well-known/jwks.json`,
+        jwks_uri: new URL("/.well-known/jwks.json", iss).toString(),
         response_types_supported: ["code", "token"],
       })
     },
@@ -829,7 +894,6 @@ export function issuer<
             400,
           )
         }
-        await Storage.remove(storage, key)
         if (payload.redirectURI !== form.get("redirect_uri")) {
           return c.json(
             {
@@ -878,6 +942,7 @@ export function issuer<
           }
         }
         const tokens = await generateTokens(c, payload)
+        await Storage.remove(storage, key)
         return c.json({
           access_token: tokens.access,
           expires_in: tokens.expiresIn,
@@ -1078,6 +1143,63 @@ export function issuer<
     )
   })
 
+  app.get("/userinfo", async (c) => {
+    const header = c.req.header("Authorization")
+
+    if (!header) {
+      return c.json(
+        {
+          error: "invalid_request",
+          error_description: "Missing Authorization header",
+        },
+        400,
+      )
+    }
+
+    const [type, token] = header.split(" ")
+
+    if (type !== "Bearer") {
+      return c.json(
+        {
+          error: "invalid_request",
+          error_description: "Missing or invalid Authorization header",
+        },
+        400,
+      )
+    }
+
+    if (!token) {
+      return c.json(
+        {
+          error: "invalid_request",
+          error_description: "Missing token",
+        },
+        400,
+      )
+    }
+
+    const result = await jwtVerify<{
+      mode: "access"
+      type: keyof SubjectSchema
+      properties: v1.InferInput<SubjectSchema[keyof SubjectSchema]>
+    }>(token, () => signingKey().then((item) => item.public), {
+      issuer: issuer(c),
+    })
+
+    const validated = await input.subjects[result.payload.type][
+      "~standard"
+    ].validate(result.payload.properties)
+
+    if (!validated.issues && result.payload.mode === "access") {
+      return c.json(validated.value as SubjectSchema)
+    }
+
+    return c.json({
+      error: "invalid_token",
+      error_description: "Invalid token",
+    })
+  })
+
   app.onError(async (err, c) => {
     console.error(err)
     if (err instanceof UnknownStateError) {
diff --git a/src/provider/apple.ts b/src/provider/apple.ts
index 39388fc0bd484684b4fc49eea9021f1303bf4fe8..f69e252b3b850a565835ccebaeea36c62f7cae91 100644
--- a/src/provider/apple.ts
+++ b/src/provider/apple.ts
@@ -16,6 +16,24 @@
  * })
  * ```
  *
+ * #### Using OAuth with form_post response mode
+ *
+ * When requesting name or email scopes from Apple, you must use form_post response mode:
+ *
+ * ```ts {5-9}
+ * import { AppleProvider } from "@openauthjs/openauth/provider/apple"
+ *
+ * export default issuer({
+ *   providers: {
+ *     apple: AppleProvider({
+ *       clientID: "1234567890",
+ *       clientSecret: "0987654321",
+ *       responseMode: "form_post"
+ *     })
+ *   }
+ * })
+ * ```
+ *
  * #### Using OIDC
  *
  * ```ts {5-7}
@@ -36,7 +54,14 @@
 import { Oauth2Provider, Oauth2WrappedConfig } from "./oauth2.js"
 import { OidcProvider, OidcWrappedConfig } from "./oidc.js"
 
-export interface AppleConfig extends Oauth2WrappedConfig {}
+export interface AppleConfig extends Oauth2WrappedConfig {
+  /**
+   * The response mode to use for the authorization request.
+   * Apple requires 'form_post' response mode when requesting name or email scopes.
+   * @default "query"
+   */
+  responseMode?: "query" | "form_post"
+}
 export interface AppleOidcConfig extends OidcWrappedConfig {}
 
 /**
@@ -45,20 +70,38 @@ export interface AppleOidcConfig extends OidcWrappedConfig {}
  * @param config - The config for the provider.
  * @example
  * ```ts
+ * // Using default query response mode (GET callback)
  * AppleProvider({
  *   clientID: "1234567890",
  *   clientSecret: "0987654321"
  * })
+ *
+ * // Using form_post response mode (POST callback)
+ * // Required when requesting name or email scope
+ * AppleProvider({
+ *   clientID: "1234567890",
+ *   clientSecret: "0987654321",
+ *   responseMode: "form_post",
+ *   scopes: ["name", "email"]
+ * })
  * ```
  */
 export function AppleProvider(config: AppleConfig) {
+  const { responseMode, ...restConfig } = config
+  const additionalQuery =
+    responseMode === "form_post"
+      ? { response_mode: "form_post", ...config.query }
+      : config.query || {}
+
   return Oauth2Provider({
-    ...config,
+    ...restConfig,
     type: "apple" as const,
     endpoint: {
       authorization: "https://appleid.apple.com/auth/authorize",
       token: "https://appleid.apple.com/auth/token",
+      jwks: "https://appleid.apple.com/auth/keys",
     },
+    query: additionalQuery,
   })
 }
 
diff --git a/src/provider/google.ts b/src/provider/google.ts
index 006a47b9c2f8af20927ae4d84010b69b1fb41106..359a386a7cd45c9f3e8acffae1b69136cdc6f2c6 100644
--- a/src/provider/google.ts
+++ b/src/provider/google.ts
@@ -58,6 +58,7 @@ export function GoogleProvider(config: GoogleConfig) {
     endpoint: {
       authorization: "https://accounts.google.com/o/oauth2/v2/auth",
       token: "https://oauth2.googleapis.com/token",
+      jwks: "https://www.googleapis.com/oauth2/v3/certs",
     },
   })
 }
diff --git a/src/provider/linkedin.ts b/src/provider/linkedin.ts
new file mode 100644
index 0000000000000000000000000000000000000000..bfa8c7bc2ddec717cc1146c72f9132468486cc78
--- /dev/null
+++ b/src/provider/linkedin.ts
@@ -0,0 +1,12 @@
+import { Oauth2Provider, type Oauth2WrappedConfig } from "./oauth2.js"
+
+export function LinkedInAdapter(config: Oauth2WrappedConfig) {
+  return Oauth2Provider({
+    ...config,
+    type: "linkedin",
+    endpoint: {
+      authorization: "https://www.linkedin.com/oauth/v2/authorization",
+      token: "https://www.linkedin.com/oauth/v2/accessToken",
+    },
+  })
+}
diff --git a/src/provider/oauth2.ts b/src/provider/oauth2.ts
index 9cbcd6848a27b7a91041bb742923b86c02ad61b4..5a0f6583d65466a508ebbfbb07f5f5263c2c408e 100644
--- a/src/provider/oauth2.ts
+++ b/src/provider/oauth2.ts
@@ -22,6 +22,7 @@
  * @packageDocumentation
  */
 
+import { createRemoteJWKSet, jwtVerify } from "jose"
 import { OauthError } from "../error.js"
 import { generatePKCE } from "../pkce.js"
 import { getRelativeUrl } from "../util.js"
@@ -66,7 +67,8 @@ export interface Oauth2Config {
    * {
    *   endpoint: {
    *     authorization: "https://auth.myserver.com/authorize",
-   *     token: "https://auth.myserver.com/token"
+   *     token: "https://auth.myserver.com/token",
+   *     jwks: "https://auth.myserver.com/auth/keys"
    *   }
    * }
    * ```
@@ -80,6 +82,10 @@ export interface Oauth2Config {
      * The URL of the token endpoint.
      */
     token: string
+    /**
+     * The URL of the JWKS endpoint.
+     */
+    jwks?: string
   }
   /**
    * A list of OAuth scopes that you want to request.
@@ -125,6 +131,7 @@ export interface Oauth2Token {
   access: string
   refresh: string
   expiry: number
+  id?: Record<string, any>
   raw: Record<string, any>
 }
 
@@ -138,6 +145,76 @@ export function Oauth2Provider(
   config: Oauth2Config,
 ): Provider<{ tokenset: Oauth2Token; clientID: string }> {
   const query = config.query || {}
+
+  // Helper function to handle token exchange and response building
+  async function handleCallbackLogic(
+    c: any,
+    ctx: any,
+    provider: ProviderState,
+    code: string | undefined,
+  ) {
+    if (!provider || !code) {
+      return c.redirect(getRelativeUrl(c, "./authorize"))
+    }
+
+    const body = new URLSearchParams({
+      client_id: config.clientID,
+      client_secret: config.clientSecret,
+      code,
+      grant_type: "authorization_code",
+      redirect_uri: provider.redirect,
+      ...(provider.codeVerifier
+        ? { code_verifier: provider.codeVerifier }
+        : {}),
+    })
+
+    const json: any = await fetch(config.endpoint.token, {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-www-form-urlencoded",
+        Accept: "application/json",
+      },
+      body: body.toString(),
+    }).then((r) => r.json())
+
+    if ("error" in json) {
+      throw new OauthError(json.error, json.error_description)
+    }
+
+    let idTokenPayload: Record<string, any> | null = null
+    if (config.endpoint.jwks) {
+      const jwksEndpoint = new URL(config.endpoint.jwks)
+      // @ts-expect-error bun/node mismatch
+      const jwks = createRemoteJWKSet(jwksEndpoint)
+      const { payload } = await jwtVerify(json.id_token, jwks, {
+        audience: config.clientID,
+      })
+      idTokenPayload = payload
+    }
+
+    return ctx.success(c, {
+      clientID: config.clientID,
+      tokenset: {
+        get access() {
+          return json.access_token
+        },
+        get refresh() {
+          return json.refresh_token
+        },
+        get expiry() {
+          return json.expires_in
+        },
+        get id() {
+          if (!idTokenPayload) return null
+          return idTokenPayload
+        },
+        get raw() {
+          return json
+        },
+      },
+    })
+  }
+
   return {
     type: config.type || "oauth2",
     init(routes, ctx) {
@@ -173,50 +250,47 @@ export function Oauth2Provider(
         const code = c.req.query("code")
         const state = c.req.query("state")
         const error = c.req.query("error")
+
         if (error)
           throw new OauthError(
             error.toString() as any,
             c.req.query("error_description")?.toString() || "",
           )
-        if (!provider || !code || (provider.state && state !== provider.state))
+        if (
+          !provider ||
+          !code ||
+          (provider.state && state !== provider.state)
+        ) {
           return c.redirect(getRelativeUrl(c, "./authorize"))
-        const body = new URLSearchParams({
-          client_id: config.clientID,
-          client_secret: config.clientSecret,
-          code,
-          grant_type: "authorization_code",
-          redirect_uri: provider.redirect,
-          ...(provider.codeVerifier
-            ? { code_verifier: provider.codeVerifier }
-            : {}),
-        })
-        const json: any = await fetch(config.endpoint.token, {
-          method: "POST",
-          headers: {
-            "Content-Type": "application/x-www-form-urlencoded",
-            Accept: "application/json",
-          },
-          body: body.toString(),
-        }).then((r) => r.json())
-        if ("error" in json)
-          throw new OauthError(json.error, json.error_description)
-        return ctx.success(c, {
-          clientID: config.clientID,
-          tokenset: {
-            get access() {
-              return json.access_token
-            },
-            get refresh() {
-              return json.refresh_token
-            },
-            get expiry() {
-              return json.expires_in
-            },
-            get raw() {
-              return json
-            },
-          },
-        })
+        }
+
+        return handleCallbackLogic(c, ctx, provider, code)
+      })
+
+      routes.post("/callback", async (c) => {
+        const provider = (await ctx.get(c, "provider")) as ProviderState
+
+        // Handle form data from POST request
+        const formData = await c.req.formData()
+        const code = formData.get("code")?.toString()
+        const state = formData.get("state")?.toString()
+        const error = formData.get("error")?.toString()
+
+        if (error)
+          throw new OauthError(
+            error as any,
+            formData.get("error_description")?.toString() || "",
+          )
+
+        if (
+          !provider ||
+          !code ||
+          (provider.state && state !== provider.state)
+        ) {
+          return c.redirect(getRelativeUrl(c, "./authorize"))
+        }
+
+        return handleCallbackLogic(c, ctx, provider, code)
       })
     },
   }
diff --git a/src/storage/cloudflare.ts b/src/storage/cloudflare.ts
index 0c011e3d3322fcf95cc3db0b5870f64c188e27e5..8fb7bb27295a224c116e19386c465ac0e0b7b88b 100644
--- a/src/storage/cloudflare.ts
+++ b/src/storage/cloudflare.ts
@@ -44,7 +44,7 @@ export function CloudflareStorage(
     async set(key: string[], value: any, expiry?: Date) {
       await options.namespace.put(joinKey(key), JSON.stringify(value), {
         expirationTtl: expiry
-          ? Math.floor((expiry.getTime() - Date.now()) / 1000)
+          ? Math.max(Math.floor((expiry.getTime() - Date.now()) / 1000), 60)
           : undefined,
       })
     },
diff --git a/src/ui/icon.tsx b/src/ui/icon.tsx
index f5b0f10d65eed08b5dbce5ed6815b5d6cbc3a248..b8ef46fbfcb8c339fe5589bd20cf1caf7ed57ec9 100644
--- a/src/ui/icon.tsx
+++ b/src/ui/icon.tsx
@@ -1,26 +1,41 @@
 /** @jsxImportSource hono/jsx */
 
 export const ICON_GITHUB = (
-  <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
-    <path
-      d="M7.49933 0.25C3.49635 0.25 0.25 3.49593 0.25 7.50024C0.25 10.703 2.32715 13.4206 5.2081 14.3797C5.57084 14.446 5.70302 14.2222 5.70302 14.0299C5.70302 13.8576 5.69679 13.4019 5.69323 12.797C3.67661 13.235 3.25112 11.825 3.25112 11.825C2.92132 10.9874 2.44599 10.7644 2.44599 10.7644C1.78773 10.3149 2.49584 10.3238 2.49584 10.3238C3.22353 10.375 3.60629 11.0711 3.60629 11.0711C4.25298 12.1788 5.30335 11.8588 5.71638 11.6732C5.78225 11.205 5.96962 10.8854 6.17658 10.7043C4.56675 10.5209 2.87415 9.89918 2.87415 7.12104C2.87415 6.32925 3.15677 5.68257 3.62053 5.17563C3.54576 4.99226 3.29697 4.25521 3.69174 3.25691C3.69174 3.25691 4.30015 3.06196 5.68522 3.99973C6.26337 3.83906 6.8838 3.75895 7.50022 3.75583C8.1162 3.75895 8.73619 3.83906 9.31523 3.99973C10.6994 3.06196 11.3069 3.25691 11.3069 3.25691C11.7026 4.25521 11.4538 4.99226 11.3795 5.17563C11.8441 5.68257 12.1245 6.32925 12.1245 7.12104C12.1245 9.9063 10.4292 10.5192 8.81452 10.6985C9.07444 10.9224 9.30633 11.3648 9.30633 12.0413C9.30633 13.0102 9.29742 13.7922 9.29742 14.0299C9.29742 14.2239 9.42828 14.4496 9.79591 14.3788C12.6746 13.4179 14.75 10.7025 14.75 7.50024C14.75 3.49593 11.5036 0.25 7.49933 0.25Z"
-      fill="currentColor"
-      fill-rule="evenodd"
-      clip-rule="evenodd"
-    ></path>
+  <svg
+    viewBox="0 0 256 250"
+    width="256"
+    height="250"
+    fill="currentColor"
+    xmlns="http://www.w3.org/2000/svg"
+    preserveAspectRatio="xMidYMid"
+  >
+    <path d="M128.001 0C57.317 0 0 57.307 0 128.001c0 56.554 36.676 104.535 87.535 121.46 6.397 1.185 8.746-2.777 8.746-6.158 0-3.052-.12-13.135-.174-23.83-35.61 7.742-43.124-15.103-43.124-15.103-5.823-14.795-14.213-18.73-14.213-18.73-11.613-7.944.876-7.78.876-7.78 12.853.902 19.621 13.19 19.621 13.19 11.417 19.568 29.945 13.911 37.249 10.64 1.149-8.272 4.466-13.92 8.127-17.116-28.431-3.236-58.318-14.212-58.318-63.258 0-13.975 5-25.394 13.188-34.358-1.329-3.224-5.71-16.242 1.24-33.874 0 0 10.749-3.44 35.21 13.121 10.21-2.836 21.16-4.258 32.038-4.307 10.878.049 21.837 1.47 32.066 4.307 24.431-16.56 35.165-13.12 35.165-13.12 6.967 17.63 2.584 30.65 1.255 33.873 8.207 8.964 13.173 20.383 13.173 34.358 0 49.163-29.944 59.988-58.447 63.157 4.591 3.972 8.682 11.762 8.682 23.704 0 17.126-.148 30.91-.148 35.126 0 3.407 2.304 7.398 8.792 6.14C219.37 232.5 256 184.537 256 128.002 256 57.307 198.691 0 128.001 0Zm-80.06 182.34c-.282.636-1.283.827-2.194.39-.929-.417-1.45-1.284-1.15-1.922.276-.655 1.279-.838 2.205-.399.93.418 1.46 1.293 1.139 1.931Zm6.296 5.618c-.61.566-1.804.303-2.614-.591-.837-.892-.994-2.086-.375-2.66.63-.566 1.787-.301 2.626.591.838.903 1 2.088.363 2.66Zm4.32 7.188c-.785.545-2.067.034-2.86-1.104-.784-1.138-.784-2.503.017-3.05.795-.547 2.058-.055 2.861 1.075.782 1.157.782 2.522-.019 3.08Zm7.304 8.325c-.701.774-2.196.566-3.29-.49-1.119-1.032-1.43-2.496-.726-3.27.71-.776 2.213-.558 3.315.49 1.11 1.03 1.45 2.505.701 3.27Zm9.442 2.81c-.31 1.003-1.75 1.459-3.199 1.033-1.448-.439-2.395-1.613-2.103-2.626.301-1.01 1.747-1.484 3.207-1.028 1.446.436 2.396 1.602 2.095 2.622Zm10.744 1.193c.036 1.055-1.193 1.93-2.715 1.95-1.53.034-2.769-.82-2.786-1.86 0-1.065 1.202-1.932 2.733-1.958 1.522-.03 2.768.818 2.768 1.868Zm10.555-.405c.182 1.03-.875 2.088-2.387 2.37-1.485.271-2.861-.365-3.05-1.386-.184-1.056.893-2.114 2.376-2.387 1.514-.263 2.868.356 3.061 1.403Z" />
   </svg>
-).toString()
+)
 
 export const ICON_GOOGLE = (
   <svg
+    width="256"
+    height="262"
+    viewBox="0 0 256 262"
     xmlns="http://www.w3.org/2000/svg"
-    width="24"
-    height="24"
-    viewBox="0 0 24 24"
+    preserveAspectRatio="xMidYMid"
   >
     <path
-      fill="currentColor"
-      d="M11.99 13.9v-3.72h9.36c.14.63.25 1.22.25 2.05c0 5.71-3.83 9.77-9.6 9.77c-5.52 0-10-4.48-10-10S6.48 2 12 2c2.7 0 4.96.99 6.69 2.61l-2.84 2.76c-.72-.68-1.98-1.48-3.85-1.48c-3.31 0-6.01 2.75-6.01 6.12s2.7 6.12 6.01 6.12c3.83 0 5.24-2.65 5.5-4.22h-5.51z"
+      d="M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027"
+      fill="#4285F4"
+    />
+    <path
+      d="M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1"
+      fill="#34A853"
+    />
+    <path
+      d="M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782"
+      fill="#FBBC05"
+    />
+    <path
+      d="M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251"
+      fill="#EB4335"
     />
   </svg>
 )
diff --git a/src/ui/select.tsx b/src/ui/select.tsx
index 8e83ff1475f749a5cf99aae303acafcc2b098c62..93882755b1edf71fd6b789b78e823d6248f6ce8e 100644
--- a/src/ui/select.tsx
+++ b/src/ui/select.tsx
@@ -24,7 +24,9 @@
  */
 /** @jsxImportSource hono/jsx */
 
+import { basePath } from "../issuer.js"
 import { Layout } from "./base.js"
+import { ICON_GITHUB, ICON_GOOGLE } from "./icon.js"
 
 export interface SelectProps {
   /**
@@ -72,7 +74,7 @@ export function Select(props?: SelectProps) {
             const icon = ICON[key]
             return (
               <a
-                href={`/${key}/authorize`}
+                href={`${basePath ? basePath : ""}/${key}/authorize`}
                 data-component="button"
                 data-color="ghost"
               >
@@ -139,22 +141,8 @@ const ICON: Record<string, any> = {
       ></path>
     </svg>
   ),
-  google: (
-    <svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 488 512">
-      <path
-        fill="currentColor"
-        d="M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z"
-      ></path>
-    </svg>
-  ),
-  github: (
-    <svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512">
-      <path
-        fill="currentColor"
-        d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
-      ></path>
-    </svg>
-  ),
+  google: ICON_GOOGLE,
+  github: ICON_GITHUB,
   apple: (
     <svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 814 1000">
       <path
